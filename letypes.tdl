;;; Hey, emacs (1), this is -*- mode:tdl; Coding: utf-8; -*-
;;; 
;;;  Montserrat Marimon, Olga Zamaraeva
;;;
;;;  lextypes.tdl: Lexical types for the SRG

native_le := lex-item &
[ TRAITS native_token_list ]
""" We need to add this constraint to most entries in the lexicon, 
 to be able to filter out generic lexical entries where an entry
 already is present in the lexicon. """.


; Reflexionó durante un buen rato sobre qué cajón sacar.
; --- Verbs

basic-verb-lex := lex-item &
  [ INFLECTED -,
    SYNSEM [ SLSHD -,
             PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             MODIFIED notmod,
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     CAT [ HEAD verb & [ CLIT none,
                                         MOD < >,
                                         TAM #tam,
                                         KEYS.KEY v_event_rel ],
                           VAL.SPR < > ],
                     CONT.HOOK.INDEX event & [ E #tam ] ],
             NON-LOCAL.REL 0-dlist,
             LKEYS.KEYREL event-relation ] ]
""" Supertype for all verbs. """.
 
basic-aux-verb := basic-verb-lex & 
  [ SYNSEM [ LOCAL.CAT.HEAD [ AUX +,
                              KEYS.KEY aux_event_rel & #pred ],
             LKEYS.KEYREL.PRED #pred ] ]
""" Supertype for all auxiliary verbs. """. 

basic-main-verb := basic-verb-lex & 
  [ SYNSEM [ LOCAL [ CAT [ MC bool,
                           HEAD [ AUX -,
                                  KEYS.KEY nonaux_event_rel ] ],
                     CONT [ HOOK [ LTOP #ltop,
                                   INDEX #index & [ SF iforce ] ],
                            RELS.LIST < #keyrel & relation, ... > ] ],
             LKEYS.KEYREL #keyrel & [ LBL #ltop,
                                      ARG0 #index ] ] ]. 

norm-pronominal-verb := basic-verb-lex & 
  [ ALTS.IMPERS -,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX.PNG #ind ] >, 
                           CLTS < clitic-synsem & 
				  [ OPT -,
                                    LOCAL [ CAT.HEAD.CASE rflx,
                                            CONT.HOOK.INDEX.PNG #ind ] ] > ] ].

impers-pronominal-verb := basic-verb-lex & 
  [ ALTS.IMPERS -,
    SYNSEM.LOCAL.CAT.VAL.CLTS < clitic-synsem & 
                                [ OPT -,
                                  LOCAL [ CAT.HEAD.CASE none,
                                          AGR.PRONTYPE impers ] ] > ].

main-verb := basic-main-verb & 
  [ SYNSEM.LOCAL.CAT [ HEAD verb, 
                       VAL [ SUBJ < #subj >, 
                             COMPS #comps,
                             CLTS < > ] ],
    ARG-ST < #subj . #comps > ].

main-vprn := basic-main-verb & norm-pronominal-verb &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ < #subj >, 
                           COMPS < #comps >,
                           CLTS #clt ],
    ARG-ST < #subj . < #comps . #clt > > ].

main-vprn-intr := basic-main-verb & norm-pronominal-verb &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ < #subj >, 
                           COMPS < >,
                           CLTS #clt  ],
    ARG-ST < #subj . #clt > ].

main-verb-impers := basic-main-verb & 
  [ ALTS.IMPERS -,
    SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                           CLTS < > ],
    ARG-ST #comps ].


; --- 1. Verbal lexical entry types

; --- 1.1. Impersonal verbs 

v_impers_synsem := lex-synsem & 
  [ LOCAL [ CAT [ MC bool,
                  VAL.SUBJ < > ],
            CONT.RELS <! relation !> ] ].

v_impers := basic-main-verb & 
  [ ALTS [ RCP -, 
           RFX -,
           PASS -,
           VCALT - ] ].


; --- 1.1.1. weather predicates

v_impers_strict_intr_synsem := v_impers_synsem & 
  [ LOCAL [ AGR.PNG.PN 3sg, 
            CAT [ HEAD.INV -,
                  VAL.COMPS < > ],
            CONT.HCONS <! !> ] ]
"""; --- 1.1.1. weather predicates
- llover (to rain), tronar (to thunder),...
""".

v_-_nsbj_lex := v_impers & main-verb-impers & norm-zero-arg & 
  [ SYNSEM v_impers_strict_intr_synsem &
           [ LOCAL.CAT.HEAD.LSYNSEM v_impers_strict_intr_synsem ] ].


; --- 1.1.2. impersonal verbs taking nominal complements that don't passivize (haber)

trans_impers_synsem := v_impers_synsem & transitive_verb_synsem
"""
; - hacer + SN; e.g. hace calor/frío (it is hot/cold) =>> v_np_npsv-nsbj_lex

; - ser 3sg + PPde; e.g. en Islandia es de noche durante seis meses (Iceland is dark during six months)
; - ser/estar + SN/AP; e.g. es primavera/tarde (it is spring/late), está nublado (it is cloudy)
; - hacerse/ponerse 3sg + PPde; e.g. se hizo/puso de noche (night fell)
; - amanecer (e.g. el día amaneció nublado/amaneció un día espléndido (the sky was cloudy at dawn/it was splendid at dawn)) =>> v_unerg_le


; --- 1.1.2. impersonal verbs taking nominal complements that don't passivize (haber)
; !!! indefinite argument of partitive interpretation: NP with indefinite article (hay un libro/ there is 
; a book) Numeral or quantifier of the type of 'alguno' (some) (hay muchos/tres libros; there are 
; many/three books), bare plurals (hay libros/ there are books), negative quantifiers (no hay nada/nadie; 
; there isn't any/anybody), bare NPs (hay pan/ there is bread), phrases of partitive interpretation with 
; 'de' (hay de todo/ there are all sorts of things), relative clauses without antecedent (no hay quien 
; pueda con eso/ no one can against that). It does not need the 'a' with animate complements (hay 
; algunos profesores/ there are some teachers)
; !!! hay 4 metros desde la mesa hasta la TV, hay bastante/suficiente con esto (there are four meters 
; from the table to the TV, it is enough with this)
""".

v_impers_np_ntr_synsem := trans_impers_synsem &
  [ LOCAL [ AGR.PNG.PN 3sg, 
            CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL np_acc_unmrkd_local & 
                                      [ CONT.HOOK.INDEX ref-ind & #ind ],
                                NON-LOCAL.REL 0-dlist & [ LIST < > ] ] > ],
            CONT.HCONS <! !> ],
    LKEYS.KEYREL arg2-ev-relation & [ ARG2 #ind ] ].

v_np_npsv-nsbj_lex := v_impers & main-verb-impers & basic-one-arg & 
  [ SYNSEM v_impers_np_ntr_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_impers_np_ntr_synsem,
                         VAL.COMPS < [ OPT - ] > ] ] ].


; --- 1.1.3. impersonal verbs taking finite completive clauses (parecer, resultar, semejar, poder)

v_impers_cp_prop_fin_synsem := v_impers_synsem &
  [ LOCAL [ AGR.PNG.PN 3sg, 
            CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL s_or_cp_fin_local &
                                      [ CONT.HOOK.LTOP #larg ] ] > ],
            CONT.HCONS <! qeq & [ HARG #harg,
                                  LARG #larg ] !> ],
    LKEYS.KEYREL arg2-ev-relation & [ ARG2 #harg ] ]
    """; --- 1.1.3. impersonal verbs taking finite completive clauses (parecer, resultar, semejar, poder)
; They also show a raising structure (e.g. parece que Juan trabaja mucho -> Juan parece trabajar mucho 
; (it seems that John works a lot -> John seems to work a lot))
""".

v_cp_p-ind-nsbj_lex := v_impers & main-verb-impers & basic-one-arg & 
  [ SYNSEM v_impers_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_impers_cp_prop_fin_synsem,
                         VAL.COMPS < [ OPT -, 
                                       LOCAL.CAT.HEAD.TAM.MOOD ind ] > ] ] ]
"""; a)- taking indicative (parecer, resultar, semejar)
; e.g.- parece que Juan trabaja mucho -> Juan parece trabajar mucho 
;     (it seems that John works a lot -> John seems to work a lot)
;     - resultó que Juan fue el ganador -> Juan resultó ser el ganador (only with 'ser','estar' (to be) 
;     and 'tener' (to have))(it turned out that John was the winner -> John turned out to be the winner)
;     - semejaba que la curva continuaba -> la curva semejaba continuar (it seemed that the curve 
;     continued -> the curve seemed to continue)
""".

v_cp_p-sub-nsbj_lex := v_impers & main-verb-impers & basic-one-arg & 
  [ SYNSEM v_impers_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_impers_cp_prop_fin_synsem,
                         VAL.COMPS < [ OPT -, 
                                       LOCAL.CAT.HEAD.TAM.MOOD sub ] > ] ] ]
"""
; b)- taking subjunctive (poder)
; e.g.  puede que mañana llueva -> mañana puede llover (it may be that tomorrow rains -> it may rain tomorrow)
""".


; --- 1.1.4. other impersonal contructions 

v_impers_cp_p_inf_synsem := v_impers_synsem & 
  [ LOCAL [ AGR.PNG.PN 3sg, 
            CAT [ HEAD.INV -, 
                  VAL.COMPS < [ OPT -,
                                LOCAL mrkd_cp_prop_inf_local &
                                      [ CAT [ MC -,
                                              HEAD.KEYS.KEY #ckey & _que_p_sel_rel ],
                                        CONT.HOOK [ LTOP #larg,
                                                    INDEX.SF prop ] ] ] > ],
            CONT.HCONS <! qeq & [ HARG #harg,
                                  LARG #larg ] !> ],
    LKEYS [ KEYREL arg2-ev-relation &  [ ARG2 #harg ] ,
            --COMPKEY #ckey ] ]
"""
; --- 1.1.4. other impersonal contructions 

; --- "haber que + inf" (hay que trabajar más) ("it is necessary to + inf" (it is necessary to work more))
""".

v_cp_p-inf-nsbj_lex := v_impers & main-verb-impers & basic-one-arg & 
  [ SYNSEM v_impers_cp_p_inf_synsem &
           [ LOCAL.CAT.HEAD.LSYNSEM v_impers_cp_p_inf_synsem ] ].

v_impers_pron_intr_mrkd_np_synsem := v_impers_synsem &
  [ LOCAL [ AGR.PNG.PN 3sg, 
            CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL mrkd_np_local & 
                                      [ CAT.HEAD.KEYS.KEY #ckey,
                                        CONT.HOOK.INDEX #ind2 ] ] > ],
            CONT.HCONS <! !> ],
    LKEYS [ KEYREL arg2-ev-relation & [ ARG2 #ind2 ],
            --COMPKEY #ckey ] ]
"""
; --- tratarse (to be about)
; (e.g. se trata de un goleador nato (it is about (it is about a born goal scorer))
""".

v_pp_e-nsbj-prn_lex := v_impers & impers-pronominal-verb & basic-two-arg & 
  [ SYNSEM v_impers_pron_intr_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_impers_pron_intr_mrkd_np_synsem, 
                         VAL [ COMPS < #comps & [ OPT - ] >,
                               CLTS #clt ] ] ],
    ARG-ST < #comps . #clt > ].


v_impers_intr_mrkd_np-or-prop_synsem := v_impers_synsem &
  [ LOCAL [ AGR.PNG.PN 3sg, 
            CAT [ HEAD.INV -,
                  VAL [ COMPS < [ LOCAL.CAT.HEAD.KEYS.KEY #ckey & _con_p_sel_rel ] >,
                        CLTS < > ] ] ],
    LKEYS [ KEYREL arg2-ev-relation,
            --COMPKEY #ckey ] ]
"""
; --- sobrar, bastar (to be enough)
""".

v_impers_intr_mrkd_np-or-prop := v_impers & 
  [ SYNSEM v_impers_intr_mrkd_np-or-prop_synsem & 
           [ LOCAL.CAT.VAL.COMPS #comps ],
    ARG-ST #comps ]. 

v_impers_intr_mrkd_np_synsem := v_impers_intr_mrkd_np-or-prop_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL mrkd_np_local & 
                                    [ CAT.HEAD.KEYS.ALTKEY non_temp_nonpro_rel,
                                      CONT.HOOK.INDEX #arg2 & ref-ind ] ] >,
            CONT.HCONS <! !> ],
    LKEYS.KEYREL.ARG2 #arg2 ]
"""
; e.g. sobra/basta con 100 ptas (it is more than enough with 100 ptas)
""".

v_pp_e-nsbj_lex := v_impers_intr_mrkd_np-or-prop & basic-one-arg & 
  [ SYNSEM v_impers_intr_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_impers_intr_mrkd_np_synsem, 
                         VAL.COMPS <  [ OPT - ] > ] ] ].


v_impers_intr_mrkd_cp_fin_synsem := v_impers_intr_mrkd_np-or-prop_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL mrkd_cp_prop_fin_local &
                                    [ CONT.HOOK [ LTOP #larg,
                                                  INDEX.SF prop ] ] ] >, 
            CONT.HCONS <! qeq & [ HARG #harg,
                                  LARG #larg ] !> ],
    LKEYS.KEYREL.ARG2 #harg ]
"""; e.g. sobra/basta con que vengas (it is more than enough that you come)
""".

v_pp_e-cp-p-nsbj_lex := v_impers_intr_mrkd_np-or-prop & basic-one-arg & 
  [ SYNSEM v_impers_intr_mrkd_cp_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_impers_intr_mrkd_cp_fin_synsem, 
                         VAL.COMPS <  [ OPT - ] > ] ] ].


v_impers_intr_mrkd_vp_inf_synsem := v_impers_intr_mrkd_np-or-prop_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL mrkd_cp_prop_inf_local &
                                    [ CAT.MC -,
                                      CONT.HOOK [ LTOP #larg,
                                                  INDEX.SF prop ] ] ] >, 
            CONT.HCONS <! qeq & [ HARG #harg,
                                  LARG #larg ] !> ],
    LKEYS.KEYREL.ARG2 #harg ]
"""; e.g. sobra/basta con verte (it is more than enough seeing you)
""".

v_pp_e-vp-nsbj_lex :=  v_impers_intr_mrkd_np-or-prop & basic-one-arg & 
  [ SYNSEM v_impers_intr_mrkd_vp_inf_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_impers_intr_mrkd_vp_inf_synsem, 
                         VAL.COMPS <  [ OPT - ] > ] ] ].


v_impers_intr_io_mrkd_np-or-prop_synsem := v_impers_synsem &
  [ LOCAL [ AGR.PNG.PN 3sg, 
            CAT [ HEAD.INV -,
                  VAL [ COMPS < [ LOCAL dative_local & 
                                        [ CAT.HEAD.KEYS.KEY #ockey,
                                          CONT.HOOK.INDEX #arg3 ] ],
                                [ LOCAL.CAT.HEAD.KEYS.KEY #ckey & _con_p_sel_rel ] >,
                        CLTS < > ] ] ],
    LKEYS [ KEYREL arg23-ev-relation & 
                   [ ARG3 #arg3 ],
            --COMPKEY #ckey,
            --OCOMPKEY #ockey ] ]
"""; --- sobrar, bastar (to be enough)
""".

v_impers_intr_io_mrkd_np-or-prop := v_impers & 
  [ SYNSEM v_impers_intr_io_mrkd_np-or-prop_synsem & 
           [ LOCAL.CAT.VAL.COMPS #comps ],
    ARG-ST #comps ]. 

v_impers_intr_io_mrkd_np_synsem := v_impers_intr_io_mrkd_np-or-prop_synsem &
  [ LOCAL [ CAT.VAL.COMPS < synsem,
                            [ LOCAL mrkd_np_local & 
                                    [ CAT.HEAD.KEYS.ALTKEY non_temp_nonpro_rel,
                                      CONT.HOOK.INDEX #arg2 & ref-ind ] ] >,
            CONT.HCONS <! !> ],
    LKEYS.KEYREL.ARG2 #arg2 ]
"""; e.g. me sobra/basta con 100 ptas (for me it is more than enough with 100 ptas)
""".

v_ppa-pp_e-nsbj_lex := v_impers_intr_io_mrkd_np-or-prop & basic-two-arg & 
  [ SYNSEM v_impers_intr_io_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_impers_intr_io_mrkd_np_synsem, 
                         VAL.COMPS <  [ OPT - ], [ OPT - ] > ] ] ].


v_impers_intr_io_mrkd_cp_fin_synsem := v_impers_intr_io_mrkd_np-or-prop_synsem &
  [ LOCAL [ CAT.VAL.COMPS < synsem,
                            [ LOCAL mrkd_cp_prop_fin_local &
                                    [ CONT.HOOK [ LTOP #larg,
                                                  INDEX.SF prop ] ] ] >, 
            CONT.HCONS <! qeq & [ HARG #harg,
                                  LARG #larg ] !> ],
    LKEYS.KEYREL.ARG2 #harg ]
"""; e.g. me sobra/basta con que vengas (for me it is more than enough that you come)
""".

v_ppa-pp_e-cp-p-nsbj_lex := v_impers_intr_io_mrkd_np-or-prop & basic-two-arg & 
  [ SYNSEM v_impers_intr_io_mrkd_cp_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_impers_intr_io_mrkd_cp_fin_synsem, 
                         VAL.COMPS <  [ OPT - ], [ OPT - ] > ] ] ].


v_impers_intr_io_mrkd_vp_inf_synsem := v_impers_intr_io_mrkd_np-or-prop_synsem &
  [ LOCAL [ CAT.VAL.COMPS < synsem,
                            [ LOCAL mrkd_cp_prop_inf_local &
                                    [ CAT.MC -,
                                      CONT.HOOK [ LTOP #larg,
                                                  INDEX.SF prop ] ] ] >, 
            CONT.HCONS <! qeq & [ HARG #harg,
                                  LARG #larg ] !> ],
    LKEYS.KEYREL.ARG2 #harg ]
"""; e.g. me sobra/basta con verte (for me it is more than enough seeing you)
""".

v_ppa-pp_e-vp-nsbj_lex :=  v_impers_intr_io_mrkd_np-or-prop & basic-two-arg & 
  [ SYNSEM v_impers_intr_io_mrkd_vp_inf_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_impers_intr_io_mrkd_vp_inf_synsem, 
                         VAL.COMPS <  [ OPT - ], [ OPT - ] > ] ] ]
"""
; se me hace tarde (it gets late),  
; me duele en este brazo (this arm hurts), me pica en el brazo (my arm itches)
; nos dio por reír (we started to laugh), no me da tiempo (I don't have enough time), 
; (aquí) huele (muy bien/a quemado/a comida) (it smells very good/ burnt/ of food (in here))
; (aquí) sobra/falta dinero (there is more than enough/ there is some money missing (here))
; aquí pone que se prohíbe fumar (here it says that smoking is not allowed)
; oler a pan (to smell of bread), saber a pan (to taste like bread), perception verbs (taking compl DIV +) 
""".



; --- 1.2. Verbs taking verbal subjects

verbal-subj-synsem := lex-synsem &
  [ LOCAL [ AGR.PNG.PN 3sg,
            CAT [ MC bool,
                  VAL.SUBJ < [ OPT -,
                               LOCAL [ COORD -,
                                       CAT.VAL.COMPS < >,
                                       CONT.HOOK.LTOP #xarg ] ] > ],
            CONT [ HOOK.XARG #xarg,
                   HCONS.LIST < [ LARG #xarg ],... > ] ] ]
"""
; --- 1.2. Verbs taking verbal subjects
""". 

trans_vinf-subj-synsem := vinf-subj-synsem & transitive_verb_synsem.

vinf-subj-synsem := verbal-subj-synsem & 
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL vp_inf_local ] >,
            CONT.HCONS.LIST < [ HARG #harg ],... > ],
    LKEYS.KEYREL.ARG1 #harg ]. 

vfin-subj-synsem := verbal-subj-synsem &
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL s_local & 
                                   [ CAT.HEAD.VFORM fin ] ] >,
            CONT.RELS <! relation !> ] ]. 

vfin-subj-main-verb := basic-main-verb & 
  [ ALTS [ PASS -,
           IMPERS -,
           RCP -, 
           RFX - ],
    SYNSEM vfin-subj-synsem ].



v_subj_cp_prop_fin_unacc_synsem := vfin-subj-synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL [ SUBJ < [ LOCAL cp_fin_local ] >,
                        COMPS <  > ] ],
            CONT.HCONS <! [ HARG #harg ] !> ],
    LKEYS.KEYREL arg2-ev-relation & 
                 [ ARG2 #harg ] ]
"""
; --- 1.2.1. Unaccusative verbs taking finite verbs as subjects
; The subject appears in post-verbal position. Occasionally, a locative complement, with literal meaning 
; (aparecer (to appear), figurar (to say), quedar (to stay)) or figurative meaning (desprenderse 
; (to follow)). The finite verb does not alternate with an infinitive; however, it alternates with a NP, 
; though it cannot be a physical entity (of first order) with 'desprenderse' (to follow). With NP subjects, 
; 'aparecer' (to appear) y 'quedar' and 'quedar' (to stay) can take an optional IO.
; canvio INV + a INV -
""".

v_subj_cp_prop_fin_unacc := vfin-subj-main-verb & 
  [ ALTS.VCALT - ]. 

v_-_sbj-cp-p_lex := v_subj_cp_prop_fin_unacc & main-verb & basic-one-arg &
  [ SYNSEM v_subj_cp_prop_fin_unacc_synsem &
           [ LOCAL.CAT.HEAD.LSYNSEM v_subj_cp_prop_fin_unacc_synsem ] ]
"""; e.g. no figura en el contrato que el acuerdo es/sea irreversible (it does not appear in the 
; contract that the agreement is irreversible)
""". 

v_-_sbj-cp-p-prn_lex := v_subj_cp_prop_fin_unacc & impers-pronominal-verb & basic-two-arg & 
  [ SYNSEM v_subj_cp_prop_fin_unacc_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_unacc_synsem, 
                         VAL [ SUBJ < #subj >, 
                               CLTS #clt ] ] ],
    ARG-ST < #subj . #clt > ]
"""; e.g. de ahí no se desprende que la situación sea/es imposible (from there it does not follow that the 
; situation is impossible)
""". 


#|
v_subj_cp_prop_intr_io_synsem := verbal-subj-synsem & 
  [ LOCAL [ CAT.VAL [ COMPS < [ LOCAL dative_local & 
                                      [ CAT.HEAD [ CASE dat,
                                                   KEYS.KEY #ckey ],
                                        CONT.HOOK.INDEX #arg2 ] ] > ],
            CONT.HCONS <! [ HARG #harg ] !> ],
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG1 #harg,
                     ARG2 #arg2 ], 
            --COMPKEY #ckey ] ].

v_subj_cp_prop_inf_io_synsem := v_subj_cp_prop_intr_io_synsem & 
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL vp_inf_local ] >,
            CONT.HCONS.LIST < [ HARG #harg ],... > ],
    LKEYS.KEYREL.ARG1 #harg ]. 

v_subj_cp_prop_fin_intr_io*_synsem := v_subj_cp_prop_intr_io_synsem &
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL s_local & 
                                   [ CAT.HEAD.VFORM fin ] ] >,
            CONT.RELS <! relation !> ] ]
"""; --- 1.2.2. Intransitive verbs taking Vfin subjects and IO
; clitization/clitic doubling obligatory, that's why we specify the COMPS to be OPT -
""". 

|#

v_subj_cp_prop_inf_io_synsem := vinf-subj-synsem & 
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL vp_inf_local ] >,
                      COMPS < [ LOCAL dative_local & 
                                      [ CAT.HEAD [ CASE dat,
                                                   KEYS.KEY #ckey ],
                                        CONT.HOOK.INDEX #arg2 ] ] > ],
            CONT.HCONS <! [ HARG #harg ] !> ],
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG1 #harg,
                     ARG2 #arg2 ], 
            --COMPKEY #ckey ] ].

v_subj_cp_prop_fin_intr_io*_synsem := vfin-subj-synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL cp_fin_local ] >,
                      COMPS < expressed-synsem & 
                              [ LOCAL dative_local & 
                                      [ CAT.HEAD [ CASE dat,
                                                   KEYS.KEY #ckey ],
                                        CONT.HOOK.INDEX #arg2 ] ] > ],
            CONT.HCONS <! [ HARG #harg ] !> ],
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG1 #harg,
                     ARG2 #arg2 ], 
            --COMPKEY #ckey ] ].

v_subj_cp_prop_fin_intr := vfin-subj-main-verb.

v_subj_cp_prop_fin_io*_synsem := v_subj_cp_prop_fin_intr_io*_synsem & 
  [ LOCAL.CAT.HEAD.INV - ]
"""; a)- event verbs (acaecer, acontecer, ocurrir, pasar, presentarse, sobrevenir, suceder (to happen, to occur, ...))
; The subject must be postponed. The IO appears occasionally. The clause does not alternate with a VPinf. 
; Indicative/subjunctive alternate depending on whether the content is asserted or not (except for 'ocurrir'
; (to occur), which can alternate always). The clause can only take the determiner if the IO is present. 
; The clause alternates with an entity of second order.
; canvio INV + a INV -
""".

v_ppa*_sbj-cp-p_lex := v_subj_cp_prop_fin_intr & main-verb & basic-two-arg &
  [ ALTS.VCALT -,
    SYNSEM v_subj_cp_prop_fin_io*_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_io*_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""; e.g. ocurrir ((le) ocurre que no hizo lo que le habían pedido ((to occur) it occurs that s/he didn't do what s/he was asked))
""".


v_subj_cp_prop_inf_or_fin_io*_synsem := v_subj_cp_prop_fin_intr_io*_synsem
"""; b)- "incumbencia" verbs (atañer (to concern), bastar (to be enough), caber (to fit), constar, convenir 
; (to agree), faltar (to be missing), importar (to matter), parecer (to seem),...)
; The clause can alternate with abstract or eventive nouns ('caber' (to suit) is the only one that can 
; alternate with a first order entity). The clause can only take the determiner if the IO is present. 
; The subject can be pre/postposed. The presence of the IO is occasional. All verbs, except 'constar', 
; take only the subjunctive mood. The clause alternates with a VPinf and when the IO is present, it is 
; interpreted as the subject of the infinitive, when it is not, the construction has a generic 
; interpretation. "parecer" (to seem) demands the OI when it is constructed with a subject VPinf.
""". 

v_ppa*_sbj-cp-p-sub-cv_lex := v_subj_cp_prop_fin_intr & main-verb & basic-two-arg & 
  [ ALTS.VCALT +,
    SYNSEM v_subj_cp_prop_inf_or_fin_io*_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_inf_or_fin_io*_synsem, 
                         VAL [ SUBJ < [ LOCAL.CAT.HEAD.TAM.MOOD sub ] >,
                               COMPS < [ OPT + ] > ] ] ] ]
"""
; e.g. bastar (no (me) basta que me quieras/que me quieras no (me) basta) 
; (to be enough (it is not enough (for me) that you love me/that you love me is not enough (for me))
""".

v_ppa*_sbj-cp-p-cv_lex := v_subj_cp_prop_fin_intr & main-verb & basic-two-arg & 
  [ ALTS.VCALT +,
    SYNSEM v_subj_cp_prop_inf_or_fin_io*_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_inf_or_fin_io*_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""
; e.g. constar ((me) consta que estuvo aquí/no consta que supiese el día de su muerte hasta ese día)
; (to be certain ((for me) it is certain that s/he was here/ it is not certain that s/he knew the day of 
; his/her death till that day)

; - with "parecer" the IO is obligatory when it takes a VPinf subject 
; => removed
""".


v_subj_cp_prop_fin_sub_io*_synsem := v_subj_cp_prop_fin_intr_io*_synsem &
  [ LOCAL.CAT.VAL.SUBJ < [ LOCAL.CAT.HEAD.TAM.MOOD sub ] > ]
"""; c)- Psychological verbs (admirar, agobiar, alegrar, apetecer, asombrar, asustar,... (to admire, 
; to overwhelm, to make happy, to long for, to surprise, to scare,...))
; The clause can take the determiner. The subject can be preposed or postposed. The IO is common (but not 
; always obligatory). They do not accept the indicative mood. The clause alternates with VPinf only 
; when the IO is interpreted as the subject of the infinitive, and with an animate or inanimate NP.
""".

v_ppa*_sbj-cp-p-sub_lex := v_subj_cp_prop_fin_intr & main-verb & basic-two-arg & 
  [ ALTS.VCALT +,
    SYNSEM v_subj_cp_prop_fin_sub_io*_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_sub_io*_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""; e.g. gustar (no *(me) gusta que a los toros te pongas la minifalda)
""".

v_ppa*_sbj-cp-p-sub-prn_lex := v_subj_cp_prop_fin_intr & impers-pronominal-verb & basic-three-arg & 
  [ ALTS.VCALT +,
    SYNSEM v_subj_cp_prop_fin_sub_io*_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_sub_io*_synsem, 
                         VAL [ SUBJ < #subj >, 
                               COMPS < #comps & [ OPT + ] >,
                               CLTS #clt ] ] ],
    ARG-ST < #subj . < #comps . #clt > > ]
"""; e.g. antojarse (to fancy)
""".

; --- 1.2.3. Intransitive verbs taking Vfin subject and marked NP

v_subj_cp_prop_inf_intr_mrkd_np_synsem := vinf-subj-synsem & 
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL mrkd_np_local & 
                                    [ CAT.HEAD.KEYS.KEY #ckey,
                                      CONT.HOOK.INDEX #ind2 ] ] >,
            CONT.HCONS <! [ HARG #harg ] !> ],
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG1 #harg,
                     ARG2 #ind2 ],
            --COMPKEY #ckey ] ]
"""; --- 1.2.3. Intransitive verbs taking Vfin subject and marked NP
; Always in the subjunctive mood and it can alternate with a (non-controlled) VPinf. The unmarked order 
; is SVC. The subject must take the determiner when nothing is intercalated between the latter and the verb.
; (e.g. (el) que las clases sean malas repercute en los alumnos/repercute en los alumnos (el) que las 
; clases sean malas/en los alumnos repercute *(el) que las clases sean malas (the fact that classes are 
; bad has repercussions on the students/It has repercussions on the students the fact that classes are 
; bad/on the students has repercusions the fact that classes are bad))
""".

v_subj_cp_prop_fin_intr_mrkd_np_synsem := vfin-subj-synsem & 
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL cp_fin_local &
                                     [ CAT.HEAD.TAM.MOOD sub ] ] >,
                      COMPS < [ LOCAL mrkd_np_local & 
                                      [ CAT.HEAD.KEYS.KEY #ckey,
                                        CONT.HOOK.INDEX #ind2 ] ] > ],
            CONT.HCONS <! [ HARG #harg ] !> ],
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG1 #harg,
                     ARG2 #ind2 ],
            --COMPKEY #ckey ] ].

v_pp_e-sbj-cp-p-sub_lex := v_subj_cp_prop_fin_intr & main-verb & basic-two-arg &
  [ ALTS.VCALT +,
    SYNSEM v_subj_cp_prop_fin_intr_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_intr_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""
; e.g. (el) que las clases sean malas repercute en los alumnos (the fact that classes are bad has 
; repercussions on the students)
""".

v_pp_e-sbj-cp-p-sub-prn_lex := v_subj_cp_prop_fin_intr & impers-pronominal-verb & basic-three-arg & 
  [ ALTS.VCALT +,
    SYNSEM v_subj_cp_prop_fin_intr_mrkd_np_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_intr_mrkd_np_synsem, 
                         VAL [ SUBJ < #subj >, 
                               COMPS < #comps & [ OPT - ] >,
                               CLTS #clt ] ] ],
    ARG-ST < #subj . < #comps . #clt > >  ]
"""; e.g. traducirse en (be translated into)
""".

v_subj_cp_prop_inf_intr_io*_mrkd_np_synsem := vinf-subj-synsem & 
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL dative_local ], 
                          [ LOCAL mrkd_np_local ] > ]
"""
; --- 1.2.4. Intransitive verbs taking Vfin subject, IO and marked NP
""".

v_subj_cp_prop_fin_intr_io*_mrkd_np_synsem := vfin-subj-synsem & 
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL cp_fin_local &
                                     [ CAT.HEAD.TAM.MOOD sub ] ] >,
                      COMPS < [ LOCAL dative_local & 
                                  [ CAT.HEAD.KEYS.KEY #ockey,
                                    CONT.HOOK.INDEX #ind3 ] ],
                              [ LOCAL mrkd_np_local & 
                                      [ CAT.HEAD.KEYS.KEY #ckey,
                                        CONT.HOOK.INDEX #ind2 ] ] > ],
            CONT.HCONS <! [ HARG #harg ] !> ],
    LKEYS [ KEYREL arg123-ev-relation & 
                   [ ARG1 #harg,
                     ARG2 #ind2,
                     ARG3 #ind3 ],
            --COMPKEY #ckey,
            --OCOMPKEY #ockey ] ].


v_ppa*-pp_e-sbj-cp-p-sub_lex := v_subj_cp_prop_fin_intr & main-verb & basic-three-arg & 
  [ ALTS.VCALT +,
    SYNSEM v_subj_cp_prop_fin_intr_io*_mrkd_np_synsem &
           [  LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_intr_io*_mrkd_np_synsem, 
                          VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""; e.g. de nada le sirve luchar/que luchen
""".


v_subj_cp_prop_inf_trans_np_synsem := trans_vinf-subj-synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL np_acc_local  ],... > ].

; --- Transitive verbs taking Vfin

v_subj_cp_prop_fin_trans_np_synsem := vfin-subj-synsem & transitive_verb_synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL cp_fin_local &
                                     [ CAT.HEAD.TAM.MOOD sub ] ] >,
                      COMPS < [ LOCAL [ CAT.HEAD.KEYS.KEY #ckey,
                                        CONT.HOOK.INDEX ref-ind & #ind ],
                                NON-LOCAL.REL 0-dlist & [ LIST < > ] ],... > ],
            CONT.HCONS <! [ HARG #harg ] !> ],
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG1 #harg,
                     ARG2 #ind ],
            --COMPKEY #ckey ] ]
"""; --- Transitive verbs taking Vfin
; A determiner can be added to the subject. The subject alternates with the neutral pronoun and with 
; abstract nouns. The majority accept a person as subject. The clause is always in the subjunctive mood.
""".

v_subj_cp_prop_trans_np := vfin-subj-main-verb & 
  [ ALTS.VCALT + ].

; --- 1.2.4. Transitive verbs taking Vfin subject and DO

v_np_sbj-cp-p-sub_lex := v_subj_cp_prop_trans_np & main-verb & basic-two-arg & 
  [ SYNSEM v_subj_cp_prop_fin_trans_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_trans_np_synsem, 
                         VAL.COMPS < [ OPT -, 
                                       LOCAL np_acc_local ] > ] ] ]
"""
; --- 1.2.4. Transitive verbs taking Vfin subject and DO

; a)- Implicative and evidencial verbs (e.g. implicar, evidenciar, denotar, destacar,... (to imply, 
; to evidence, to denote, to highlight,...))
; - Do not accept a person as subject: acarrear, conllevar, denotar, entrañar, evidenciar, implicar, 
; reflejar, simbolizar y suponer (to entail, to bring about, to mean, to involve, to reveal, to imply, to 
; reflect, to simbolize and to suppose).
; - The clause alternates with a non-controlled VPinf.
; - The majority have an abstract entity as a DO and some accept a person as object.
; - The IO always appears under the clitic (denotar, evidenciar, excluir, implicar, ratificar, significar,..
; (to denote, to evidence, to exclude, to imply, to ratify, to signify,...) cannot take the clitic)
; - Order: SVC. If the order is reversed, 'el (hecho de)' (the fact that) must appear. 
; - The DO can be expressed under the form of a subordinate noun clause with verbs like: significar, 
; suponer, equivaler,... (to signify, to suppose, to be equivalent to) (cf. v_subj_cp_prop_trans_cp_prop_le)

; e.g.que el poder político se descomponga no significa necesariamente una decadencia (the fact that the 
; political power decays does not mean necessarily a decadence)
""".

v_np_sbj-cp-p-sub-idm_lex := v_subj_cp_prop_trans_np & main-verb & basic-two-arg & 
  [ SYNSEM v_subj_cp_prop_fin_trans_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_trans_np_synsem, 
                         VAL.COMPS < [ OPT -, 
                                       LOCAL np_acc_local ] > ] ] ]
"""; b)- support verbs (e.g. dar pena, hacer falta, tener gracia,...)(to grieve, to be needed, to have charm)
; The NP appears as a DO which generally does not take a determiner, but may take intensifiers,
; its inmediately postverbal position is fixed and the subject is likely to occupy the final position.
; In some cases the presence of a dative expected or implied (e.g. dar asco, lástima (to be disgusting, 
; to grieve)). With some others it is possible (e.g. hacer falta, ilusión (to be needed, to be looking 
; forward to something) but with others it is impossible (e.g. tener gracia, pena, rabia / to have charm, 
; pitty, to make furious))
""".

; --- 1.2.5. Transitive verbs taking Vfin subject, DO and marked NP

v_subj_cp_prop_fin_trans_np_mrkd_np_synsem := v_subj_cp_prop_fin_trans_np_synsem &
[ LOCAL.CAT.VAL.COMPS < [ LOCAL np_acc_local ],
                        [ LOCAL mrkd_np_local & 
                                [ CAT.HEAD.KEYS.KEY #ockey,
                                  CONT.HOOK.INDEX #ind3 ] ] >,
    LKEYS [ KEYREL arg123-ev-relation & 
                   [ ARG3 #ind3 ],
            --OCOMPKEY #ockey ] ]
"""
; --- 1.2.5. Transitive verbs taking Vfin subject, DO and marked NP

; The clause alternates with a VPinf controlled by the DO (e.g. trabajar la obliga a madrugar (working 
; obliges her to get up early). The DO cannot be sentential. The prepositional complement can be optional 
; and can be substituted by a clitic dative when it's human and is introduced by "a" 
; (cf. v_subj_cp_prop_ditrans*_le)
""".


v_np-pp_e-sbj-cp-p-sub_lex := v_subj_cp_prop_trans_np & main-verb & basic-three-arg &
  [ SYNSEM v_subj_cp_prop_fin_trans_np_mrkd_np_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_trans_np_mrkd_np_synsem,
                         VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ]
"""; e.g. (el) que su partido haya perdido las elecciones lo apartará del poder
""".

; --- 1.2.6. Ditransitive verbs taking Vfin subject

v_subj_cp_prop_fin_ditrans_synsem := v_subj_cp_prop_fin_trans_np_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL np_acc_unmrkd_local ],
                          [ LOCAL dative_local & 
                                  [ CAT.HEAD.KEYS.KEY #ockey,
                                    CONT.HOOK.INDEX #ind3 ] ] >,
    LKEYS [ KEYREL arg123-ev-relation & 
                   [ ARG3 #ind3 ],
            --OCOMPKEY #ockey ] ]
"""; --- 1.2.6. Ditransitive verbs taking Vfin subject

; The clause alternates with a VPinf controlled by the IO (e.g. tener que aguantar los embotellamientos 
; te estropea el día (having to put up with traffic jams spoils your day))
""".


v_np-ppa*_sbj-cp-p-sub_lex := v_subj_cp_prop_trans_np & main-verb & basic-three-arg & 
  [ SYNSEM v_subj_cp_prop_fin_ditrans_synsem &
           [  LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_ditrans_synsem, 
                          VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
"""; e.g. El que haya dicho esto le acarrea muchos problemas (a María) (the fact that he had 
; said this causes many troubles (to María))
""".

; --- 1.2.7. Transitive verbs taking sentential subjects and finite completive clauses 

v_subj_cp_prop_inf_trans_cp_prop_fin_synsem := trans_vinf-subj-synsem & 
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL cp_fin_local ] > ]
"""; --- 1.2.7. Transitive verbs taking sentential subjects and finite completive clauses 

; The subject must precede the main verb
""".

v_subj_cp_prop_fin_trans_cp_prop_fin_synsem := vfin-subj-synsem & transitive_verb_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL [ SUBJ < [ LOCAL cp_fin_local &
                                       [ CAT.HEAD.TAM.MOOD sub ] ] >,
                        COMPS < [ LOCAL cp_fin_local & 
                                        [ CAT.HEAD.KEYS.KEY #ckey,
                                          CONT.HOOK.LTOP #larg2 ] ] > ] ],
            CONT.HCONS <! [ HARG #harg1 ],
                          [ HARG #harg2, LARG #larg2 ] !> ],
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG1 #harg1,
                     ARG2 #harg2 ],
            --COMPKEY #ckey ] ].


v_cp_p-sbj-cp-p-sub_lex := vfin-subj-main-verb & main-verb & basic-two-arg & 
  [ ALTS.VCALT +,
    SYNSEM v_subj_cp_prop_fin_trans_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_trans_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. que te haya aprobado no significa que no tengas que venir a clase (the fact that s/he has 
; approved you/given you a passing grade doesn`t mean that you don't have to come to classes)
""".


; --- 1.2.8. Ditransitive verbs taking sentential subjects, IO and finite completive clauses 

v_subj_cp_prop_inf_ditrans_cp_prop_fin_synsem := trans_vinf-subj-synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL dative_local ], [ LOCAL cp_fin_local ] > ]
"""; --- 1.2.8. Ditransitive verbs taking sentential subjects, IO and finite completive clauses 
""".

v_subj_cp_prop_fin_ditrans_cp_prop_fin_synsem := vfin-subj-synsem & transitive_verb_synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL cp_fin_local &
                                     [ CAT.HEAD.TAM.MOOD sub ] ] >,
                      COMPS < [ LOCAL dative_local & 
                                      [ CAT.HEAD.KEYS.KEY #ckey ,
                                        CONT.HOOK.INDEX #ind3 ] ],
                              [ LOCAL cp_fin_local & 
                                      [ CAT.HEAD.KEYS.KEY #ockey,
                                        CONT.HOOK.LTOP #larg2 ] ] > ],
            CONT.HCONS <! [ HARG #harg1 ],
                          [ HARG #harg2, LARG #larg2 ] !> ],
    LKEYS [ KEYREL arg123-ev-relation & 
                   [ ARG1 #harg1,
                     ARG2 #harg2,
                     ARG3 #ind3 ],
            --COMPKEY #ckey,
            --OCOMPKEY #ockey ] ].

v_ppa*-cp_p-sbj-cp-p-sub_lex := vfin-subj-main-verb & main-verb & basic-three-arg & 
  [ ALTS.VCALT +,
    SYNSEM v_subj_cp_prop_fin_ditrans_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_subj_cp_prop_fin_ditrans_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""; e.g. oír música no (te) impide trabajar/que trabajes (listening to music doesn't prevents you from working)
""".


; --- 1.2.9. Attributive structures

; --- 1.2.9.1. Copula verbs

v_cop_verbal_subject_synsem := v_copula_basic_synsem &
  [ LOCAL [ AGR.PNG.PN 3sg,
            CAT.VAL.SUBJ < [ OPT -,
                             LOCAL v_local & 
                                   [ COORD -,
                                     CAT.VAL [ COMPS < >,
                                               CLTS < > ],
                                     CONT.HOOK.INDEX.SF prop ],
                             NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
                                         REL 0-dlist & [ LIST < > ],
                                         QUE 0-dlist & [ LIST < > ] ] ] > ] ]
"""
; --- 1.2.9. Attributive structures

; (ser & estar (to be), parecer (to seem), quedar (to stay), 
; resultar (to result) y aparecer (to appear))
; The unmarked order is VCS, but SVC and CVS are also possible. 
; The mode of the clause depends on the attribute. The attributes that combine with the indicative mood 
; do not admit a VPinf subject, as neither do the attributes VPinf. If there is a dative correferent with 
; the subject of the subordinate clause, the latter tends to take a non-flexionate form (VPinf).
; !!! sentential subjects with null verbs (e.g. ¡(Es) Lástima que no hayas ganado! ¡Qué pena (es) 
; que no vengas!)

; --- 1.2.9.1. Copula verbs
""".

v_ap_cop_verbal_subject_synsem := v_cop_verbal_subject_synsem & 
  [ LOCAL [ CAT [ HEAD.TAM #tam,
		  VAL.COMPS < [ OPT -,
                                LOCAL prd_local &
                                      [ CAT.HEAD adj & 
                                                 [ TAM #tam,
                                                   MOD < [ LOCAL intersective-mod ] > ],
                                        CONT [ HOOK [ LTOP #larg,
                                                      INDEX #index,   
                                                      XARG #xarg ] ] ] ] > ],
            CONT [ HOOK.INDEX #index,
                   HCONS <! [ LARG #larg, HARG #xarg ] !>,
                   RELS <! !> ] ] ].

v_ppart_cop_verbal_subject_synsem := v_cop_verbal_subject_synsem & 
  [ LOCAL [ CAT [ HEAD.TAM #tam,
                  VAL.COMPS < [ OPT -,
                                LOCAL [ CAT [ HEAD adj &
                                                   [ TAM #tam,
                                                     PRD non-prd ],
                                              VAL.SUBJ < > ],
                                        CONT.HOOK [ LTOP #larg,
                                                    INDEX #index ] ] ] > ],
            CONT [ HOOK.INDEX #index,
                   HCONS <! [ LARG #larg ] !>,
                   RELS <! !> ] ] ].

v_pp_e_cop_verbal_subject_synsem := v_cop_verbal_subject_synsem & 
  [ LOCAL [ CAT [ HEAD.TAM #tam,
                  VAL.COMPS < [ OPT -,
                                LOCAL prd_local &
                                      [ CAT.HEAD [ TAM #tam,
                                                   KEYS [ KEY _de_p_rel,
                                                          ALTKEY non_modable_rel ] ],
                                        CONT.HOOK [ LTOP #larg,
                                                    INDEX #index,
                                                    XARG #xarg ] ] ] > ],
            CONT [ HOOK.INDEX #index,
                   HCONS <! [ LARG #larg, HARG #xarg ] !>,
                   RELS <! !> ] ] ].

v_adv_verbal_subject_synsem := v_cop_verbal_subject_synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT.HOOK.LTOP #larg ] >,
                      COMPS < [ OPT -,
                                LOCAL [ COORD -,
                                        CAT.HEAD adv & [ MOD < [ LOCAL.CAT.HEAD verb ] > ],
                                        CONT [ HOOK.LTOP #ltop,
                                               RELS.LIST < [ ARG1 #xarg ], ... > ] ] ] > ],
            CONT [ HOOK.LTOP #ltop,
                   HCONS <! [ LARG #larg , HARG #xarg ] !>,
                   RELS <! arg2-ev-relation & 
                           [ ARG2 #xarg ] !> ] ] ].

v_cop-id_verbal_subject_synsem := lex-synsem &
  [ LOCAL [ AGR.PNG.PN 3sg,
            CAT [ HEAD.INV -,
                  VAL [ SUBJ < [ OPT -,
                                 LOCAL [ COORD -,
                                         CAT.VAL.CLTS < > ],
                                 NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
                                             REL 0-dlist & [ LIST < > ],
                                             QUE 0-dlist & [ LIST < > ] ] ] >,
                        COMPS < [ OPT - ] > ] ],
            CONT.RELS <! arg12-ev-relation !> ],
    LKEYS.KEYREL.PRED _be_v_id_rel ]
"""; a)- 'ser': if there is a finite clause, it accepts adjectives, NPs, the adverb "así" (like this), 
; and "de + VPinf" (or an equivalent adjective ending in -ble); with subject VPinf it accepts 
; NPs, adjectives, "de + NP" and VPinf
""".

v_np_npsv_cop-id_verbal_subject_synsem := v_cop-id_verbal_subject_synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL vp_inf_local & 
                                     [ CONT.HOOK.LTOP #larg ] ] >,
                     COMPS < [ LOCAL n_local &
                                     [ CAT.VAL [ SUBJ < >,
                                                 COMPS < > ],
                                       CONT.HOOK.INDEX #ind2 & [ SORT non-temp ] ],
                               NON-LOCAL.REL 0-dlist ] > ],
            CONT.HCONS <! [ HARG #harg, LARG #larg ] !> ],
    LKEYS.KEYREL [ ARG1 #harg, 
                   ARG2 #ind2 ] ].

v_vp_cop-id_verbal_subject_synsem := v_cop-id_verbal_subject_synsem & 
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL vp_inf_local & 
                                     [ CONT.HOOK.LTOP #larg ] ] >,
                      COMPS < [ LOCAL vp_inf_local & 
                                      [ COORD -,
                                        CAT.VAL.CLTS < >,
                                        CONT.HOOK.LTOP #larg2 ],
                                NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
                                            REL 0-dlist & [ LIST < > ],
                                            QUE 0-dlist & [ LIST < > ] ] ] > ],
            CONT.HCONS <! [ HARG #harg, LARG #larg ],
                          [ HARG #harg2, LARG #larg2 ] !> ],
    LKEYS.KEYREL [ ARG1 #harg, 
                   ARG2 #harg2 ] ].

v_np_cop-id_verbal_subject_synsem := v_cop-id_verbal_subject_synsem & 
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL s_local &
                                     [ CAT.HEAD.VFORM fin,
                                       CONT.HOOK.LTOP #larg ] ] >,
                      COMPS < [ OPT -,
                                LOCAL n_local &
                                      [ CAT.VAL [ SUBJ < >,
                                                  COMPS < > ],
                                        CONT.HOOK.INDEX #ind2 & [ SORT non-temp ] ],
                                NON-LOCAL.REL 0-dlist ] > ],
            CONT.HCONS <! [ HARG #harg,
                            LARG #larg ] !> ],
    LKEYS.KEYREL [ ARG1 #harg, 
                   ARG2 #ind2 ] ].

v_cop-id_verb_sbj := main-verb & basic-two-arg & 
  [ SYNSEM v_cop-id_verbal_subject_synsem ].


v_cop_ser_verb_sbj := v_cop & 
  [ SYNSEM v_cop_verbal_subject_synsem ]. 

v_cop_ser_vp-inf_sbj := v_cop_ser_verb_sbj &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL vp_inf_local ] > ].

v_cop_ser_cp_p_sbj := v_cop_ser_verb_sbj &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL s_local & 
                                        [ CAT.HEAD.VFORM fin ] ] > ].

v_ap_sbj-vp-inf-ser_lex := v_cop_ser_vp-inf_sbj &
  [ SYNSEM v_ap_cop_verbal_subject_synsem & 
           [ LOCAL.CAT.HEAD.LSYNSEM v_ap_cop_verbal_subject_synsem ] ]
"""; e.g. es imposible vivir en el centro
""".

v_pp_e-sbj-vp-inf-ser_lex := v_cop_ser_vp-inf_sbj &
  [ SYNSEM v_pp_e_cop_verbal_subject_synsem & 
           [ LOCAL.CAT.HEAD.LSYNSEM v_pp_e_cop_verbal_subject_synsem ] ]
"""; e.g. rectificar es de sabios 
""". 

v_np_npsv-sbj-vp-inf-ser_lex := v_cop-id_verb_sbj & 
  [ SYNSEM v_np_npsv_cop-id_verbal_subject_synsem &
           [ LOCAL.CAT.HEAD.LSYNSEM v_np_npsv_cop-id_verbal_subject_synsem ] ]
"""; e.g. regalar detalles es una cursilería 
""". 

v_vp_sbj-vp-inf-ser_lex := v_cop-id_verb_sbj & 
  [ SYNSEM v_vp_cop-id_verbal_subject_synsem &
           [ LOCAL.CAT.HEAD.LSYNSEM v_vp_cop-id_verbal_subject_synsem ] ]
"""; e.g. Tolerar es simplemente reconocer que el otro existe.
""".

v_ap_sbj-cp-p-ser_lex := v_cop_ser_cp_p_sbj &
  [ SYNSEM v_ap_cop_verbal_subject_synsem & 
           [ LOCAL.CAT.HEAD.LSYNSEM v_ap_cop_verbal_subject_synsem ] ]
"""; e.g. es imposible que no venga
""".

v_np_sbj-cp-p-ser_lex := v_cop-id_verb_sbj & 
  [ SYNSEM v_np_cop-id_verbal_subject_synsem & 
           [ LOCAL.CAT.HEAD.LSYNSEM v_np_cop-id_verbal_subject_synsem ] ]
"""; e.g. es de agradecer que hayan descubierto una nueva vacuna
; e.g. es así
""".

v_cop_estar_verb_sbj := v_cop & 
  [ SYNSEM v_cop_verbal_subject_synsem ]
"""; b)- el verbo 'estar' combines with the adjective "claro" (clear) and with the adverbs "bien" (well) 
; and "mal" (badly). The clause alternates with a VPinf only when the attribute is a participle.
; e.g. no está claro/bien que ha ocurrido, está prohibido fumar aqui.
""". 

v_cop_estar_vp-inf_sbj := v_cop_estar_verb_sbj &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL vp_inf_local ] > ].

v_cop_estar_cp_p_sbj := v_cop_estar_verb_sbj &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL s_local & 
                                        [ CAT.HEAD.VFORM fin ] ] > ].

v_ppart_sbj-vp-inf-estar_lex := v_cop_estar_vp-inf_sbj &
  [ SYNSEM v_ppart_cop_verbal_subject_synsem & 
           [ LOCAL.CAT.HEAD.LSYNSEM v_ppart_cop_verbal_subject_synsem ] ]
"""; e.g. está prohibido fumar aqui.
""".

v_ap_sbj-cp-p-estar_lex := v_cop_estar_cp_p_sbj &
  [ SYNSEM v_ap_cop_verbal_subject_synsem & 
           [ LOCAL.CAT.HEAD.LSYNSEM v_ap_cop_verbal_subject_synsem ] ]
"""; e.g. no está claro que ha ocurrido
""".

v_adv_sbj-cp-p-estar_lex := v_cop_estar_cp_p_sbj & norm-hook-lex &
  [ SYNSEM v_adv_verbal_subject_synsem &
           [ LOCAL.CAT.HEAD.LSYNSEM v_adv_verbal_subject_synsem ] ]
"""; e.g. está bien/mal que Guillermo lo haga
""".



#|
; --- 1.2.9.2. verbs taking a predicative complement and IO

v_subj_cp_prop_seq_ppa_synsem := lex-synsem &
  [ LOCAL [ AGR.PNG.PN 3sg,
            CAT [ VAL [ SUBJ < [ OPT -,
                                 LOCAL v_local & 
                                       [ CAT.VAL.COMPS < > ] ] > ,
                        COMPS < [ OPT -,
                                  LOCAL prd_local &
                                        [ CAT.HEAD.KEYS.KEY #ckey,
                                          CONT.HOOK [ LTOP #larg,
                                                      INDEX #index,
                                                      XARG #xarg ] ] ],
                                [ OPT +,
                                     LOCAL dative_local & 
                                           [ CAT.HEAD.KEYS.KEY #ockey,
                                             CONT.HOOK.INDEX ref-ind & #ind3 ] ] > ] ],
            CONT [ HOOK [ XARG #xarg,
                          LTOP #harg,
                          INDEX #index ],
                   RELS <! #key & arg12-ev-relation & 
                                 [ ARG1 #xarg,
                                   ARG2 handle & #harg ] !>,
		   HCONS <! qeq & [ HARG #harg,
                                    LARG #larg ] !> ] ],
    LKEYS [ KEYREL arg123-ev-relation & #key & 
                   [ ARG3 #ind3 ],
            --COMPKEY #ckey,
            --OCOMPKEY #ockey ] ]
"""; --- 1.2.9.2. verbs taking a predicative complement and IO
""".

v_subj_cp_prop_inf_seq_ppa_synsem := v_subj_cp_prop_seq_ppa_synsem &
  [ LOCAL.CAT.VAL.SUBJ < [ LOCAL vp_inf_local & 
                                 [ CAT.VAL.SUBJ < [ OPT + ] > ] ] > ].

v_subj_cp_prop_fin_seq_ppa_synsem := v_subj_cp_prop_seq_ppa_synsem &
  [ LOCAL.CAT.VAL.SUBJ < [ LOCAL cp_fin_local ] > ].

v_subj_cp_prop_seq_ppa := main-verb & 
  [ ALTS [ PASS -,
           IMPERS -, 
           RCP -, 
           RFX -,
           VCALT - ],
    SYNSEM v_subj_cp_prop_seq_ppa_synsem ].


; a)- el verb 'quedar' only combines with the adjective "claro" (clear) and with the adverbs "bien" (well) 
; and "mal" (badly). The clause does not alternates with a VPinf.
; e.g. (le) no queda muy claro/bien que ha ocurrido
v_ap-ppa*_sbj-cp-p-fin_lex := v_subj_cp_prop_seq_ppa & basic-three-arg & 
  [ SYNSEM v_subj_cp_prop_fin_seq_ppa_synsem &
           [ LOCAL.CAT.VAL.COMPS < [ LOCAL prd_local &
                                           [ CAT.HEAD adj,
                                             CONT.RELS.LIST < [ PRED "_claro_a_rel" ],... > ] ],... > ] ]. 

v_adv-ppa*_sbj-cp-p-fin_lex := v_subj_cp_prop_seq_ppa & basic-three-arg & 
  [ SYNSEM v_subj_cp_prop_fin_seq_ppa_synsem &
           [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ COORD -,
                                             CAT.HEAD adv & 
                                                      [ MOD < [ LOCAL.CAT.HEAD verb ] > ] ] ],... > ] ].


; b)- the verb 'parecer': if there is a clause it accepts the adverbs "bien" (well) and "mal" (badly), 
; which are likely to occur with a dative clitic (e.g. le parecía mal que yo andara desnuda por la casa).
; It accepts adjectives or NPs with a subject VPinf (e.g. parece mentira/imposible vivir en el centro)

; c)- the verb 'resultar':  if there is a clause it accepts "de + NP"
; It accepts adjectives or NPs with a subject VPinf (e.g. (le) resulta mentira/imposible vivir en el centro)

; d)- the verb 'quedar' e.g. (le) sentó mal ir de viaje

; --- 1.2.9.3. dejar
v_subj_cp_prop_inf_obj_equi_ap_synsem := lex-synsem &
   [ LOCAL [ CAT [ VAL [ SUBJ < [ OPT -,
                                 LOCAL v_local & 
                                       [ CAT.VAL.COMPS < > ] ] > ,
                         COMPS < [ OPT -, 
                                   LOCAL np_acc_local & 
                                         [ CAT.HEAD.KEYS.KEY #ckey & non_modable_rel,
                                           CONT.HOOK.INDEX ref-ind & #ind2 ],
                                   NON-LOCAL.REL 0-dlist & [ LIST < > ] ],
                                 [ OPT -, 
                                   LOCAL local &
                                         [ COORD -,
                                           CAT.HEAD adj & [ KEYS.KEY #ockey ],
                                           CONT.HOOK [ LTOP #larg ] ] ] > ] ],
             CONT [ HOOK.LTOP #harg,
                    RELS <! #keyrel & relation !>,
	            HCONS <! qeq & [ HARG #harg,
                                     LARG #larg ] !> ] ], 
     LKEYS [ KEYREL #keyrel & arg123-ev-relation & 
                    [ ARG2 #ind2,
                      ARG3 #harg ],
            --COMPKEY #ckey,
            --OCOMPKEY #ockey ] ].

v_np-ap_sbj-cp-p-inf_sor_lex := main-verb & basic-three-arg & 
  [ ALTS [ PASS +,
           IMPERS +,
           VCALT - ],
    SYNSEM v_subj_cp_prop_inf_obj_equi_ap_synsem ].

|#

; --- 1.3. Verbs taking nominal subject

nom-subj-synsem := lex-synsem &
  [ LOCAL [ AGR #agr & [ PNG #png ], 
            CAT [ VAL.SUBJ < [ LOCAL np_nom_local & 
                                     [ AGR #agr,
                                       CONT.HOOK.INDEX #xarg ] ] > ],
            CONT.HOOK.XARG #xarg & [ PNG #png ] ] ]
"""
; --- 1.3. Verbs taking nominal subject

; LOCAL.CAT.VAL.SUBJ < [ LOCAL.CAT.HEAD.KEYS.ALTKEY def_or_proper_q_rel / explicit_q_rel 
; but: e.g. vecinos de la zona consultados por este diario aseguraron ayer que ...

""".

arg1_lt := nom-subj-synsem & 
  [ LOCAL.CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX #ind ] >,
    LKEYS.KEYREL arg1-ev-relation & 
                 [ ARG1 #ind ] ]. 

unacc_lt := nom-subj-synsem &
  [ LOCAL.CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX #ind ] >,
    LKEYS.KEYREL arg2-ev-relation & 
                 [ ARG2 #ind ] ].

; --- 1.3.1. Unaccusative verbs

v_unacc_synsem := unacc_lt & 
  [ LOCAL.CONT [ RELS <! relation !>,
                 HCONS <! !> ] ]
"""
; --- 1.3.1. Unaccusative verbs
; Their syntactic subject (their notional object (arg2)) can be a bare NP in postverbal position 
; (e.g. cae agua, entra frío, vienen mujeres, existen problemas). They can form absolute 
; participle clauses, but only for those participles which have a perfective meaning (e.g. florecido el 
; rosal, el jardín parecía más alegre/*ardido el bosque, los animales lo abandonaron). Adjectival 
; participles can act as modifiers of a NP functioning as syntactic subject (e.g. un tesoro recientemente 
; aparecido)
""".

v_unacc:= basic-main-verb & 
  [ ALTS [ RCP -, 
           RFX -,
           VCALT - ] ].

; --- 1.3.1.1. Unaccusative intransitive verbs (verbs of change of state due to internal cause and 

v_unacc_intr_synsem := v_unacc_synsem &
  [ LOCAL.CAT [ HEAD.INV -,
                VAL.COMPS < > ] ]
"""
; --- 1.3.1.1. Unaccusative intransitive verbs (verbs of change of state due to internal cause and 
; movements verbs denoting a non-agenitive way of moving. Many events due to internal cause can be 
; also classified as events of external cause depending on the selected argument: those of internal 
; cause predicate about animate beings or natural phenomena (e.g. el día ha aclarado; Juan/La lavadora 
; ha aclarado el jersey)) 
; canvio INV + a INV -
; !!! pueden llevar un IO (e.g. les nacieron los gemelos)
""".

v_-_psv_lex := v_unacc & main-verb & basic-one-arg & 
  [ ALTS [ PASS +,
           IMPERS + ],
    SYNSEM v_unacc_intr_synsem &
           [ LOCAL.CAT.HEAD.LSYNSEM v_unacc_intr_synsem ] ]
"""
; e.g. florecer (to flower), emerger (to emerge)
""".

v_-_psv-prn_lex := v_unacc & main-vprn-intr & basic-two-arg & 
  [ ALTS.PASS +,
    SYNSEM v_unacc_intr_synsem &
           [ LOCAL.CAT.HEAD.LSYNSEM v_unacc_intr_synsem ] ]
"""; e.g. encogerse (to shrink), enquistarse (to encyst)
""".

; --- 1.3.1.2. Unaccusative verbs taking PP complement

v_unacc_pp_synsem := v_unacc_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL lcomp_local & 
                                      [ CAT.HEAD.KEYS.KEY #ckey,
                                        CONT.HOOK [ LTOP #ltop,
                                                    XARG #index ] ] ] > ],
            CONT.HOOK [ LTOP #ltop,
                        INDEX #index ] ],
    LKEYS.--COMPKEY #ckey & dir_or_state_nontemp_rel ]
"""; --- 1.3.1.2. Unaccusative verbs taking PP complement (verbs of existence and state and 
; verbs of movement and direction)
; canvio INV + a INV -
; !!! They can take an IO (e.g. se nos escaparon los ladrones, nos llegaron los víveres)
""".

v_pp_loc_lex := v_unacc & main-verb & basic-two-arg &
  [ ALTS [ PASS -,
           IMPERS + ],
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT - ] > ],
             LKEYS.--COMPKEY state_loc_rel ] ]
"""; e.g. En la Academia existe un autógrafo de Cervantes.
""".

v_pp*_loc_lex := v_unacc & main-verb & basic-two-arg &
  [ ALTS [ PASS -,
           IMPERS + ],
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT + ] > ],
             LKEYS.--COMPKEY state_loc_rel ] ]
"""; e.g. permanecer (to stay)
""".

v_pp*_loc-psv_lex := v_unacc & main-verb & basic-two-arg &
  [ ALTS [ PASS +,
           IMPERS + ],
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT + ] > ],
             LKEYS.--COMPKEY state_loc_rel ] ]
"""; e.g. aterrizar (to land), emerger (to emerge)
""".

v_pp_loc-prn_lex := v_unacc & main-vprn & basic-three-arg &
  [ ALTS.PASS -,
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT - ] > ],
             LKEYS.--COMPKEY state_loc_rel ] ]
"""; e.g. alojarse (to lodge), enmarcarse (to frame), extenderse (to extend)
""".

v_pp*_loc-prn_lex := v_unacc & main-vprn & basic-three-arg &
  [ ALTS.PASS -,
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT + ] > ],
             LKEYS.--COMPKEY state_loc_rel ] ]
"""; e.g. encontrarse (to meet), manifestarse (to manifest)
""".

v_pp*_loc-psv-prn_lex := v_unacc & main-vprn & basic-three-arg &
  [ ALTS.PASS +,
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT + ] > ],
             LKEYS.--COMPKEY state_loc_rel ] ]
"""; e.g. generarse (to generate), mantenerse (to mantain)
""".

v_pp_dir_lex := v_unacc & main-verb & basic-two-arg &
  [ ALTS [ PASS -,
           IMPERS + ],
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT - ] > ],
             LKEYS.--COMPKEY dir_rel ] ]
"""; e.g. acudir
""".

v_pp*_dir_lex := v_unacc & main-verb & basic-two-arg &
  [ ALTS [ PASS -,
           IMPERS + ],
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT + ] > ],
             LKEYS.--COMPKEY dir_rel ] ]
"""; e.g. volver (to return), migrar (to migrate), subir (to go up), 
""".

v_pp*_dir-prn_lex := v_unacc & main-vprn & basic-three-arg &
  [ ALTS.PASS -,
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT + ] > ],
             LKEYS.--COMPKEY dir_rel ] ]
"""; e.g. presentarse (to present), desprenderse (to come off)
""".

v_pp_dir-prn_lex := v_unacc & main-vprn & basic-three-arg &
  [ ALTS.PASS -,
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT - ] > ],
             LKEYS.--COMPKEY dir_rel ] ]
"""; e.g. dirigirse (to go)
""".

v_pp*_dir-psv_lex := v_unacc & main-verb & basic-two-arg &
  [ ALTS [ PASS +,
           IMPERS + ],
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT + ] > ],
             LKEYS.--COMPKEY dir_rel ] ]
"""; e.g. bajar (to go down), partir (to part)
""".

v_pp*_dir-psv-prn_lex := v_unacc & main-vprn & basic-three-arg &
  [ ALTS.PASS +,
    SYNSEM v_unacc_pp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_unacc_pp_synsem, 
                         VAL.COMPS < [ OPT + ] > ],
             LKEYS.--COMPKEY dir_rel ] ]
"""; e.g. asomarse (to lean out), deslizarse (to slide), escurrirse (to drain)
""".


; --- Locative + subject =>> locative subject + PPen (two lexical entries)
; e.g. aquí abundan los insectos =>> este lugar abunda en insectos
;;; OZ: No entries for the above, I think?

; --- 1.3.2. Intransitive verbs

v_intrans_synsem := arg1_lt & 
  [ LOCAL.CONT.RELS <! relation !> ]
"""
; --- 1.3.2. Intransitive verbs
; - They have typically agenitive subjects. They do not appear in absolute participle clauses. 
""".

v_intrans := basic-main-verb & 
  [ ALTS [ RCP -, 
           RFX - ] ].

; --- 1.3.2.1. Strict intransitive verbs

v_strict_intrans_synsem := v_intrans_synsem & 
  [ LOCAL [ CAT [ HEAD.INV -, 
                  VAL.COMPS < > ],
            CONT.HCONS <! !> ] ]
"""
; --- 1.3.2.1. Strict intransitive verbs
; Subjects must take specifier. Some appear in "locative inversion constructions", but the locative 
; complement must appear in pre-verbal position and the subject in postverbal position and without 
; specifier (e.g. en este parque juegan niños)
""".

;v_strict_intrans_prn_synsem := v_strict_intrans_synsem & 
;  [ LOCAL.CAT.VAL.CLTS < [ LOCAL.CONT.HOOK.INDEX #affix ] >,
;    LKEYS.KEYREL arg1-affx-relation & 
;                 [ AFFIX #affix ] ].

v_strict_intrans_prn_synsem := v_strict_intrans_synsem & 
  [ LOCAL.CAT.VAL.CLTS < [ ] >,
    LKEYS.KEYREL arg1-relation ].

v_strict_intrans := v_intrans & 
  [ ALTS.VCALT - ].

v_-_lex := v_strict_intrans & main-verb & basic-one-arg &
  [ ALTS [ IMPERS +,
           PASS - ],
    SYNSEM v_strict_intrans_synsem & 
           [ LOCAL.CAT.HEAD.LSYNSEM v_strict_intrans_synsem ] ]
"""; e.g. esquiar (to sky)
""".

v_-_prn_lex := v_strict_intrans & main-vprn-intr & basic-two-arg &
  [ ALTS.PASS +,
    SYNSEM v_strict_intrans_prn_synsem & 
           [ LOCAL.CAT.HEAD.LSYNSEM v_strict_intrans_prn_synsem ] ]
"""; e.g. rebotarse (to bounce), suicidarse (to commit suicide)
""".

; --- 1.3.2.2. Intransitive verbs taking marked NP complement 

v_intr_mrkd_np_synsem := v_intrans_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL mrkd_np_local &
                                      [ CAT.HEAD.KEYS.KEY #ckey,
                                        CONT.HOOK.INDEX #ind2 ] ] > ],
            CONT.HCONS <! !> ],
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG2 #ind2 ],
            --COMPKEY #ckey ] ]
"""
; --- 1.3.2.2. Intransitive verbs taking marked NP complement 
; !!! nos animaba a pensar en la muerte y sobre la conveniencia...
""".

v_intr_mrkd_np := v_intrans & 
  [ ALTS.VCALT - ].

v_pp_e_lex := v_intr_mrkd_np & main-verb & basic-two-arg &
  [ ALTS [ IMPERS +,
           PASS - ],
    SYNSEM v_intr_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. sucumbir a, acertaron a/con
""".

v_pp*_e_lex := v_intr_mrkd_np & main-verb & basic-two-arg &
  [ ALTS [ IMPERS +,
           PASS - ],
    SYNSEM v_intr_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
""";e.g. desertar (de), abusar (de)
""".

v_pp_e-prn_lex := v_intr_mrkd_np & main-vprn & basic-three-arg &
  [ ALTS.PASS +,
    SYNSEM v_intr_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. meterse con, encapricharse de/con
""".

v_pp*_e-prn_lex := v_intr_mrkd_np & main-vprn & basic-three-arg &
  [ ALTS.PASS +,
    SYNSEM v_intr_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""; e.g. adaptarse (a), quejarse (de/por)
""".

v_pp_e-idm_lex := v_intr_mrkd_np & main-verb & basic-two-arg &
  [ ALTS.PASS -,
    SYNSEM v_intr_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT -,
                                       NON-LOCAL [ SLASH 0-dlist,
                                                   REL 0-dlist,
                                                   QUE 0-dlist ] ] > ] ] ]
"""; e.g. entrar en vigor
""".

v_pp_e-prn-idm_lex := v_intr_mrkd_np & main-vprn & basic-three-arg &
  [ ALTS.PASS -,
    SYNSEM v_intr_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT -,
                                       NON-LOCAL [ SLASH 0-dlist,
                                                   REL 0-dlist,
                                                   QUE 0-dlist ] ] > ] ] ]
"""; e.g. encogerse de hombros
""".


; --- 1.3.2.3. Intransitive verbs taking marked verbal complement

v_intr_mrkd_cp_prop-or-ques_synsem := v_intrans_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL mrkd_or_unmrkd_cp_prop_or_ques_local &
                                      [ CAT.HEAD.KEYS.KEY #ckey,
                                        CONT.HOOK.LTOP #larg ] ] > ], 
            CONT.HCONS <! qeq & [ HARG #harg,
                                  LARG #larg ] !> ],
    LKEYS [ KEYREL arg12-ev-relation & [ ARG2 #harg ],
            --COMPKEY #ckey ] ]
"""; --- 1.3.2.3. Intransitive verbs taking marked verbal complement
""".

v_intr_mrkd_cp_prop-or-ques_fin_synsem := v_intr_mrkd_cp_prop-or-ques_synsem & 
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX.E.TENSE tense ] > ].

v_intr_mrkd_cp_prop-or-ques_inf_synsem := v_intr_mrkd_cp_prop-or-ques_synsem & 
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL [ CAT.MC -,
                                      CONT.HOOK [ XARG #ctrl,
                                                  INDEX [ SF prop,
                                                          E [ TENSE nontense,
                                                              ASPECT no-aspect ] ] ] ] ] >,
            CONT.HOOK.XARG #ctrl ] ].


v_intr_mrkd_cp_prop-or-ques := v_intrans & 
  [ ALTS.IMPERS - ].


; --- 1.3.2.3.1. Verbs taking marked VPinf (s_ctrl)

v_intr_mrkd_cp_prop_inf_synsem := v_intr_mrkd_cp_prop-or-ques_inf_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD.KEYS.ALT2KEY prop ] > ]
"""; --- 1.3.2.3.1. Verbs taking marked VPinf (s_ctrl)
""".

v_intr_mrkd_cp_prop_inf := v_intr_mrkd_cp_prop-or-ques &
  [ ALTS.VCALT - ].

v_pp_e-vp-sc_lex := v_intr_mrkd_cp_prop_inf & cc-two-arg & 
  [ ALTS.PASS -,
    SYNSEM v_intr_mrkd_cp_prop_inf_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_inf_synsem, 
                         VAL [ SUBJ < #subj >,
                               COMPS < #comps & 
                                       [ OPT -, LOCAL.CAT.VAL.CLTS #clts ] >,
                               CLTS #clts ] ] ],
    ARG-ST < #subj . < #comps . #clts > > ]
"""; e.g. aprender a (to learn to), desistir de
""".

v_pp_e-vp-sc-prn_lex := v_intr_mrkd_cp_prop_inf & basic-three-arg & 
  [ ALTS.PASS +,
    SYNSEM v_intr_mrkd_cp_prop_inf_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_inf_synsem, 
                         VAL [ SUBJ < #subj >,
                               COMPS < #comps & 
                                       [ OPT -, LOCAL.CAT.VAL.CLTS #clts ] >,
                               CLTS < #clt . #clts > ] ] ],
    ARG-ST < #subj . < #comps . < #clt . #clts > > > ]
"""; e.g. dignarse a, abstenerse de 
""".


; --- 1.3.2.3.2. Verbs taking marked finite completive clause 

v_intr_mrkd_cp_prop_fin_synsem := v_intr_mrkd_cp_prop-or-ques_fin_synsem & 
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT.HEAD.KEYS.ALT2KEY prop,
                                    CONT.HOOK.INDEX.SF prop ] ] > ]
"""
; --- 1.3.2.3.2. Verbs taking marked finite completive clause 

; - those movement verbs that take the preposition 'a': perfective or telic mood; the subject must be human, the verb in the subordinate clause must refer to an action and it goes always in the subjunctive mood. It can appear in the infinitive (always ctrl) and does not accept negation or composed form; besides, some admit clitic climbing but others don't. The subordinate clause can alternate with a locative NP.
; - those verbs that take the preposition 'a'but are not movement verbs: the semantic restrictions of the subject depend upon each verb. The clause may appear in indicative or subjunctive mood, but some only accept the subjunctive,
; this can be substituted by a first or second order NP, or by a (control) VPinf.
; - those verbs that take the preposition 'de': some verbs do not take the preposition. Most verbs have an animate subject, but movement verbs have an inanimate one. The clause aternates between the indicative and the subjunctive, except for some which go in subjunctive. Those with an animate subject alternate the clause with a VPinf (ctrl).
; The clause alternates with an eventive NP, though some admit a human NP.
; - those verbs that take the preposition 'en': some verbs do not take the preposition. Most verbs, though not all, have a human subject.The clause can be in indicative or subjunctive and can alternate with a VPinf, if of control (except for apoyarse, centrarse, consistir, estribar, insistir, residir, which do not demand a ctrl VPinf).
; The clause also alternates with a non-human NP, though some accept a human one.
; - those verbs that take the preposition 'por': the clause, always subjunctive and with a human subject, alternates with a control VPinf whose subject is co-referent with that of the main clause and can be animate or inanimate (e.g. las palabras pugnaban por salir de su boca)
""".

v_intr_mrkd_cp_prop_fin := v_intr_mrkd_cp_prop-or-ques & 
  [ ALTS.VCALT + ].

v_pp_e-cp-p_lex := v_intr_mrkd_cp_prop_fin & main-verb & basic-two-arg & 
  [ ALTS.PASS -,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. consistir en (to consist on), contribuir a (to contribute to)
""".

v_pp_e-cp-p-prn_lex := v_intr_mrkd_cp_prop_fin & main-vprn & basic-three-arg & 
  [ ALTS.PASS +,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. asustarse de, benecifiarse de
""".

v_pp*_e-cp-p_lex := v_intr_mrkd_cp_prop_fin & main-verb & basic-two-arg & 
  [ ALTS.PASS -,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT +, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ].

v_pp*_e-cp-p-prn_lex := v_intr_mrkd_cp_prop_fin & main-vprn & basic-three-arg & 
  [ ALTS.PASS +,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT +, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. quejarse de
""".

v_pp_e*-cp-p_lex := v_intr_mrkd_cp_prop_fin & main-verb & basic-two-arg & 
  [ ALTS.PASS -,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. soñar con (sueño (con) que vendrán)
""".

v_pp_e*-cp-p-prn_lex := v_intr_mrkd_cp_prop_fin & main-vprn & basic-three-arg & 
  [ ALTS.PASS +,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. enterarse (de)
""".


v_pp_e-cp-p-ind_lex := v_intr_mrkd_cp_prop_fin & main-verb & basic-two-arg & 
  [ ALTS.PASS -,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT -, 
                                       LOCAL [ CAT.HEAD.KEYS.KEY selected_rel,
                                               CONT.HOOK.INDEX.E.MOOD ind ] ] > ] ] ].

v_pp_e-cp-p-ind-prn_lex := v_intr_mrkd_cp_prop_fin & main-vprn & basic-three-arg & 
  [ ALTS.PASS +,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT -, 
                                       LOCAL [ CAT.HEAD.KEYS.KEY selected_rel,
                                               CONT.HOOK.INDEX.E.MOOD ind ] ] > ] ] ]
"""; e.g. el candidato se conforta con que hizo todo lo posible para obtener el puesto
""".

v_pp_e-cp-p-sub_lex := v_intr_mrkd_cp_prop_fin & main-verb & basic-two-arg & 
  [ ALTS.PASS -,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT -, 
                                       LOCAL [ CAT.HEAD.KEYS.KEY selected_rel,
                                               CONT.HOOK.INDEX.E.MOOD sub ] ] > ] ] ]
"""; e.g. esperar a
""".

v_pp_e-cp-p-sub-prn_lex := v_intr_mrkd_cp_prop_fin & main-vprn & basic-three-arg & 
  [ ALTS.PASS +,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT -, 
                                       LOCAL [ CAT.HEAD.KEYS.KEY selected_rel,
                                               CONT.HOOK.INDEX.E.MOOD sub ] ] > ] ] ]
"""; e.g. esforzarse por
""".

v_pp*_e-cp-p-sub-prn_lex := v_intr_mrkd_cp_prop_fin & main-vprn & basic-three-arg & 
  [ ALTS.PASS +,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT +, 
                                       LOCAL [ CAT.HEAD.KEYS.KEY selected_rel,
                                               CONT.HOOK.INDEX.E.MOOD sub ] ] > ] ] ].

v_pp_e*-cp-p-sub-prn_lex := v_intr_mrkd_cp_prop_fin & main-vprn & basic-three-arg & 
  [ ALTS.PASS +,
    SYNSEM v_intr_mrkd_cp_prop_fin_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT -, 
                                       LOCAL.CONT.HOOK.INDEX.E.MOOD sub ] > ] ] ]
"""; e.g. contentarse con
""".

; --- 1.3.2.3.3. Verbs taking marked (semi) interrogative clause 

v_intr_mrkd_cp_semi_ques_synsem := v_intr_mrkd_cp_prop-or-ques_fin_synsem & 
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL mrkd_cp_semi_ques_local &
                                  [ CAT.HEAD.KEYS.ALT2KEY ques,
                                    CONT.HOOK.INDEX.SF prop ] ] > ]
"""
; --- 1.3.2.3.3. Verbs taking marked (semi) interrogative clause 
; they are interpreted as assertions. Syntactically, they are not introduced by 'que'
""".

v_intr_mrkd_cp_semi_ques := v_intr_mrkd_cp_prop-or-ques & 
  [ ALTS.VCALT + ].

v_pp_e-cp-q_lex := v_intr_mrkd_cp_semi_ques & main-verb & basic-two-arg & 
  [ ALTS.PASS -,
    SYNSEM v_intr_mrkd_cp_semi_ques_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_semi_ques_synsem,
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. depender de
""".

v_pp_e-cp-q-prn_lex := v_intr_mrkd_cp_semi_ques & main-vprn & basic-three-arg & 
  [ ALTS.PASS +,
    SYNSEM v_intr_mrkd_cp_semi_ques_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_mrkd_cp_semi_ques_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. interesarse por

OZ: Not sure if the following comment belongs here or it was a free-standing comment:

; ----- the verb "fijarse en" in imperative eliminates the preposition
; e.g. Fijaos qué cosas dice, Fíjate si será listo que ...
""".



; --- 1.3.2.5. Intransitive verbs taking IO

v_intr_io_synsem := v_intrans_synsem & 
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL dative_local & 
                                      [ CAT.HEAD.KEYS.KEY #ckey ,
                                        CONT.HOOK.INDEX #arg2 ] ] > ],
            CONT.HCONS <! !> ],
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG2 #arg2 ],
            --COMPKEY #ckey ] ]
"""
; --- 1.3.2.5. Intransitive verbs taking IO
; canvio INV + a INV -
; cliticization/clitic doubling obligatory
""". 

v_intrans_io := v_intrans & 
  [ ALTS [ IMPERS -,
           VCALT - ] ].

v_ppa_lex := v_intrans_io & main-verb & basic-two-arg &
  [ ALTS.PASS -,
    SYNSEM v_intr_io_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_io_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. le consume la duda, le pertenece a Juan
""". 

v_ppa*_lex := v_intrans_io & main-verb & basic-two-arg &
  [ ALTS.PASS -,
    SYNSEM v_intr_io_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_io_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""; e.g. gustar (no *(me) gustan (las acelgas))
""". 

v_ppa_prn_lex := v_intrans_io & main-vprn & basic-three-arg &
  [ ALTS.PASS +,
    SYNSEM v_intr_io_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_io_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. se le acercó
""". 

v_ppa*_prn_lex := v_intrans_io & main-vprn & basic-three-arg &
  [ ALTS.PASS +,
    SYNSEM v_intr_io_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_io_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""; e.g. se le declaró, se le indigestó la comida
""". 



; --- 1.3.2.6. Intransitive verbs taking IO and marked NP

v_intr_io_mrkd_np_synsem := v_intrans_synsem & 
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL dative_local & 
                                      [ CAT.HEAD.KEYS.KEY #ockey ,
                                        CONT.HOOK.INDEX #arg3 ] ],
                              [ LOCAL mrkd_np_local & 
                                      [ CAT.HEAD.KEYS [ KEY #ckey,
                                                        ALTKEY non_temp_nonpro_rel ],
                                        CONT.HOOK.INDEX #arg2 & ref-ind ] ] > ],
            CONT.HCONS <! !> ], 
    LKEYS [ KEYREL arg123-ev-relation & 
                   [ ARG2 #arg2,
                     ARG3 #arg3 ],
            --COMPKEY #ckey,
            --OCOMPKEY #ockey ] ]
"""; --- 1.3.2.6. Intransitive verbs taking IO and marked NP
""". 

v_intr_io_mrkd_np := v_intrans & 
  [ ALTS [ IMPERS +,
           VCALT - ] ].

v_ppa-pp*_e_lex := v_intr_io_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS.PASS -,
    SYNSEM v_intr_io_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_io_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
"""; e.g. le sucedió (en el trono)
""". 

v_ppa*-pp_e_lex := v_intr_io_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS.PASS -,
    SYNSEM v_intr_io_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_io_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""; e.g. (le) preguntó por tí
""". 

v_ppa*-pp*_e_lex := v_intr_io_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS.PASS -,
    SYNSEM v_intr_io_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_io_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT + ] > ] ] ]
"""; e.g. (le) hablé (de tí)
""". 

v_ppa-pp_e-idm_lex := v_intr_io_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS.PASS -,
    SYNSEM v_intr_io_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_io_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ], 
                                     [ OPT -,
                                       LOCAL.CONT.RELS <! relation !>,
                                       NON-LOCAL [ SLASH 0-dlist,
                                                   REL 0-dlist,
                                                   QUE 0-dlist ] ] > ] ] ]
"""; e.g. le echaba en falta
""". 



; --- 1.3.2.7. Intransitive verbs taking two marked NPs

v_intr_two_mrkd_np_idm_synsem := v_intrans_synsem & 
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL mrkd_np_local & 
                                      [ CAT.HEAD.KEYS [ KEY #ckey ,
                                                        ALTKEY non_temp_nonpro_rel ],
                                        CONT.HOOK.INDEX #arg2 & ref-ind ],
                                NON-LOCAL [ SLASH 0-dlist,
                                            REL 0-dlist,
                                            QUE 0-dlist ] ],
                              [ LOCAL mrkd_np_local & 
                                      [ CAT.HEAD.KEYS [ KEY #ockey,
                                                        ALTKEY non_temp_nonpro_rel ],
                                        CONT.HOOK.INDEX #arg3 & ref-ind ],
                                NON-LOCAL [ SLASH 0-dlist,
                                            REL 0-dlist,
                                            QUE 0-dlist ] ] > ],
            CONT.HCONS <! !> ], 
    LKEYS [ KEYREL arg123-ev-relation & 
                   [ ARG2 #arg2,
                     ARG3 #arg3 ],
            --COMPKEY #ckey,
            --OCOMPKEY #ockey ] ]
"""; --- 1.3.2.7. Intransitive verbs taking two marked NPs
""". 

v_intr_two_mrkd_np_idm := v_intrans & 
  [ ALTS [ IMPERS -,
           VCALT - ] ].

v_pp-pp_e-e-prn-idm_lex := v_intr_two_mrkd_np_idm & norm-pronominal-verb & 
  [ ALTS.PASS -,
    SYNSEM v_intr_two_mrkd_np_idm_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_two_mrkd_np_idm_synsem, 
                         VAL [ SUBJ < #subj >,
                               COMPS < #comp1 & [ OPT - ] , 
                                       #comp2 & [ OPT - ] >,
                               CLTS < #clt > ] ] ],
    ARG-ST < #subj , #comp1 , #comp2 , #clt > ]
"""; e.g. ponerse en contacto con
""".

; --- 1.3.2.7. intransitive subject to subject raising verbs

v_intr_ssr_synsem := lex-synsem & 
  [ LOCAL [ AGR #ind, 
            CAT [ MC bool,
                  HEAD [ AUX -, INV #inv ],
                  VAL [ SUBJ < [ LOCAL np_nom_local & 
                                       [ CONT.HOOK.INDEX ref-ind & #ind ] ] >,
                        COMPS < [ OPT -,
                                  LOCAL [ CAT [ MC -,
                                                HEAD [ INV #inv, 
                                                       KEYS.KEY #ckey ] ],
                                          CONT.HOOK [ LTOP #larg,
                                                      INDEX.SF prop ] ] ] > ] ],
            CONT [ HOOK [ LTOP #hand,
                          INDEX #index ],
                   RELS <! #keyrel &
                           [ ARG0 #index,
                             LBL #hand ] !>, 
                   HCONS <! qeq & [ HARG #harg,
                                    LARG #larg ] !> ] ],
    LKEYS [ KEYREL #keyrel & arg1-ev-relation &  [ ARG1 #harg ] ,
            --COMPKEY #ckey ] ]
"""
; --- 1.3.2.7. intransitive subject to subject raising verbs
; - clitic climbing only with modal and aspectual auxiliaries (i.e. building infinitival 
; and gerundive periphrasis (e.g. te lo puedo/debo dar))
""".

v_intr_ssr := basic-verb-lex & 
  [ ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS +,
           VCALT - ],
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < #subj >,
                           COMPS < #comps & [ LOCAL.CAT.VAL.CLTS #clts ] >,
                           CLTS #clts ],
    ARG-ST < #subj . < #comps . #clts > > ].

vprn_intr_ssr := norm-pronominal-verb &
  [ ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ],
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < #subj >,
                           COMPS < #comps & [ LOCAL.CAT.VAL.CLTS #clts ] >,
                           CLTS < #clt & clitic-synsem . #clts > ],
    ARG-ST < #subj . < #comps. < #clt. #clts > > > ].

v_vp_inf-ssr_lex := v_intr_ssr & cc-two-arg & 
  [ SYNSEM v_intr_ssr_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_ssr_synsem, 
                         VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX ref-ind & #ind ] >,
                               COMPS < [ LOCAL vp_inf_local & 
                                               [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX #ind ] > ] ] > ] ] ] ]
"""; a)- taking VPinf
; e.g. poder, soler, deber (deberían hacerlo (ellos), puede terminar ardiendo Troya)
""". 

v_pp_e-vp-inf-ssr_lex := v_intr_ssr & cc-two-arg & 
  [ SYNSEM v_intr_ssr_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_ssr_synsem, 
                         VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX ref-ind & #ind ] >,
                               COMPS < [ LOCAL mrkd_cp_prop_inf_local & 
                                               [ CONT.HOOK.XARG #ind ] ] > ] ] ] ]
"""
; b)- taking marked VPinf
; e.g. acostubrar a, deber de, haber de, ir a, ... (he de hacerlo)
; !!! missing: estar a punto de, no tener/haber por qué
""". 

v_pp_e-vp-inf-ssr-prn_lex := vprn_intr_ssr & cc-three-arg & 
  [ SYNSEM v_intr_ssr_synsem & 
           [ LOCAL [ CAT [ HEAD.LSYNSEM v_intr_ssr_synsem, 
                           VAL.COMPS < [ LOCAL mrkd_cp_prop_inf_local & 
                                               [ CONT.HOOK.XARG #ctrl ] ] > ],
                     CONT.HOOK.XARG #ctrl ] ] ]
"""
; e.g. echarse (se echó a llorar)
""". 

v_vp_ger-ssr_lex := v_intr_ssr & cc-two-arg & 
  [ SYNSEM v_intr_ssr_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_ssr_synsem, 
                         VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX ref-ind & #ind ] >,
                               COMPS < [ LOCAL vp_ger_local & 
                                               [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX #ind ] > ] ] > ] ] ] ]
"""
; c)- taking VPger
; e.g. andar (anda cantando)
""". 

v_vp_ger-ssr-prn_lex := vprn_intr_ssr & cc-three-arg & 
  [ SYNSEM v_intr_ssr_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_ssr_synsem, 
                         VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX ref-ind & #ind ] >,
                               COMPS < [ LOCAL vp_ger_local & 
                                               [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX #ind ] > ] ] > ] ] ] ]
"""; e.g. quedarse (se quedó llorando)
""". 


; --- 1.3.2.8. Intransitive verbs taking adverbial phrases

v_intr_advp_synsem := v_intrans_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL [ CAT.HEAD adv & [ KEYS.KEY #ckey ],
                                        CONT.HOOK [ LTOP #ltop,
                                                    INDEX #index ] ] ],... > ],
            CONT.HCONS <! !> ],
    LKEYS [ KEYREL arg1-ev-relation & 
                   [ LBL #ltop,
                     ARG0 #index ],
            --COMPKEY #ckey ] ]
"""
; --- 1.3.2.8. Intransitive verbs taking adverbial phrases
""".

v_intr_advp_io_synsem := v_intr_advp_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ ],
                          [ LOCAL dative_local & 
                                  [ CAT.HEAD.KEYS.KEY #ockey,
                                    CONT.HOOK.INDEX #arg2 ],
                            NON-LOCAL.REL 0-dlist & [ LIST < > ] ] >,
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG2 #arg2 ],
            --OCOMPKEY #ockey ] ].

v_intr_advp_mrkd_np_synsem := v_intr_advp_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ ],
                          [ LOCAL mrkd_np_local & 
                                  [ CAT.HEAD.KEYS.KEY #ockey,
                                    CONT.HOOK.INDEX #arg2 ],
                            NON-LOCAL.REL 0-dlist & [ LIST < > ] ] >,
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG2 #arg2 ],
            --OCOMPKEY #ockey ] ].

v_intr_advp := v_intrans & 
  [ ALTS [ IMPERS -,
           VCALT -,
           PASS - ] ].

v_adv_lex := v_intr_advp & main-verb & basic-two-arg & 
  [ SYNSEM v_intr_advp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_advp_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""
; e.g. hacer bien/mal
""".


v_adv_prn_lex := v_intr_advp & main-vprn & basic-three-arg & 
  [ SYNSEM v_intr_advp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_advp_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""
; e.g. portarse (to behave) (el niño se porta bien)
""".

v_adv*_prn_lex := v_intr_advp & main-vprn & basic-three-arg & 
  [ SYNSEM v_intr_advp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_advp_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""
; e.g. conservarse 
""".


v_adv-pp_e-prn-idm_lex := v_intr_advp & norm-pronominal-verb & 
  [ SYNSEM v_intr_advp_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_advp_mrkd_np_synsem, 
                         VAL [ SUBJ < #subj >,
                               COMPS < #comp1 & [ OPT - ] , 
                                       #comp2 & [ OPT - ] >,
                               CLTS < #clt > ] ] ],
    ARG-ST < #subj , #comp1 , #comp2 , #clt > ]
"""
; e.g. llevarse bien/mal con
""".

;-- 

v_intr_io_advp_synsem := v_intrans_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL dative_local & 
                                      [ CAT.HEAD.KEYS.KEY #ockey,
                                        CONT.HOOK.INDEX #arg2 ],
                                NON-LOCAL.REL 0-dlist & [ LIST < > ] ],... > ],
            CONT.HCONS <! !> ],
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG2 #arg2 ],
            --OCOMPKEY #ockey ] ].

v_intr_io_adv_synsem := v_intr_io_advp_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ ], 
                          [ LOCAL [ CAT.HEAD adv & [ KEYS.KEY #ckey ],
                                    CONT.HOOK [ LTOP #ltop,
                                                INDEX #index ] ] ] >,
    LKEYS [ KEYREL [ LBL #ltop,
                     ARG0 #index ],
            --COMPKEY #ckey ] ].

v_intr_io_modnp_synsem := v_intr_io_advp_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ ], 
                          [ LOCAL [ CAT.HEAD adp & [ KEYS.KEY #ckey, 
                                                     MOD < [ LOCAL.CAT.HEAD verb ] > ],
                                    CONT.HOOK [ LTOP #ltop,
                                                INDEX #index ] ] ] >,
    LKEYS [ KEYREL [ LBL #ltop,
                     ARG0 #index ],
            --COMPKEY #ckey ] ].

v_adv-ppa*_lex := v_intr_advp & main-verb & basic-three-arg & 
  [ SYNSEM v_intr_io_adv_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_io_adv_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""
; e.g. salir, sentar, sonar (le) sentó bien
""".

v_modnp-ppa*_idm_lex := v_intr_advp & main-verb & basic-three-arg & 
  [ SYNSEM v_intr_io_modnp_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_intr_io_modnp_synsem,
                         VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""
; e.g. dar igual
""".


; --- 1.3.3. Transitive verbs

v_trans_synsem := arg1_lt & transitive_verb_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD.KEYS.KEY #ckey ],... >,
    LKEYS [ KEYREL arg12-ev-relation,
            --COMPKEY #ckey ] ]
"""
; --- 1.3.3. Transitive verbs
""".


; --- 1.3.3.1. Transitive verbs taking NP

v_trans_np_synsem := v_trans_synsem & 
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL np_acc_local & 
                                  [ CONT.HOOK.INDEX #ind2 ],
                            NON-LOCAL.REL 0-dlist & [ LIST < > ] ],... >,
    LKEYS.KEYREL.ARG2 #ind2 ]
"""
; --- 1.3.3.1. Transitive verbs taking NP
""".

v_trans_np := basic-main-verb & 
  [ ALTS.VCALT - ].

; --- 1.3.3.1.1. Transitive verbs taking nominal complements that don't passivize 
; (including verbs taking measure NPs)

v_np_ntr_synsem := v_trans_np_synsem & 
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL np_acc_local ] > ],
            CONT [ RELS <! relation !>,
                   HCONS <! !> ] ] ]
"""
; --- 1.3.3.1.1. Transitive verbs taking nominal complements that don't passivize 
; (including verbs taking measure NPs)
""".

v_np_id_synsem := v_np_ntr_synsem.

v_np_ntr-idm_synsem := arg1_lt & transitive_verb_synsem & 
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL n_local &
                                      [ CAT.HEAD [ CASE acc,
                                                   KEYS.KEY #ckey & independent_rel ],
                                        CONT.HOOK.INDEX #ind2 ],
                                NON-LOCAL [ SLASH 0-dlist,
                                            REL 0-dlist,
                                            QUE 0-dlist ] ] > ],
            CONT [ RELS <! relation !>,
                   HCONS <! !> ] ],
    LKEYS [ KEYREL arg12-ev-relation & 
                   [ ARG2 #ind2 ],
            --COMPKEY #ckey ] ].

v_np_ntr := v_trans_np &
  [ ALTS [ RCP -, 
           RFX -,
           PASS - ] ].

v_np_npsv_lex := v_np_ntr & main-verb & basic-two-arg &
  [ ALTS.IMPERS +,
    SYNSEM v_np_ntr_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_np_ntr_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""
; e.g. querer (to want) (¿quieres algo?), durar (to last) (la reunión duró tres horas)
""".

v_np*_npsv_lex := v_np_ntr & main-verb & basic-two-arg &
  [ ALTS.IMPERS +,
    SYNSEM v_np_ntr_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_np_ntr_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""
; e.g. adelgazar (to lose weight)
""".

v_np_npsv-prn_lex := v_np_ntr & main-vprn & basic-three-arg &
  [ SYNSEM v_np_ntr_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_np_ntr_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""
; e.g. jugarse (to bet)
""".

v_np*_npsv-prn_lex := v_np_ntr & main-vprn & basic-three-arg &
  [ SYNSEM v_np_ntr_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_np_ntr_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""
OZ: The below comment is a duplicate for the comment for v_np*_npsv_lex; not sure why.
; e.g. adelgazar (to lose weight)
""".

v_np_npsv-idm_lex := v_np_ntr & main-verb & basic-two-arg &
  [ ALTS.IMPERS -,
    SYNSEM v_np_ntr-idm_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_np_ntr-idm_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; for locuciones verbales, e.g. tener lugar, tirar la toalla
""".

v_np_npsv-id_lex := v_np_ntr & main-verb & basic-two-arg &
  [ ALTS.IMPERS -,
    SYNSEM v_np_id_synsem & 
           [ LOCAL [ AGR.PNG #png,
                     CAT [ HEAD.LSYNSEM v_np_id_synsem, 
                           VAL.COMPS < [ OPT -,
                                         LOCAL.AGR.PNG #png ] > ] ] ] ]
"""; e.g. devenir
""".

v_np_npsv-id-prn_lex := v_np_ntr & main-vprn & basic-three-arg &
  [ ALTS.IMPERS -,
    SYNSEM v_np_id_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_np_id_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. me llamo Montserrat.
""".

v_np_npsv_id_synsem := v_trans_synsem &
  [ LOCAL [ AGR.PNG #png,
            CAT [ HEAD.INV -, 
                  VAL [ SUBJ < [ LOCAL [ AGR.PNG #png,
                                         CONT.HOOK.INDEX.PNG #png ],
                                 NON-LOCAL [ QUE 0-dlist & [ LIST < > ],
                                             REL 0-dlist ] ] >,
                        COMPS < [ OPT -,
                                  LOCAL n_local & 
                                        [ CAT [ HEAD [ CASE acc,
                                                       KEYS.KEY non_modable_rel ], 
                                                VAL [ SUBJ < >,
                                                      COMPS < > ] ],
                                          CONT.HOOK.INDEX #ind2 & [ SORT non-mod ] ],
                                  NON-LOCAL.REL 0-dlist ] > ] ],
            CONT [ RELS <! relation !>,
                   HCONS <! !> ] ],
    LKEYS.KEYREL.ARG2 #ind2 ]
"""; e.g. ser
""".

v_np_npsv-id-ser_lex := v_np_ntr & main-verb & basic-two-arg &
  [ ALTS.IMPERS -,
    SYNSEM v_np_npsv_id_synsem &
           [ LOCAL.CAT.HEAD.LSYNSEM v_np_npsv_id_synsem ] ].


; --- 1.3.3.1.2. Transitive verbs taking NP that can be passivized

v_trans_np_psv_synsem := v_trans_np_synsem & 
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL.CAT.HEAD.KEYS.KEY non_modable_rel ] > ],
            CONT [ RELS <! relation !>,
                   HCONS <! !> ] ] ]
"""; --- 1.3.3.1.2. Transitive verbs taking NP that can be passivized
""".

v_trans_np_psv := v_trans_np &
  [ ALTS [ PASS +,
           IMPERS + ] ].

vprn_trans_np_psv := v_trans_np &
  [ ALTS [ PASS +,
           RCP -, 
           RFX - ] ].

v_np_lex := v_trans_np_psv & main-verb & basic-two-arg &
  [ ALTS [ RCP -, RFX - ],
    SYNSEM v_trans_np_psv_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_psv_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. pintar (Montse pintó la casa)
""". 

v_np*_lex := v_trans_np_psv & main-verb & basic-two-arg & 
  [ ALTS [ RCP -, RFX - ],
    SYNSEM v_trans_np_psv_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_psv_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""; e.g. comer (mañana comeré (paella) en casa de mis padres)
""". 

v_np_rfx_lex := v_trans_np_psv & main-verb & basic-two-arg & 
  [ ALTS [ RCP -, RFX + ],
    SYNSEM v_trans_np_psv_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_psv_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. secar (to dry)
""". 

v_np*_rfx_lex := v_trans_np_psv & main-verb & basic-two-arg & 
  [ ALTS [ RCP -, RFX + ],
    SYNSEM v_trans_np_psv_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_psv_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]. 

v_np_rcp_lex := v_trans_np_psv & main-verb & basic-two-arg & 
  [ ALTS [ RCP +, RFX - ],
    SYNSEM v_trans_np_psv_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_psv_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. abrazar (to hug) (Juan y María se abrazan (Juan and María hug each other))
""". 

v_np*_rcp_lex := v_trans_np_psv & main-verb & basic-two-arg & 
  [ ALTS [ RCP +, RFX - ],
    SYNSEM v_trans_np_psv_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_psv_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""; e.g. desobedecer
""".

v_np_rfx-rcp_lex := v_trans_np_psv & main-verb & basic-two-arg & 
  [ ALTS [ RCP +, RFX + ],
    SYNSEM v_trans_np_psv_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_psv_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]. 

v_np*_rfx-rcp_lex := v_trans_np_psv & main-verb & basic-two-arg & 
  [ ALTS [ RCP +, RFX + ],
    SYNSEM v_trans_np_psv_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_psv_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ].

v_np_prn_lex := vprn_trans_np_psv & main-vprn & basic-three-arg & 
  [ SYNSEM v_trans_np_psv_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_psv_synsem, 
                         VAL.COMPS < [ OPT - ] > ] ] ]
"""; e.g. saltarse (el alumno se saltó la clase)
""". 

v_np*_prn_lex := vprn_trans_np_psv & main-vprn & basic-three-arg & 
  [ SYNSEM v_trans_np_psv_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_psv_synsem, 
                         VAL.COMPS < [ OPT + ] > ] ] ]
"""; e.g. peinarse (María se peina (el pelo))
""". 

; --- transitive verbs that participate in 'causative alternation'
; May take adjunts like "él solo, por sí mismo, por sí solo (by itself,...) (e.g. las puertas se cerraron 
; ellas solas), but can't be modified by agenitive adverbs/complements (*la puerta se abrió 
; intencionadamente/por el portero) nor by final clauses (*la puerta se abrió para airear la habitación))
;
; a)- events of change of state having internal cause (without 'se'). Only a few verbs like "aumentar, 
; cicatrizar, decrementar, engranar, explosionar, hervir, mejorar, ondear" 
; e.g. Seat aumentó las ventas -> las ventas aumentaron
;      Juan ha hervido la leche -> la leche ha hervido
;
; b)- events of change of state (or location) having external cause (with 'se')
; e.g. Juan rompió la mesa (causative) / la mesa se rompió (unaccusative)
; May co-occur in absolute participal clauses, though only those expressing a final state or result (with 
; perfective or resultative value), e.g. rota la mesa. Those derived from adjectives without prefixes 
; don't, so that e.g. secado el río,... is interpreted as passive or transitive active, but not unaccusative
; (e.g. una vez hubiaron secado el río/el río fue secado;*una vez se secó el río). In the other cases, 
; there's an ambiguity between the unaccusative and the participle's passive transitive 

; --- 1.3.3.2. Transitive verbs taking DO and oblique nominal complements

v_trans_np_mrkd_np_synsem := v_trans_np_synsem & 
  [ LOCAL [ CAT [ HEAD.INV -, 
                  VAL.COMPS < [ ], 
                              [ LOCAL mrkd_np_local & 
                                      [ CAT.HEAD.KEYS.KEY #ockey,
                                        CONT.HOOK.INDEX ref-ind & #ind3 ] ] > ],
            CONT [ RELS <! arg123-ev-relation !>,
                   HCONS <! !> ] ], 
    LKEYS [ KEYREL.ARG3 #ind3,
            --OCOMPKEY #ockey ] ]
"""
; --- 1.3.3.2. Transitive verbs taking DO and oblique nominal complements
; --- régimen verbal de preposición fija (verbal government with fixed preposition) 
; (a, de, en, con, por) & variable preposition (a/para, de/con, de/por, en/contra/sobre)
""".

v_trans_np_mrkd_np := v_trans_np. 

vprn_trans_np_mrkd_np := v_trans_np & norm-pronominal-verb &
  [ SYNSEM [ LOCAL.CAT.VAL [ SUBJ < #subj >, 
                             COMPS < #comp1 , #comp2 >,
                             CLTS < #clt > ] ], 
    ARG-ST < #subj , #comp1, #comp2,  #clt > ]. 


v_np-pp*_npsv-e_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +, PASS -, RCP -, RFX - ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
"""; e.g. distar
""". 

v_np-pp_e_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP -, RFX - ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ]
"""; e.g. sé que esto me ha privado de una amplia gama de experiencias
""". 

v_np*-pp_e_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP -, RFX - ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""; e.g. he roto (las relaciones) con mi novio
""". 

v_np-pp*_e_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP -, RFX - ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
"""; e.g. incorporaremos todos los nombres (a la lista)
""". 

v_np*-pp*_e_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP -, RFX - ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT + ] > ] ] ]
"""; e.g. he invertido tres millones (en bolsa)/he invertido (tres millones) en bolsa
""". 

v_np*-pp_e-prn_lex := vprn_trans_np_mrkd_np & basic-four-arg & 
  [ ALTS [ PASS +, RCP -, RFX - ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""; e.g. turnarse ... con ...
""". 

v_np-pp_e-rcp_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP +, RFX - ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ]
"""; e.g. atraer (to attrack)
""".

v_np*-pp_e-rcp_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP +, RFX - ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""; e.g. retar (to challenge)
""". 

v_np-pp*_e-rcp_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP +, RFX - ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
"""; e.g. recubrir
""". 

v_np*-pp*_e-rcp_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP +, RFX - ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT + ] > ] ] ]
"""; e.g. invitar (to invite)
""". 

v_np-pp_e-rfx_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP -, RFX + ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ]
"""; e.g. acostumbrar(se) a
""".

v_np*-pp_e-rfx_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP -, RFX + ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""; e.g. prevenir(se) de
""". 

v_np-pp*_e-rfx_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP -, RFX + ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
"""; e.g. convencer(se) de
""". 

v_np*-pp*_e-rfx_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP -, RFX + ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT + ] > ] ] ]
"""; e.g. comparar(se) a
""". 

v_np-pp_e-rfx-rcp_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP +, RFX + ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ]
"""
; e.g. informar(se) de
""". 

v_np-pp*_e-rfx-rcp_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP +, RFX + ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
"""; e.g. atar(se) a
""". 

v_np*-pp*_e-rfx-rcp_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP +, RFX + ],
    SYNSEM v_trans_np_mrkd_np_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT + ] > ] ] ]. 

v_trans_np_mrkd_np_idm_synsem := v_trans_np_mrkd_np_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ ], 
                          [ NON-LOCAL [ SLASH 0-dlist,
                                        REL 0-dlist,
                                        QUE 0-dlist ] ] > ]
"""; --- locuciones verbales
; e.g. dar a alguien de alta, echar a alguien de menos, tomar nota de algo. 
""". 

v_np-pp_e-idm_lex := v_trans_np_mrkd_np & main-verb & basic-three-arg & 
  [ ALTS [ IMPERS +, PASS +, RCP -, RFX - ],
    SYNSEM v_trans_np_mrkd_np_idm_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_idm_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ]. 

v_np-pp*_e-npsv-prn-idm_lex := vprn_trans_np_mrkd_np & basic-four-arg & 
  [ ALTS [ IMPERS -, PASS -, RCP -, RFX - ],
    SYNSEM v_trans_np_mrkd_np_idm_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_np_idm_synsem, 
                         VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
"""; e.g. darse cuenta de algo
""". 

; --- verbs that participate in 'locative alternation' (llenar (to fill), cargar (to load))
; e.g. cargó el carro de heno -> cargó heno en el carro.
; !!! now 2 entries

; --- 1.3.3.3. transitive verb taking DO and oblique verbal complement 

v_trans_np_mrkd_cp_synsem := v_trans_np_synsem & 
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL.CAT.HEAD.KEYS.KEY non_modable_rel ], 
                              [ LOCAL mrkd_or_unmrkd_cp_prop_or_ques_local &
                                      [ CAT.HEAD.KEYS.KEY #ockey,
                                        CONT.HOOK.LTOP #larg ] ] > ], 
            CONT [ RELS <! arg123-ev-relation !>,
                   HCONS <! qeq & [ HARG #harg,
                                    LARG #larg ] !> ] ],
    LKEYS [ KEYREL.ARG3 #harg,
            --OCOMPKEY #ockey ] ]
"""
; --- 1.3.3.3. transitive verb taking DO and oblique verbal complement 
; !!! repassar
""".

v_trans_np_mrkd_cp := basic-main-verb & 
  [ ALTS.IMPERS + ]. 


; --- 1.3.3.3.1. transitive verbs taking DO and marked finite completive clause

v_trans_np_mrkd_cp_prop_fin_synsem := v_trans_np_mrkd_cp_synsem & 
  [ LOCAL.CAT.VAL.COMPS < synsem,
                          [ LOCAL [ CAT.MC -,
                                    CONT.HOOK.INDEX [ E.TENSE tense,
                                                      SF prop ] ] ] > ]
"""; --- 1.3.3.3.1. transitive verbs taking DO and marked finite completive clause
""".

v_np-pp_e-cp-p_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT - ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; -- a)- taking clauses in indicative/subjunctive
; e.g. reducen el problema a que ...
""".

v_np-pp_e-cp-p-rfx_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX +, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT - ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. habrá que acostumbrar a esos niños a que su padre llegue/llega siempre tarde a casa; 
;      los niños se acostumbraron a que su padre llegara tarde
""".

v_np*-pp_e*-cp-p_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""; e.g. prevenir, advertir
""".

v_np-pp_e*-cp-p-rfx-rcp_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP +, RFX +, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""; e.g. informar 
""".

v_trans_np_mrkd_cp_prop_fin_ind_synsem := v_trans_np_mrkd_cp_prop_fin_synsem & 
  [ LOCAL.CAT.VAL.COMPS < synsem,
                          [ LOCAL.CONT.HOOK.INDEX.E.MOOD ind ] > ]
"""; -- b)- taking clauses in indicative
""".

v_np-pp_e-cp-p-ind-rfx_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -,  RFX +, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_ind_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_ind_synsem, 
                         VAL.COMPS < [ OPT - ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. basó su defensa/se basó en que no tenía testigos
""".

v_np-pp_npsv-e-cp-p-ind_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX -, PASS - ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_ind_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_ind_synsem, 
                         VAL.COMPS < [ OPT - ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. apostó conmigo una cena a que entraba/*entrara en la sala sin invitación.
""".

v_np*-pp_e*-cp-p-ind_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_ind_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_ind_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
"""; e.g. (los) avisó (de) que llegarán mañana
""".


v_trans_np_mrkd_cp_prop_fin_sub_synsem := v_trans_np_mrkd_cp_prop_fin_synsem & 
  [ LOCAL.CAT.VAL.COMPS < synsem,
                          [ LOCAL.CONT.HOOK.INDEX.E.MOOD sub ] > ]
"""; c)- taking clauses in subjunctive
; - they can appear with a VPinf when there is co-reference between the DO and the subject of the clause
""".

v_np-pp_npsv-e-cp-p-sub_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX -, PASS - ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT - ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. las prefiere a que ...
""".

v_np*-pp_npsv-e-cp-p-sub_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX -, PASS - ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT + ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. (las) apremia a que vengan/*vienen/venir
""".

v_np-pp_e-cp-p-sub_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT - ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. la sentenció a que venga/*viene/venir
""".

v_np*-pp_e-cp-p-sub_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT + ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. (los) alentó a que participaran
""".

v_np-pp_e-cp-p-sub-rfx_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -,  RFX +, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT - ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. *(las) encargó de que fueran
""".

v_np*-pp_e-cp-p-sub-rfx_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX +, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT + ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. (los) animó a que participaran
""".

v_np-pp_e-cp-p-sub-rcp_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP +, RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT - ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. retar a
""".

v_np*-pp_e-cp-p-sub-rcp_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP +, RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT + ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. invitar
""".

v_np-pp_e-cp-p-sub-rfx-rcp_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP +, RFX +, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT - ], 
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. responsabilizar
""".

v_np*-pp_e-cp-p-sub-rfx-rcp_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP +, RFX +, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. culpar
""".

v_np*-pp_e*-cp-p-sub_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT + ] > ] ] ]
"""; e.g. persuadir
""".

v_np*-pp_e*-cp-p-sub-rfx_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +, RCP -, RFX +, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_synsem, 
                         VAL.COMPS < [ OPT + ], [ OPT + ] > ] ] ]
"""; e.g. (nos) convenció (de) que vendiesemos la casa
""".

v_trans_np_mrkd_cp_prop_fin_sub_mov_synsem := v_trans_np_mrkd_cp_synsem & 
  [ LOCAL [ CAT.VAL.COMPS < synsem,
                            [ LOCAL [ CAT.MC -,
                                      CONT.HOOK [ LTOP #larg,
                                                  INDEX [ SF prop,
                                                          E [ TENSE tense, MOOD sub ] ] ] ] ] >, 
            CONT.HCONS <! qeq & [ HARG #harg,
                                  LARG #larg ] !> ],
    LKEYS.KEYREL.ARG3 #harg ]
"""; -- verbs of movement may also take VPinf subject control (e.g. la amenazó con ir a la policía) and 
; object control in the sub. clause (e.g. envía las camisas a planchar a madrid, llévala a arreglar)
; these entries are generated by LR
""".

v_np*-pp_e-cp-p-sub-mv_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +,  RCP -, RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_mov_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_mov_synsem, 
                         VAL.COMPS < [ OPT + ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. (la) arrastra a pelear
""".
 
v_np*-pp_e-cp-p-sub-mv-rfx_lex := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS [ VCALT +,  RCP -, RFX +, PASS + ],
    SYNSEM v_trans_np_mrkd_cp_prop_fin_sub_mov_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_cp_prop_fin_sub_mov_synsem, 
                         VAL.COMPS < [ OPT + ],
                                     [ OPT -, LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ] ]
"""; e.g. se/nos encaminó a luchar
""".


; ---- 1.3.3.3.2. transitive verbs taking DO and marked Vinf complement

v_trans_np_mrkd_vp_inf_synsem := v_trans_np_mrkd_cp_synsem & 
  [ LOCAL.CAT.VAL.COMPS < synsem,
                          [ LOCAL mrkd_cp_prop_inf_local &
                                  [ CAT [ MC -,
                                          VAL.CLTS < > ],
                                    CONT.HOOK.INDEX.SF prop ] ] > ]
"""; ---- 1.3.3.3.2. transitive verbs taking DO and marked Vinf complement
""".

v_trans_np_mrkd_vp_inf := v_trans_np_mrkd_cp & main-verb & basic-three-arg & 
  [ ALTS.VCALT - ].

v_trans_np_mrkd_vp_inf_sc_synsem := v_trans_np_mrkd_vp_inf_synsem & 
  [ LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #ctrl ] >,
                    COMPS < synsem,
                            [ LOCAL.CONT.HOOK.XARG #ctrl ] > ] ]
"""; a)- subject control
""".

v_np-pp_e-vp-inf-sc_lex := v_trans_np_mrkd_vp_inf & 
  [ ALTS [ RCP -, RFX -, PASS - ],
    SYNSEM v_trans_np_mrkd_vp_inf_sc_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_vp_inf_sc_synsem,
                         VAL.COMPS < [ OPT - ], synsem > ] ] ]
"""; e.g. preferir
""".

v_np*-pp_e-vp-inf-sc_lex := v_trans_np_mrkd_vp_inf & 
  [ ALTS [ RCP -, RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_vp_inf_sc_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_vp_inf_sc_synsem,
                         VAL.COMPS < [ OPT + ], synsem > ] ] ]
"""; e.g. (la) amenazó con ir a la policía
""".


v_trans_np_mrkd_vp_inf_oc_synsem := v_trans_np_mrkd_vp_inf_synsem & 
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #ctrl ],
                          [ LOCAL.CONT.HOOK.XARG #ctrl ] > ]
"""; b)- object control (with VPtrans whose DO is different from that of the main clause, the agent 
; of the VPinf is co-referent with the object of the main clause)
""".

v_np-pp_e-vp-inf-oc_lex := v_trans_np_mrkd_vp_inf & 
  [ ALTS [ RCP -,  RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_vp_inf_oc_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_vp_inf_oc_synsem,
                         VAL.COMPS < [ OPT - ], synsem > ] ] ]
"""; e.g. la culparon de causar el accidente 
""".

v_np*-pp_e-vp-inf-oc_lex := v_trans_np_mrkd_vp_inf & 
  [ ALTS [ RCP -,  RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_vp_inf_oc_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_vp_inf_oc_synsem,
                         VAL.COMPS < [ OPT + ], synsem > ] ] ]
"""; e.g. nos retaron a jugar un partido
""".

v_np*-pp_e-vp-inf-oc-rfx_lex := v_trans_np_mrkd_vp_inf & 
  [ ALTS [ RCP -,  RFX +, PASS + ],
    SYNSEM v_trans_np_mrkd_vp_inf_oc_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_vp_inf_oc_synsem,
                         VAL.COMPS < [ OPT + ], synsem > ] ] ]
"""; e.g. todos se han comprometido a hacerlo
""".

v_np-pp_e-vp-inf-oc-rcp_lex := v_trans_np_mrkd_vp_inf & 
  [ ALTS [ RCP +,  RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_vp_inf_oc_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_vp_inf_oc_synsem,
                         VAL.COMPS < [ OPT - ], synsem > ] ] ]
"""; e.g. relevar
""".

; e.g. ayudar
v_np*-pp_e-vp-inf-oc-rcp_lex := v_trans_np_mrkd_vp_inf & 
  [ ALTS [ RCP +,  RFX -, PASS + ],
    SYNSEM v_trans_np_mrkd_vp_inf_oc_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_mrkd_vp_inf_oc_synsem,
                         VAL.COMPS < [ OPT + ], synsem > ] ] ].



v_trans_np_lcomp_synsem := v_trans_np_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL [ CAT.HEAD.KEYS.KEY non_modable_rel,
                                        CONT.HOOK.INDEX #arg2 ] ],
                              [ LOCAL lcomp_local & [ CAT.HEAD.KEYS.KEY #ocompkey,
                                                      CONT.HOOK [ LTOP #larg,
                                                                  XARG #arg2 ] ] ] > ],
            CONT [ RELS <! arg123-ev-relation !>,
                   HCONS <! qeq & [ HARG #harg,
                                    LARG #larg ] !> ] ],
    LKEYS [ KEYREL.ARG3 #harg & handle,
            --OCOMPKEY #ocompkey & dir_or_state_nontemp_rel ] ]
  """
  --- 1.3.3.4. Transitive verbs taking DO and LCOMP
  """.


v_trans_np_lcomp_loc_synsem := v_trans_np_lcomp_synsem &
  [ LKEYS.--OCOMPKEY state_loc_rel ]
  """
  
  """.


v_trans_np_lcomp_dir_synsem := v_trans_np_lcomp_synsem &
  [ LKEYS.--OCOMPKEY dir_rel ]
  """
  
  """.


v_trans_np_lcomp := v_trans_np &
  [ ALTS.PASS + ]
  """
  
  """.


vprn_trans_np_lcomp := v_trans_np & norm-pronominal-verb &
  [ ALTS.PASS +,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < #subj >,
                           COMPS < #comp1, #comp2 >,
                           CLTS < #clt > ],
    ARG-ST < #subj,
             #comp1,
             #comp2,
             #clt > ]
  """
  
  """.


v_np-pp_loc_lex := v_trans_np_lcomp & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           RFX -,
           RCP - ],
    SYNSEM v_trans_np_lcomp_loc_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT - ],
                                                                   [ OPT - ] > ] ] ]
  """
  -- a)- verbs of location
  e.g. poner (pon los libros en el cajón/aqui; pon aquí los libros)
  """.


v_np*-pp_loc_lex := v_trans_np_lcomp & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           RFX -,
           RCP - ],
    SYNSEM v_trans_np_lcomp_loc_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT + ],
                                                                   [ OPT - ] > ] ] ]
  """
  e.g. estacionar
  """.



v_np-pp*_loc_lex := v_trans_np_lcomp & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           RFX -,
           RCP - ],
    SYNSEM v_trans_np_lcomp_loc_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT - ],
                                                                   [ OPT + ] > ] ] ]
  """
  e.g. ubicar, colgar, distribuir,...
  """.


v_np-pp*_loc-prn_lex := vprn_trans_np_lcomp & basic-four-arg &
  [ ALTS [ RFX -,
           RCP - ],
    SYNSEM v_trans_np_lcomp_loc_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT - ],
                                                                   [ OPT + ] > ] ] ]
  """
  e.g. dejarse (se la dejó aquí)
  """.


v_np-pp_dir_lex := v_trans_np_lcomp & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           RFX -,
           RCP - ],
    SYNSEM v_trans_np_lcomp_dir_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT - ],
                                                                   [ OPT - ] > ] ] ]
  """
  -- b)- verbs of movement and direction
  e.g.
  """.


v_np*-pp_dir_lex := v_trans_np_lcomp & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           RFX -,
           RCP - ],
    SYNSEM v_trans_np_lcomp_dir_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT + ],
                                                                   [ OPT - ] > ] ] ]
  """
  e.g. apuntar, conducir,...
  """.


v_np-pp*_dir_lex := v_trans_np_lcomp & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           RFX -,
           RCP - ],
    SYNSEM v_trans_np_lcomp_dir_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT - ],
                                                                   [ OPT + ] > ] ] ]
  """
  e.g. deportar, redeireccionar,...
  """.


v_np-pp*_dir-prn_lex := vprn_trans_np_lcomp & basic-four-arg &
  [ ALTS [ RFX -,
           RCP - ],
    SYNSEM v_trans_np_lcomp_dir_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT - ],
                                                                   [ OPT + ] > ] ] ]
  """
  e.g. llevar (se lo llevó al cine)
  """.


v_np-pp*_loc-rfx_lex := v_trans_np_lcomp & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           RFX +,
           RCP - ],
    SYNSEM v_trans_np_lcomp_loc_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT - ],
                                                                   [ OPT + ] > ] ] ]
  """
  e.g. tumbar(se), levantar(se), sentar(se)
       Juan sentó al niño en la trona -> el niño se sentó en la trona
  """.


v_np-pp*_dir-rfx_lex := v_trans_np_lcomp & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           RFX +,
           RCP - ],
    SYNSEM v_trans_np_lcomp_dir_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT - ],
                                                                   [ OPT + ] > ] ] ]
  """
  e.g. alejar(se), alzar(se)
  """.


v_np*-pp*_dir-rcp_lex := v_trans_np_lcomp & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           RFX -,
           RCP + ],
    SYNSEM v_trans_np_lcomp_dir_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT + ],
                                                                   [ OPT + ] > ] ] ]
  """
  e.g. copiar
  """.


v_np-pp*_loc-rfx-rcp_lex := v_trans_np_lcomp & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           RFX +,
           RCP + ],
    SYNSEM v_trans_np_lcomp_loc_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_lcomp_loc_synsem,
                                                       VAL.COMPS < [ OPT - ],
                                                                   [ OPT + ] > ] ] ]
  """
  e.g. buscar(se)
  """.


v_trans_np_np_synsem := v_trans_np_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL.CAT.HEAD [ CASE acc,
                                                 KEYS.KEY non_modable_rel ] ],
                              [ LOCAL np_acc_unmrkd_local & [ CAT.HEAD.KEYS.KEY #ockey,
                                                              CONT.HOOK.INDEX ref-ind & #ind3 ],
                                NON-LOCAL.REL 0-dlist & [ LIST < > ] ], ... > ],
            CONT [ RELS <! arg123-ev-relation !>,
                   HCONS <! !> ] ],
    LKEYS [ KEYREL [ ARG2.SORT #sort,
                     ARG3 #ind3 & [ SORT #sort ] ],
            --OCOMPKEY #ockey ] ]
  """
  --- 1.3.3.5. ditransitive verbs taking DO and NP
  """.


v_trans_np_np := v_trans_np &
  [ ALTS [ IMPERS +,
           PASS + ] ]
  """
  
  """.


v_np-np_id_lex := v_trans_np_np & main-verb & basic-three-arg &
  [ ALTS [ RCP -,
           RFX - ],
    SYNSEM v_trans_np_np_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_np_np_synsem,
                                                VAL.COMPS < [ OPT - ],
                                                            [ OPT - ] > ] ] ]
  """
  e.g. titular (lo tituló...)
  """.


v_ditrans_synsem := v_trans_np_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL np_acc_unmrkd_local & [ CAT.HEAD.KEYS.KEY non_modable_rel ] ],
                              [ LOCAL dative_local & [ CAT.HEAD.KEYS.KEY #ockey,
                                                       CONT.HOOK.INDEX ref-ind & #ind3 ],
                                NON-LOCAL.REL 0-dlist & [ LIST < > ] ], ... > ],
            CONT [ RELS <! arg123-ev-relation !>,
                   HCONS <! !> ] ],
    LKEYS [ KEYREL.ARG3 #ind3,
            --OCOMPKEY #ockey ] ]
  """
  --- 1.3.3.5. ditransitive verbs taking DO and IO
  """.


v_ditrans := v_trans_np
  """
  
  """.


v_np-ppa*_npsv_lex := v_ditrans & main-verb & basic-three-arg &
  [ ALTS [ IMPERS -,
           PASS -,
           RCP -,
           RFX - ],
    SYNSEM v_ditrans_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_synsem,
                                            VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
  """
  e.g. costar ((le) costó  3 pesetas)
  """.


v_np-ppa_lex := v_ditrans & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           PASS +,
           RCP -,
           RFX - ],
    SYNSEM v_ditrans_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_synsem,
                                            VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ]
  """
  e.g. pasar (¿me pasas la sal?)
  """.


v_np-ppa*_lex := v_ditrans & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           PASS +,
           RCP -,
           RFX - ],
    SYNSEM v_ditrans_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_synsem,
                                            VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
  """
  e.g. agradecer ((me) agradeció la propuesta)
  """.


v_np*-ppa_lex := v_ditrans & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           PASS +,
           RCP -,
           RFX - ],
    SYNSEM v_ditrans_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_synsem,
                                            VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ]
  """
  e.g. disparar (le disparó (un tiro))
  """.


v_np*-ppa*_lex := v_ditrans & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           PASS +,
           RCP -,
           RFX - ],
    SYNSEM v_ditrans_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_synsem,
                                            VAL.COMPS < [ OPT + ], [ OPT + ] > ] ] ]
  """
  e.g. robar ((le) robó (el bolso))
  """.


v_np-ppa_rfx_lex := v_ditrans & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           PASS +,
           RCP -,
           RFX + ],
    SYNSEM v_ditrans_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_synsem,
                                            VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ]
  """
  e.g.
  """.


v_np-ppa*_rfx_lex := v_ditrans & main-verb & basic-three-arg &
  [ ALTS [ IMPERS +,
           PASS +,
           RCP -,
           RFX + ],
    SYNSEM v_ditrans_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_synsem,
                                            VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
  """
  e.g. encomendar
  """.


v_np-ppa*_idm_lex := v_ditrans & main-verb & basic-three-arg &
  [ ALTS [ IMPERS -,
           PASS -,
           RCP -,
           RFX - ],
    SYNSEM v_ditrans_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_synsem,
                                            VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
  """
  e.g. hacer falta
  """.


v_trans_cp_prop-or-ques_synsem := v_trans_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL v_local & [ COORD -,
                                                CONT.HOOK.LTOP #larg ] ] >,
            CONT [ RELS <! arg12-ev-relation !>,
                   HCONS <! [ HARG #harg,
                              LARG #larg ] !> ] ],
    LKEYS.KEYREL.ARG2 #harg ]
  """
  --- 1.3.3.6. transitive verbs taking verbal complement
  """.


v_trans_cp_prop-or-ques_fin_synsem := v_trans_cp_prop-or-ques_synsem &
  [ LOCAL.CAT [ HEAD.INV -,
                VAL.COMPS < [ OPT -,
                              LOCAL.CAT.HEAD.VFORM fin ] > ] ]
  """
  
  """.


v_trans_cp_prop-or-ques_inf_synsem := v_trans_cp_prop-or-ques_synsem &
  [ LOCAL.CAT [ HEAD.INV -,
                VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX ref-ind & #ind ] >,
                      COMPS < [ OPT -,
                                LOCAL [ CAT [ HEAD.VFORM inf,
                                              VAL [ SUBJ < [ NON-LOCAL [ SLASH 0-dlist,
                                                                         REL 0-dlist,
                                                                         QUE 0-dlist ] ] >,
                                                    COMPS < > ] ],
                                        CONT.HOOK.XARG #ind ] ] > ] ] ]
  """
  
  """.


v_trans_cp_prop-or-ques := basic-main-verb &
  [ ALTS [ RCP -,
           RFX -,
           PASS - ] ]
  """
  
  """.


v_prd_cp_prop_inf_synsem := v_trans_cp_prop-or-ques_synsem &
  [ LOCAL [ AGR #agr,
            CAT [ HEAD.INV -,
                  VAL [ SUBJ < [ OPT - ] >,
                        COMPS < [ LOCAL vp_inf_local & [ CAT [ HEAD.VFORM inf,
                                                               VAL [ SUBJ < [ NON-LOCAL [ SLASH 0-dlist,
                                                                                          REL 0-dlist,
                                                                                          QUE 0-dlist ] ] >,
                                                                     COMPS < >,
                                                                     CLTS #clts ] ] ] ] >,
                        CLTS #clts ] ],
            CONT.HOOK.XARG #agr ] ]
  """
  --- 1.3.3.6.1. predicative verbs taking Vfin/Vinf complement (no control)
  e.g. ser (El error fue haberlo comprado en rebajas.)
  """.


v_prd_cp_prop_fin_synsem := v_trans_cp_prop-or-ques_synsem &
  [ LOCAL.CAT [ HEAD.INV -,
                VAL.COMPS < [ LOCAL s_or_cp_fin_local & [ CAT.HEAD.VFORM fin ] ] > ] ]
  """
  
  """.


v_prd_cp_prop := v_trans_cp_prop-or-ques &
  [ ALTS [ VCALT -,
           IMPERS - ],
    SYNSEM v_trans_cp_prop-or-ques_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_prop-or-ques_synsem,
                                                          VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX ref-ind ] >,
                                                                COMPS < [ OPT -,
                                                                          LOCAL [ CAT [ MC -,
                                                                                        HEAD.KEYS.ALT2KEY prop ],
                                                                                  CONT.HOOK.INDEX.SF prop ] ] > ] ] ] ]
  """
  
  """.


v_vp_inf-ser_lex := v_prd_cp_prop & cc-two-arg &
  [ SYNSEM v_prd_cp_prop_inf_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_prd_cp_prop_inf_synsem,
                                                    VAL [ SUBJ < #subj >,
                                                          COMPS < #comps >,
                                                          CLTS #clts ] ] ],
    ARG-ST < #subj, #comps . < #comps . #clts > > ]
  """
  
  """.


v_cp_p-ser_lex := v_prd_cp_prop & basic-two-arg &
  [ SYNSEM v_prd_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_prd_cp_prop_fin_synsem,
                                                    VAL [ SUBJ < #subj >,
                                                          COMPS #comps ] ] ],
    ARG-ST < #subj . #comps > ]
  """
  
  """.


v_trans_cp_prop_inf_synsem := v_trans_cp_prop-or-ques_synsem &
  [ LOCAL.CAT [ HEAD.INV #inv,
                VAL.COMPS < [ LOCAL vp_inf_local & [ CAT [ MC -,
                                                           HEAD [ INV #inv,
                                                                  KEYS.ALT2KEY prop ] ],
                                                     CONT.HOOK.INDEX.SF prop ] ] > ] ]
  """
  --- 1.3.3.6.1. transitive verbs taking Vinf complement (only) - subject control verbs
  """.


v_trans_cp_prop_inf := v_trans_cp_prop-or-ques &
  [ ALTS [ VCALT -,
           IMPERS - ] ]
  """
  
  """.


v_vp_inf-sc_lex := v_trans_cp_prop_inf & cc-two-arg &
  [ SYNSEM v_trans_cp_prop_inf_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_prop_inf_synsem,
                                                      VAL [ SUBJ < #subj >,
                                                            COMPS < #comps & [ OPT -,
                                                                               LOCAL.CAT.VAL.CLTS #clts ] >,
                                                            CLTS #clts ] ] ],
    ARG-ST < #subj, #comps . < #comps . #clts > > ]
  """
  e.g. intentar (¿has intentado hacerlo (tú)?)
  """.


v_vp_inf-oc-prn_lex := v_trans_cp_prop_inf & main-vprn & cc-two-arg &
  [ SYNSEM v_trans_cp_prop_inf_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_prop_inf_synsem,
                                                      VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #ind2 ] >,
                                                            COMPS < [ OPT -,
                                                                      LOCAL.CONT.RELS.LIST < [ ARG2 #ind2 ], ... > ] > ] ] ] ]
  """
  e.g. se dejó querer
  """.


v_trans_cp_prop_fin_synsem := v_trans_cp_prop-or-ques_fin_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                            LOCAL [ CAT [ MC -,
                                          HEAD.KEYS.ALT2KEY prop ],
                                    CONT.HOOK.INDEX.SF prop ] ] > ]
  """
  --- 1.3.3.6.2. transitive verbs taking finite completive clauses
  """.


v_trans_cp_prop_fin := v_trans_cp_prop-or-ques &
  [ ALTS.VCALT + ]
  """
  
  """.


v_cp_p_lex := v_trans_cp_prop_fin & main-verb & basic-two-arg &
  [ SYNSEM v_trans_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_prop_fin_synsem,
                                                      VAL.COMPS < [ LOCAL s_or_cp_fin_local ] > ] ] ]
  """
  e.g. no entiende que la quiero/quisiera
  """.


v_cp_p-ind_lex := v_trans_cp_prop_fin & main-verb & basic-two-arg &
  [ SYNSEM v_trans_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_prop_fin_synsem,
                                                      VAL.COMPS < [ LOCAL s_or_cp_fin_local & [ CAT.HEAD.TAM.MOOD ind ] ] > ] ] ]
  """
  e.g. ¿Crees que aceptará/*aceptara?
  """.


v_cp_p-ind-prn_lex := v_trans_cp_prop_fin & main-vprn & basic-three-arg &
  [ SYNSEM v_trans_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_prop_fin_synsem,
                                                      VAL.COMPS < [ LOCAL s_or_cp_fin_local & [ CAT.HEAD.TAM.MOOD ind ] ] > ] ] ]
  """
  e.g. se figura que vendrá/*venga
  """.


v_cp_p-sub_lex := v_trans_cp_prop_fin & main-verb & basic-two-arg &
  [ SYNSEM v_trans_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_prop_fin_synsem,
                                                      VAL.COMPS < [ LOCAL s_or_cp_fin_local & [ CAT.HEAD.TAM.MOOD sub ] ] > ] ] ]
  """
  e.g. dudo que venga/*viene
  """.


v_cp_p-sub-optcm_lex := v_trans_cp_prop_fin & main-verb & basic-two-arg &
  [ SYNSEM v_trans_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_prop_fin_synsem,
                                                      VAL.COMPS < [ LOCAL s_or_cp_fin_local & [ CAT.HEAD.TAM.MOOD sub ] ] > ] ] ]
  """
  -- con algunos verbos de temor, voluntar y deseo
  e.g. sentir (siento (que) no hayáis recibido el paquete)
  """.


v_trans_cp_ques_fin_synsem := v_trans_cp_prop-or-ques_fin_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                            LOCAL s_or_cp_fin_local & [ CAT.HEAD [ TAM.MOOD ind,
                                                                   KEYS.ALT2KEY ques ] ] ] > ]
  """
  -- with the verb "ver" it can be introduced by the conjunctive adverb "como",
  e.g. vas a ver como no le gusta
  --- 1.3.3.6.3. verbs taking interrogative clauses
  - The usual thing is that they appear in indicative, but they can appear in subjunctive in dubitative
  clauses of courtesy use.
  """.


v_trans_cp_ques := v_trans_cp_prop-or-ques &
  [ ALTS [ VCALT +,
           IMPERS - ] ]
  """
  
  """.


v_cp_q-optcm_lex := v_trans_cp_ques & main-verb & basic-two-arg &
  [ SYNSEM v_trans_cp_ques_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_ques_fin_synsem,
                                                      VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX.SF ques ] > ] ] ]
  """
  -- (PIVs). they are always interpreted as questions. Syntactically, they are introduced by 'que';
  they may co-ocur with verbs taking direct question (e.g. pregunto/dijo: ¿quién irá?/que quién irá);
  may co-ocur with appositive disjunctions, but not with appositive coordination (e.g. preguntó/dijo
  que quién, Juan o Pedro, iría; *preguntó/dijo que quién, Juan y Pedro, iría)
  a)- 'Que' is optional; for 'inquirir' (and 'preguntar(se)' (below)).
  e.g. La maestra inquirió (que) por qué había estado ausente tantos días.
  """.


v_cp_q-optcm-prn_lex := v_trans_cp_ques & main-vprn & basic-three-arg &
  [ SYNSEM v_trans_cp_ques_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_ques_fin_synsem,
                                                      VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX.SF ques ] > ] ] ]
  """
  e.g. se preguntó (que) dónde había ido.
  """.


v_cp_q-cm_lex := v_trans_cp_ques & main-verb & basic-two-arg &
  [ SYNSEM v_trans_cp_ques_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_ques_fin_synsem,
                                                      VAL.COMPS < [ LOCAL [ CAT.HEAD comp & [ KEYS.ALTKEY prop ],
                                                                            CONT.HOOK.INDEX.SF ques ] ] > ] ] ]
  """
  b)- 'que' is obligatory
  e.g. gritó que dónde habíamos puesto el dinero
  """.


v_cp_q_lex := v_trans_cp_ques & main-verb & basic-two-arg &
  [ SYNSEM v_trans_cp_ques_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_trans_cp_ques_fin_synsem,
                                                      VAL.COMPS < [ LOCAL [ CAT.HEAD.KEYS.ALTKEY ques,
                                                                            CONT.HOOK.INDEX.SF ques ] ] > ] ] ]
  """
  -- (PIIs). they are interpreted as assertions. Syntactically, they are not introduced by 'que';
  they may be coordinated with completive clauses (e.g. Sabe que le envió un paquete y cuándo se
  lo envió);  may co-occur with appositive coordination, but not with appositive disjunction
  (e.g. sabe quién, Juan y Pedro, iría; *sabe quién, Juan o Pedro, iría)
  e.g. dijo *que quién ganaría.
  """.


v_ditrans_cp_prop-or-ques_synsem := arg1_lt &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL dative_local & [ CAT.HEAD.KEYS.KEY #ckey,
                                                       CONT.HOOK.INDEX #ind3 ],
                                NON-LOCAL.REL 0-dlist & [ LIST < > ] ],
                              [ LOCAL v_local & [ CAT.HEAD.KEYS.KEY #ockey,
                                                  CONT.HOOK.LTOP #larg ] ] > ],
            CONT [ RELS <! arg123-ev-relation !>,
                   HCONS <! qeq & [ HARG #harg,
                                    LARG #larg ] !> ] ],
    LKEYS [ KEYREL arg123-ev-relation & [ ARG2 #harg,
                                          ARG3 #ind3 ],
            --COMPKEY #ckey,
            --OCOMPKEY #ockey ] ]
  """
                                                CONT.HOOK.INDEX.SF prop-or-ques ] ] > ] ] ].
  --- 1.3.3.7. Ditransitive verbs taking completive clause and IO
  With some verbs the subject can acquire sentential format
  (cf. v_subj_cp_prop_ditrans_cp_prop_le; e.g. oír música no (te) impide trabajar/que trabajes)
  """.


v_ditrans_cp_prop-or-ques_fin_synsem := v_ditrans_cp_prop-or-ques_synsem &
  [ LOCAL.CAT.VAL.COMPS < synsem,
                          [ OPT -,
                            LOCAL.CAT.HEAD.VFORM fin ] > ]
  """
  !!!!
  """.


v_ditrans_cp_prop-or-ques_inf_synsem := v_ditrans_cp_prop-or-ques_synsem &
  [ LOCAL.CAT.VAL [ COMPS < [ OPT + ],
                            [ OPT -,
                              LOCAL.CAT [ HEAD.VFORM inf,
                                          VAL [ SUBJ < [ NON-LOCAL [ SLASH 0-dlist,
                                                                     REL 0-dlist,
                                                                     QUE 0-dlist ] ] >,
                                                COMPS < >,
                                                CLTS #clts ] ] ] >,
                    CLTS #clts ] ]
  """
  
  """.


v_ditrans_cp_prop-or-ques_fin := basic-main-verb &
  [ ALTS [ RCP -,
           RFX -,
           PASS -,
           IMPERS - ] ]
  """
  
  """.


v_ditrans_cp_prop_fin_synsem := v_ditrans_cp_prop-or-ques_fin_synsem &
  [ LOCAL.CAT.VAL.COMPS < synsem,
                          [ LOCAL [ CAT [ MC -,
                                          HEAD.KEYS.ALT2KEY prop ],
                                    CONT.HOOK.INDEX.SF prop ] ] > ]
  """
  --- 1.3.3.7.1. ditransitive verbs taking VPfin complement and IO
  """.


v_ditrans_cp_prop_fin := v_ditrans_cp_prop-or-ques_fin &
  [ ALTS.VCALT + ]
  """
  
  """.


v_ppa*-cp_p_lex := v_ditrans_cp_prop_fin & main-verb & basic-three-arg &
  [ SYNSEM v_ditrans_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_cp_prop_fin_synsem,
                                                        VAL.COMPS < [ OPT + ],
                                                                    [ LOCAL s_or_cp_fin_local ] > ] ] ]
  """
  a)- the subordinate clause appears in indicative/subjuntive
  e.g. puntualizar
  """.


v_ppa*-cp_p-ind_lex := v_ditrans_cp_prop_fin & main-verb & basic-three-arg &
  [ SYNSEM v_ditrans_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_cp_prop_fin_synsem,
                                                        VAL.COMPS < [ OPT + ],
                                                                    [ LOCAL s_or_cp_fin_local & [ CAT.HEAD.TAM.MOOD ind ] ] > ] ] ]
  """
  b)- the subordinate clause appears in indicative and may alternate with a VPinf if there is
  subject control (e.g. Juan aseguró no saber nada). Verbs like 'advertir' (to warn) or 'avisar'
  (to inform) do not admit VPinf
  e.g. prometer (to promise) ((le) prometí que lo harían (ellos))
  """.


v_ppa*-cp_p-ind-optcm_lex := v_ditrans_cp_prop_fin & main-verb & basic-three-arg &
  [ SYNSEM v_ditrans_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_cp_prop_fin_synsem,
                                                        VAL.COMPS < [ OPT + ],
                                                                    [ LOCAL s_or_cp_fin_local & [ CAT.HEAD.TAM.MOOD ind ] ] > ] ] ]
  """
  e.g. advertir
  """.


v_ppa*-cp_p-sub_lex := v_ditrans_cp_prop_fin & main-verb & basic-three-arg &
  [ SYNSEM v_ditrans_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_cp_prop_fin_synsem,
                                                        VAL.COMPS < [ OPT + ],
                                                                    [ LOCAL s_or_cp_fin_local & [ CAT.HEAD.TAM.MOOD sub ] ] > ] ] ]
  """
  c)- the nominal subordinate clause appears in subjunctive and can alternate with a VPinf (object control)
  (e.g. me aconsejó ir a ver esta película)). Verbs like 'implorar, 'pedir', 'rogar' or 'suplicar'
  admit two paradigms: object control (e.g. les rogaron guardar un minuto de silencio) and subject control
  (e.g. pidió atender a los enfermos).
  e.g. ordenar (to order) (le ordené que volviese temprano)
  """.


v_ppa*-cp_p-sub-optcm_lex := v_ditrans_cp_prop_fin & main-verb & basic-three-arg &
  [ SYNSEM v_ditrans_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_cp_prop_fin_synsem,
                                                        VAL.COMPS < [ OPT + ],
                                                                    [ LOCAL s_or_cp_fin_local & [ CAT.HEAD.TAM.MOOD sub ] ] > ] ] ]
  """
  e.g. te ruego (que) me envíes/*envías más papel
  """.



; --- 1.3.3.7.2. ditransitive verbs taking VPinf complement and IO
; !!! si el verbo principal lleva un clítico: si el acusativo incrustado es personal, este no puede 
; elevarse (*me la permitieron educar), si se trata de no animados, puede elevarse 
; (me lo permitieron corregir)
#|
not used!!!! 
v_ditrans_cp_prop_inf_synsem := v_ditrans_cp_prop-or-ques_inf_synsem & 
  [ LOCAL.CAT.VAL.COMPS < [ OPT + ],  
                          [ LOCAL vp_inf_local &
                                  [ CAT [ MC -,
                                          HEAD.KEYS.ALT2KEY prop ], 
                                    CONT.HOOK.INDEX.SF prop ] ] > ].

v_ditrans_cp_prop_inf := v_ditrans_cp_prop-or-ques_fin &
  [ ALTS.VCALT - ].

; a)- subject control
; e.g. prometer ((le) prometí hacerlo (yo))
v_ppa-vp_inf-sc_lex := v_ditrans_cp_prop_inf & main-verb & basic-three-arg & 
  [ SYNSEM v_ditrans_cp_prop_inf_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_cp_prop_inf_synsem, 
                         VAL [ SUBJ  < [ LOCAL.CONT.HOOK.INDEX ref-ind & #ind1 ] >,
                               COMPS < synsem,
                                       [ LOCAL.CONT.HOOK.XARG #ind1 ] > ] ] ] ].

; a)- object control
; e.g. ordenar (to order) (le ordené volver temprano)
v_ppa-vp_inf-oc_lex := v_ditrans_cp_prop_inf & main-verb & basic-three-arg & 
  [ SYNSEM v_ditrans_cp_prop_inf_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_cp_prop_inf_synsem, 
                         VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX ref-ind & #ind1 ], 
                                     [ LOCAL.CONT.HOOK.XARG #ind1 ] > ] ] ].
|#


v_ditrans_cp_ques_synsem := v_ditrans_cp_prop-or-ques_fin_synsem &
  [ LOCAL.CAT.VAL.COMPS < synsem,
                          [ LOCAL s_or_cp_fin_local & [ CAT.HEAD [ TAM.MOOD ind,
                                                                   KEYS.ALT2KEY ques ] ] ] > ]
  """
  --- 1.3.3.7.3. ditransitive verbs taking interrogative clauses and IO
  (see transitive verbs taking interrogative clauses)
  """.


v_ditrans_ques := v_ditrans_cp_prop-or-ques_fin &
  [ ALTS.VCALT + ]
  """
  
  """.


v_ppa*-cp_q-optcm_lex := v_ditrans_ques & main-verb & basic-three-arg &
  [ SYNSEM v_ditrans_cp_ques_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_cp_ques_synsem,
                                                    VAL.COMPS < [ OPT + ],
                                                                synsem > ] ] ]
  """
  e.g. (me) preguntó (que) cómo lo habían hecho
  """.


v_ppa*-cp_q-cm_lex := v_ditrans_ques & main-verb & basic-three-arg &
  [ SYNSEM v_ditrans_cp_ques_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_cp_ques_synsem,
                                                    VAL.COMPS < [ OPT + ],
                                                                [ LOCAL.CAT.HEAD comp & [ KEYS.ALTKEY prop ] ] > ] ] ]
  """
  v_ppa*-cp_q-optcm_lex := v_ditrans_ques & main-verb & basic-three-arg &
    [ SYNSEM v_ditrans_cp_ques_synsem &
             [ LOCAL.CAT.VAL.COMPS < [ OPT + ],
                                     [ LOCAL.CONT.HOOK.INDEX.SF ques ] > ] ].
   e.g. (me) chillar que dónde lo podía
  """.


v_ppa*-cp_q_lex := v_ditrans_ques & main-verb & basic-three-arg &
  [ SYNSEM v_ditrans_cp_ques_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ditrans_cp_ques_synsem,
                                                    VAL.COMPS < [ OPT + ],
                                                                [ LOCAL.CAT.HEAD.KEYS.ALTKEY ques ] > ] ] ]
  """
  e.g. (me) declaró *que cómo lo había hecho
  """.


v_perception_synsem := v_trans_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ OPT -,
                                LOCAL np_acc_local & [ CAT.HEAD.KEYS.KEY non_modable_rel,
                                                       CONT.HOOK.INDEX #ind2 ],
                                NON-LOCAL.REL 0-dlist & [ LIST < > ] ],
                              [ OPT -,
                                LOCAL vp_local & [ CAT [ MC -,
                                                         HEAD.KEYS.KEY #ockey ],
                                                   CONT.HOOK [ XARG #ind2,
                                                               LTOP #larg,
                                                               INDEX.SF prop ] ] ] > ],
            CONT [ RELS <! arg12-ev-relation !>,
                   HCONS <! qeq & [ HARG #harg,
                                    LARG #larg ] !> ] ],
    LKEYS [ KEYREL.ARG2 #harg,
            --OCOMPKEY #ockey ] ]
  """
  --- 1.3.3.8. Transitive verb object to subject raising verbs (verbos de percepción)
  """.


v_perception := basic-main-verb &
  [ ALTS [ RCP -,
           RFX -,
           PASS +,
           IMPERS + ] ]
  """
  
  """.


v_np-vp_inf-osr_lex := v_perception & basic-four-arg & 
  [ SYNSEM v_perception_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_perception_synsem, 
                         VAL [ SUBJ < #subj >, 
                               COMPS < #comp1 & [ OPT - ]
                                       . < #comp2 & [ OPT -, 
                                                      LOCAL vp_inf_local & 
                                                            [ CAT.VAL.CLTS #clts ] ] > >,
                               CLTS < #clt . #clts > ] ] ],
    ARG-ST < #subj . < #comp1. < #comp2 . < #clt . #clts > > > > ]
"""; e.g. ver (to see), oir (to hear) (e.g. casi te oí decir)
""".


v_np-vp_ger-osr_lex := v_perception & basic-three-arg &
  [ SYNSEM v_perception_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_perception_synsem,
                                               VAL.COMPS < [ OPT - ],
                                                           [ OPT -,
                                                             LOCAL vp_ger_local ] > ] ] ]
  """
  e.g. sorprender  (to take by surprise) (e.g. la sorprendí robando)
  """.


v_sym_synsem := arg1_lt &
  [ LOCAL.CAT [ HEAD.INV -,
                VAL.COMPS < [ LOCAL mrkd_np_local & [ CAT.HEAD.KEYS [ KEY #ckey,
                                                                      ALTKEY non_modable_rel ] ] ], ... > ],
    LKEYS.--COMPKEY #ckey ]
  """
  --- 1.3.3.4. Symmetric verbs
  """.


v_sym := basic-main-verb &
  [ ALTS [ RCP -,
           RFX - ] ]
  """
  
  """.


v_sym_intr_mrkd_np_synsem := v_sym_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #ind2 & ref-ind ] >,
            CONT [ RELS <! arg12-ev-relation !>,
                   HCONS <! !> ] ],
    LKEYS.KEYREL.ARG2 #ind2 ]
  """
  --- 1.3.3.4.1. Intransitive symmetric verbs taking marked NP / plural (or coord.) subject
  """.


v_sym_intr_mrkd_np := v_sym &
  [ ALTS [ PASS -,
           VCALT - ] ]
  """
  
  """.


v_pp_e-sym_lex := v_sym_intr_mrkd_np & main-verb & basic-two-arg &
  [ ALTS.IMPERS +,
    SYNSEM v_sym_intr_mrkd_np_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_sym_intr_mrkd_np_synsem,
                                                     VAL.COMPS < [ OPT - ] > ] ] ]
  """
  e.g. conversar (to chat) (A conversa con B/A y B conversan); luchar (to fight) (A luchó con/contra B)
  """.


v_pp*_e-sym_lex := v_sym_intr_mrkd_np & main-verb & basic-two-arg &
  [ ALTS.IMPERS +,
    SYNSEM v_sym_intr_mrkd_np_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_sym_intr_mrkd_np_synsem,
                                                     VAL.COMPS < [ OPT + ] > ] ] ]
  """
  e.g. colaborar (to collaborate)
  """.


v_pp_e-sym-prn_lex := v_sym_intr_mrkd_np & main-vprn & basic-three-arg &
  [ ALTS.IMPERS -,
    SYNSEM v_sym_intr_mrkd_np_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_sym_intr_mrkd_np_synsem,
                                                     VAL.COMPS < [ OPT - ] > ] ] ]
  """
  e.g. A se pelea con B -> A y B se pelean; tu propuesta se adapta muy bien a la mía,
  """.


v_sym_intr_mrkd_np_mrkd_cp_prop_synsem := v_sym_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #ind3 & ref-ind ],
                            [ LOCAL mrkd_or_unmrkd_cp_prop_or_ques_local & [ CAT.HEAD.KEYS.KEY #ockey,
                                                                             CONT.HOOK [ INDEX.SF prop,
                                                                                         LTOP #larg ] ] ] >,
            CONT [ HCONS <! qeq & [ HARG #harg,
                                    LARG #larg ] !>,
                   RELS <! arg123-ev-relation !> ] ],
    LKEYS [ KEYREL [ ARG2 #harg,
                     ARG3 #ind3 ],
            --OCOMPKEY #ockey ] ]
  """
  --- 1.3.3.4.2. Intransitive symmetric verbs taking marked NP and marked completive clause (inf/fin)
  (s_ctrl) / pl. subject and marked completive clause
  """.


v_sym_intr_mrkd_np_mrkd_cp_prop_inf_synsem := v_sym_intr_mrkd_np_mrkd_cp_prop_synsem &
  [ LOCAL.CAT.VAL.COMPS < synsem, [ LOCAL mrkd_cp_prop_inf_local ] > ]
  """
  
  """.


v_sym_intr_mrkd_np_mrkd_cp_prop_fin_synsem := v_sym_intr_mrkd_np_mrkd_cp_prop_synsem &
  [ LOCAL.CAT.VAL.COMPS < synsem, [ LOCAL mrkd_cp_prop_fin_local ] > ]
  """
  
  """.


v_sym_intr_mrkd_np_mrkd_cp_prop_fin := basic-main-verb &
  [ ALTS [ PASS -,
           IMPERS -,
           VCALT + ] ]
  """
  
  """.


v_pp-pp_e-e-cp-p-sym_lex := v_sym_intr_mrkd_np_mrkd_cp_prop_fin & main-verb & basic-three-arg &
  [ SYNSEM v_sym_intr_mrkd_np_mrkd_cp_prop_fin_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_sym_intr_mrkd_np_mrkd_cp_prop_fin_synsem,
                                                                      VAL.COMPS < [ OPT - ],
                                                                                  [ OPT - ] > ] ] ]
  """
  e.g. quedé con ella en ir al cine / quedamos en ir al cine
  """.


v_sym_trans_cp_prop_mrkd_np_synsem := v_sym_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #ind3 & ref-ind ],
                            [ LOCAL v_local & [ CAT.MC -,
                                                CONT.HOOK [ INDEX.SF prop,
                                                            LTOP #larg ] ] ] >,
            CONT [ RELS <! arg123-ev-relation !>,
                   HCONS <! [ HARG #harg,
                              LARG #larg ] !> ] ],
    LKEYS.KEYREL [ ARG2 #harg,
                   ARG3 #ind3 ] ]
  """
  --- 1.3.3.4.3. Transitive symmetric verbs taking marked NP and completive clause (inf/fin) (s_ctrl) /
      pl. subject and completive clause
  """.


v_sym_trans_cp_prop_inf_mrkd_np_synsem := v_sym_trans_cp_prop_mrkd_np_synsem &
  [ LOCAL.CAT.VAL.COMPS < synsem,
                          [ LOCAL vp_inf_local & [ CAT.VAL.SUBJ < [ NON-LOCAL [ SLASH 0-dlist,
                                                                                REL 0-dlist,
                                                                                QUE 0-dlist ] ] > ] ] > ]
  """
  
  """.


v_sym_trans_cp_prop_fin_mrkd_np_synsem := v_sym_trans_cp_prop_mrkd_np_synsem &
  [ LOCAL.CAT.VAL.COMPS < synsem, [ LOCAL s_or_cp_fin_local ] > ]
  """
  
  """.


v_sym_trans_cp_prop_fin_mrkd_np := v_sym &
  [ ALTS [ PASS -,
           IMPERS -,
           VCALT + ] ]
  """
  
  """.


v_pp-cp_e-p-sym_lex := v_sym_trans_cp_prop_fin_mrkd_np & main-verb & basic-three-arg &
  [ SYNSEM v_sym_trans_cp_prop_fin_mrkd_np_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_sym_trans_cp_prop_fin_mrkd_np_synsem,
                                                                  VAL.COMPS < [ OPT - ],
                                                                              [ OPT - ] > ] ] ]
  """
  e.g. acordar (to agree) (A acordó con B no hablar/que no hablarían -> A y B acordaron no hablar/que no hablarían)
  """.


v_sym_trans_np_mrkd_np_synsem := v_trans_np_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL.CAT.HEAD.KEYS.KEY non_modable_rel ],
                              [ LOCAL mrkd_np_local & [ CAT.HEAD.KEYS [ KEY #ockey,
                                                                        ALTKEY non_modable_rel ],
                                                        CONT.HOOK.INDEX ref-ind & #ind3 ] ] > ],
            CONT [ RELS <! arg123-ev-relation !>,
                   HCONS <! !> ] ],
    LKEYS [ KEYREL.ARG3 #ind3,
            --OCOMPKEY #ockey ] ]
  """
  --- 1.3.3.4.4. Transitive symmetric verbs taking DO and marked NP / plural (or coord.) DO
  """.


v_sym_trans_np_mrkd_np_pl_do_synsem := v_sym_trans_np_mrkd_np_synsem
  """
  
  """.


v_sym_trans_np_mrkd_np_pl_subj_synsem := v_sym_trans_np_mrkd_np_synsem
  """
  
  """.


v_sym_trans_np_mrkd_np := v_sym &
  [ ALTS [ PASS +,
           IMPERS +,
           VCALT - ] ]
  """
  
  """.


v_np-pp*_e-sym-sbj-pl_lex := v_sym_trans_np_mrkd_np & main-verb & basic-three-arg &
  [ SYNSEM v_sym_trans_np_mrkd_np_pl_subj_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_sym_trans_np_mrkd_np_pl_subj_synsem,
                                                                 VAL.COMPS < [ OPT - ],
                                                                             [ OPT + ] > ] ] ]
  """
  e.g. Ambos grupos comparten un fondo genético común.
  """.


v_np-pp_e-sym_lex := v_sym_trans_np_mrkd_np & main-verb & basic-three-arg &
  [ SYNSEM v_sym_trans_np_mrkd_np_pl_do_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_sym_trans_np_mrkd_np_pl_do_synsem,
                                                               VAL.COMPS < [ OPT - ],
                                                                           [ OPT - ] > ] ] ]
  """
  e.g. polarización que confrontará (la docencia a/con la investigación/la docencia y la investigación)
  """.


v_np-pp*_e-sym_lex := v_sym_trans_np_mrkd_np & main-verb & basic-three-arg &
  [ SYNSEM v_sym_trans_np_mrkd_np_pl_do_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_sym_trans_np_mrkd_np_pl_do_synsem,
                                                               VAL.COMPS < [ OPT - ],
                                                                           [ OPT + ] > ] ] ]
  """
  e.g. compatibilizar
  """.


v_prd-comp_synsem := arg1_lt &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CAT.HEAD.KEYS.KEY #ckey ], ... >,
            CONT [ RELS <! arg12-ev-relation !>,
                   HCONS <! qeq !> ] ],
    LKEYS.--COMPKEY #ckey ]
  """
  --- 1.3.3.5. Verbs taking predicative complements
  """.


v_seq_synsem := v_prd-comp_synsem &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL prd_local & [ CONT.HOOK [ LTOP #larg,
                                                                XARG #xarg ] ],
                                NON-LOCAL [ REL 0-dlist,
                                            QUE 0-dlist ] ] > ],
            CONT.HCONS <! [ HARG #harg,
                            LARG #larg ] !> ],
    LKEYS.KEYREL arg12-ev-relation & [ ARG1 #xarg,
                                       ARG2 #harg ] ]
  """
  --- 1.3.3.5.1. verbs taking a predicative complement
  """.


v_ap_seq_synsem := v_seq_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD adj,
                            NON-LOCAL.SLASH 0-dlist ] > ]
  """
  
  """.


v_pp_seq_synsem := v_seq_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD adp & [ KEYS.ALTKEY non_modable_rel ],
                            NON-LOCAL.SLASH 0-dlist ] > ]
  """
  
  """.


v_pp_aj-seq_synsem := v_seq_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD adp & [ KEYS.ALTKEY basic_adj_rel ],
                            NON-LOCAL.SLASH 0-dlist ] > ]
  """
  
  """.


v_pp_vp-inf-seq_synsem := v_seq_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT.HEAD adp & [ KEYS.ALTKEY v_event_rel,
                                                     MOD < [ LOCAL.CAT.HEAD noun ] > ],
                                    CONT.HOOK.INDEX.SF prop ] ] > ]
  """
  
  """.


v_xp_seq := basic-main-verb &
  [ ALTS [ RCP -,
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ],
    SYNSEM v_seq_synsem ]
  """
  
  """.


v_ap_seq_lex := v_xp_seq & main-verb & basic-two-arg &
  [ SYNSEM v_ap_seq_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ap_seq_synsem,
                                           VAL.COMPS < [ OPT - ] > ] ] ]
  """
  e.g. acabar, caer, permanecer, quedar, seguir, terminar (el anciano acabó/cayó/terminó enfermo)
  """.


v_pp_seq_lex := v_xp_seq & main-verb & basic-two-arg &
  [ SYNSEM v_pp_seq_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_pp_seq_synsem,
                                           VAL.COMPS < [ OPT - ] > ] ] ]
  """
  e.g. ejercer, pasar, trabajar (trabaja de/como camarera)
  """.


v_pp_aj-seq_lex := v_xp_seq & main-verb & basic-two-arg &
  [ SYNSEM v_pp_aj-seq_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_pp_aj-seq_synsem,
                                              VAL.COMPS < [ OPT - ] > ] ] ]
  """
  e.g. alardear, chulear, fardar, presumir (alardea de listo, presumía muy orgulloso de seductor con las mujeres)
  """.


v_pp_vp-inf-seq_lex := v_xp_seq & main-verb & basic-two-arg &
  [ SYNSEM v_pp_vp-inf-seq_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_pp_vp-inf-seq_synsem,
                                                  VAL.COMPS < [ OPT - ] > ] ] ]
  """
  e.g. queda mucho por hacer
  """.


v_ap_seq-prn_lex := v_xp_seq & main-vprn & basic-three-arg &
  [ SYNSEM v_ap_seq_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ap_seq_synsem,
                                           VAL.COMPS < [ OPT - ] > ] ] ]
  """
  e.g. creerse, encontrarse,... (se cree muy listo)
  """.


v_ap*_seq-prn_lex := v_xp_seq & main-vprn & basic-three-arg &
  [ SYNSEM v_ap_seq_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ap_seq_synsem,
                                           VAL.COMPS < [ OPT + ] > ] ] ]
  """
  e.g. se mostró muy crítico
  """.


v_pp_seq-prn_lex := v_xp_seq & main-vprn & basic-three-arg &
  [ SYNSEM v_pp_seq_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_pp_seq_synsem,
                                           VAL.COMPS < [ OPT - ] > ] ] ]
  """
  e.g. perfilarse,... (se perfila como campeón)
  """.


v_seq-ppa_synsem := v_prd-comp_synsem &
  [ LOCAL.CAT [ HEAD.INV -,
                VAL.COMPS < [ ],
                            [ LOCAL dative_local & [ CAT.HEAD.KEYS.KEY #ockey,
                                                     CONT.HOOK.INDEX #arg3 ],
                              NON-LOCAL.REL 0-dlist & [ LIST < > ] ] > ],
    LKEYS [ KEYREL arg123-ev-relation & [ ARG3 #arg3 ],
            --OCOMPKEY #ockey ] ]
  """
  --- 1.3.3.5.2. verbs taking a predicative complement and IO
  """.


v_ap-ppa_synsem := v_seq-ppa_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL prd_local & [ CAT.HEAD adj,
                                                  CONT.HOOK [ LTOP #larg,
                                                              XARG #xarg ] ] ],
                            [ ] >,
            CONT.HCONS <! [ HARG #harg,
                            LARG #larg ] !> ],
    LKEYS.KEYREL arg123-ev-relation & [ ARG1 #xarg,
                                        ARG2 #harg ] ]
  """
  
  """.


v_np-ppa_synsem := v_seq-ppa_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL np_acc_unmrkd_local & [ CAT.HEAD.KEYS.KEY non_modable_rel,
                                                          CONT.HOOK.INDEX #arg2 & ref-ind ] ],
                          [ ] >,
    LKEYS.KEYREL arg123-ev-relation & [ ARG2 #arg2 ] ]
  """
  
  """.


v_xp-ppa_seq := basic-main-verb &
  [ ALTS [ RCP -,
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ] ]
  """
  
  """.


v_ap-ppa*_seq_lex := v_xp-ppa_seq & main-verb & basic-three-arg &
  [ SYNSEM v_ap-ppa_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_ap-ppa_synsem,
                                           VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
  """
  e.g. resultar ((le) resultaba incómodo)
  """.


v_np-ppa*_seq_lex := v_xp-ppa_seq & main-verb & basic-three-arg &
  [ SYNSEM v_np-ppa_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_np-ppa_synsem,
                                           VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ]
  """
  e.g. me parece un bombazo
  """.


v_np-predxp_synsem := arg1_lt &
  [ LOCAL [ CAT [ HEAD.INV -,
                  VAL.COMPS < [ LOCAL np_acc_local & [ CAT.HEAD.KEYS.KEY #ckey & non_modable_rel ],
                                NON-LOCAL.REL 0-dlist & [ LIST < > ] ],
                              [ LOCAL.CAT.HEAD.KEYS.KEY #ockey ] > ],
            CONT.RELS <! arg12-ev-relation !> ],
    LKEYS [ --COMPKEY #ckey,
            --OCOMPKEY #ockey ] ]
  """
  --- 1.3.3.5.3. verbs taking a predicative complement and DO
  Including verbs taking ´cláusulas mínimas' (in fact they form just one constituent)
  e.g. eligieron [a Tomás director del departamento]/eligieron [director a Tomás]/eligieron [de director
  a Tomás] Tomás fue elegido director del departamento/a Tomás lo eligieron director del departamento.
  Faltan verbos como considerar, percibir (v_cp_prop_ap) y esgrimir  (v_cp_prop_pp*)!!!
  """.


v_np-np_synsem := v_np-predxp_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #ind2 ],
                            [ LOCAL np_acc_unmrkd_local & [ CAT.HEAD.KEYS.KEY non_modable_rel,
                                                            CONT.HOOK.INDEX #arg3 & ref-ind ] ] >,
            CONT.HCONS <! qeq !> ],
    LKEYS.KEYREL arg123-ev-relation & [ ARG2 #ind2,
                                        ARG3 #arg3 ] ]
  """
  
  """.


v_np-xp_synsem := v_np-predxp_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ ],
                            [ LOCAL prd_local & [ CONT.HOOK.LTOP #larg ] ] >,
            CONT.HCONS <! [ LARG #larg ] !> ] ]
  """
  
  """.


v_np-xp_oeq_synsem := v_np-xp_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #ind2 ],
                            [ LOCAL.CONT.HOOK.XARG #ind2 ] >,
            CONT.HCONS <! [ HARG #harg ] !> ],
    LKEYS.KEYREL arg123-ev-relation & [ ARG2 #ind2,
                                        ARG3 #harg ] ]
  """
  
  """.


v_np-xp_sor_synsem := v_np-xp_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #ind ],
                            [ LOCAL.CONT.HOOK.XARG #ind ] >,
            CONT.HCONS <! [ HARG #harg ] !> ],
    LKEYS.KEYREL.ARG2 #harg ]
  """
  
  """.


v_np-ap_oeq_synsem := v_np-xp_oeq_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ ], [ LOCAL.CAT.HEAD adj ] > ]
  """
  
  """.


v_np-pp_oeq_synsem := v_np-xp_oeq_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ ],
                          [ LOCAL.CAT.HEAD adp & [ KEYS.ALTKEY non_modable_rel ] ] > ]
  """
  
  """.


v_np-pp_aj-oeq_synsem := v_np-xp_oeq_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ ],
                          [ LOCAL.CAT.HEAD adp & [ KEYS.ALTKEY basic_adj_rel ] ] > ]
  """
  
  """.


v_np-ap_sor_synsem := v_np-xp_sor_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ ], [ LOCAL.CAT.HEAD adj ] > ]
  """
  
  """.


v_np-pp_sor_synsem := v_np-xp_sor_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ ],
                          [ LOCAL.CAT.HEAD adp & [ KEYS.ALTKEY non_modable_rel ] ] > ]
  """
  
  """.


v_np-pp_aj-sor_synsem := v_np-xp_sor_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ ],
                          [ LOCAL.CAT.HEAD adp & [ KEYS.ALTKEY basic_adj_rel ] ] > ]
  """
  
  """.


v_np-xp := basic-main-verb &
  [ ALTS [ PASS +,
           IMPERS +,
           RCP -,
           VCALT - ] ]
  """
  
  """.


v_np-np_sor-rfx_lex := v_np-xp & main-verb & basic-three-arg &
  [ ALTS.RFX -,
    SYNSEM v_np-np_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_np-np_synsem,
                                          VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ]
  """
  e.g. eso se considera plagio
  """.


v_np-ap_sor_lex := v_np-xp & main-verb & basic-three-arg &
  [ ALTS.RFX -,
    SYNSEM v_np-ap_sor_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_np-ap_sor_synsem,
                                              VAL.COMPS < [ OPT - ],
                                                          [ OPT - ] > ] ] ]
  """
  e.g. dejar (lo dejaron KO)
  """.


v_np-ap_sor-rfx_lex := v_np-xp & main-verb & basic-three-arg &
  [ ALTS.RFX +,
    SYNSEM v_np-ap_sor_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_np-ap_sor_synsem,
                                              VAL.COMPS < [ OPT - ],
                                                          [ OPT - ] > ] ] ]
  """
  e.g. declarar, proclamar (lo declararon culpable)
  """.


v_np-pp_sor_lex := v_np-xp & main-verb & basic-three-arg &
  [ ALTS.RFX -,
    SYNSEM v_np-pp_sor_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_np-pp_sor_synsem,
                                              VAL.COMPS < [ OPT - ],
                                                          [ OPT - ] > ] ] ]
  """
  e.g. dar, calificar, tomar,... (e.g. me tomas por tonto?)
  """.


v_np-pp_sor-rfx_lex := v_np-xp & main-verb & basic-three-arg &
  [ ALTS.RFX +,
    SYNSEM v_np-pp_sor_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_np-pp_sor_synsem,
                                              VAL.COMPS < [ OPT - ],
                                                          [ OPT - ] > ] ] ]
  """
  e.g. proclamar (lo proclamaron como...)
  """.


v_np-pp*_oeq-rfx_lex := v_np-xp & main-verb & basic-three-arg &
  [ ALTS.RFX +,
    SYNSEM v_np-pp_oeq_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_np-pp_oeq_synsem,
                                              VAL.COMPS < [ OPT - ],
                                                          [ OPT + ] > ] ] ]
  """
  e.g. distrazar de
  """.


v_np-pp_aj-oeq_lex := v_np-xp & main-verb & basic-three-arg &
  [ ALTS.RFX -,
    SYNSEM v_np-pp_aj-oeq_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_np-pp_aj-oeq_synsem,
                                                 VAL.COMPS < [ OPT - ],
                                                             [ OPT - ] > ] ] ]
  """
  e.g. la combinación se evalúa como ineficiente.
  """.


v_np-pp_aj-oeq-rfx_lex := v_np-xp & main-verb & basic-three-arg &
  [ ALTS.RFX +,
    SYNSEM v_np-pp_aj-oeq_synsem & [ LOCAL.CAT [ HEAD.LSYNSEM v_np-pp_aj-oeq_synsem,
                                                 VAL.COMPS < [ OPT - ],
                                                             [ OPT - ] > ] ] ]
  """
  e.g. un libro que no vaciló en calificar de importante
  """.


v_copula_basic_synsem := lex-synsem &
  [ MODIFIED notmod,
    LOCAL local & [ CAT [ MC -,
                          HC-LIGHT -,
                          HEAD verb & [ INV -,
                                        AUX -,
                                        KEYS.KEY _be_v_prd_rel ],
                          VAL.COMPS < synsem & [ LOCAL [ COORD -,
                                                         CAT [ HEAD.KEYS.KEY #ckey,
                                                               VAL.COMPS < > ] ],
                                                 NON-LOCAL.REL 0-dlist ] > ] ],
    LKEYS [ KEYREL.PRED _be_v_prd_rel,
            --COMPKEY #ckey ] ]
  """
  --- 1.5. Copula verbs
  """.


v_copula_synsem := v_copula_basic_synsem &
  [ LOCAL [ CAT [ HEAD.TAM #tam,
                  VAL [ SUBJ < [ OPT + ] >,
                        COMPS < [ OPT -,
                                  LOCAL [ CAT.HEAD.TAM #tam,
                                          CONT.HOOK.INDEX #index ],
                                  NON-LOCAL.REL 0-dlist ] > ] ],
            CONT.HOOK.INDEX #index ] ]
  """
  
  """.


v_copula := basic-verb-lex &
  [ ALTS [ RCP -,
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ] ]
  """
  
  """.


v_cop := v_copula &
  [ SYNSEM [ LOCAL.CAT.VAL [ SUBJ < #subj >,
                             COMPS < #comps & [ LOCAL.CAT.VAL.CLTS #clts ] >,
                             CLTS #clts ],
             NON-LOCAL [ SLASH [ LIST #sfirst,
                                 LAST #slast ],
                         REL #rel,
                         QUE [ LIST #qfirst,
                               LAST #qlast ] ] ],
    ARG-ST < #subj & [ NON-LOCAL [ SLASH [ LIST #smiddle,
                                           LAST #slast ],
                                   REL #rel & 0-dlist,
                                   QUE [ LIST #qmiddle,
                                         LAST #qlast ] ] ],
             #comps & [ NON-LOCAL [ SLASH [ LIST #sfirst,
                                            LAST #smiddle ],
                                    QUE [ LIST #qfirst,
                                          LAST #qmiddle ] ] ] . < #comps & [ NON-LOCAL [ SLASH [ LIST #sfirst,
                                              LAST #smiddle ],
                                      QUE [ LIST #qfirst,
                                            LAST #qmiddle ] ] ] . #clts > > ]
  """
  
  """.


v_cop-np_sbj := v_cop &
  [ SYNSEM.LOCAL [ AGR.PNG #png,
                   CAT.VAL [ SUBJ < [ LOCAL np_nom_local & [ AGR.PNG #png ] ] >,
                             COMPS < [ LOCAL.CONT.HOOK.LTOP #ltop ] > ],
                   CONT [ HOOK.LTOP #ltop,
                          RELS <! !>,
                          HCONS <! !> ] ] ]
  """
  
  """.


v_cop-nsbj := v_copula &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.INV -,
                           VAL [ SUBJ < >,
                                 COMPS #comps & < [ LOCAL [ CAT.VAL.SUBJ < >,
                                                            CONT.HOOK.LTOP #ltop ],
                                                    NON-LOCAL #nonlocal ] > ] ],
                     CONT [ HOOK.LTOP #ltop,
                            RELS <! !>,
                            HCONS <! !> ] ],
             NON-LOCAL #nonlocal ],
    ARG-ST #comps ]
  """
  
  """.


v_ap_ser_synsem := v_copula_synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #sind ] >,
                      COMPS < [ LOCAL [ CAT.HEAD adj & [ MOD < [ LOCAL.CAT.HEAD noun ] >,
                                                         PRD.COPV ser ],
                                        CONT.HOOK.XARG #sind ] ] > ],
            CONT.HOOK.XARG #sind ] ]
  """
  e.g. Juan es feo
  removed LOCAL [ CAT.VAL COMPS < [ LOCAL [ CAT.HEAD [ KEYS.KEY basic_adj_rel ], to cover "será complicado"
  """.


v_ap_ser_lex := v_cop-np_sbj &
  [ SYNSEM v_ap_ser_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_ap_ser_synsem ] ]
  """
  
  """.


v_pp_ser_synsem := v_copula_synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #sind ] >,
                      COMPS < [ LOCAL [ CAT.HEAD adp & [ KEYS.ALT2KEY quant_or_deg_rel,
                                                         MOD < [ LOCAL.CAT.HEAD noun ] >,
                                                         PRD.COPV ser ],
                                        CONT.HOOK.XARG #sind ] ] > ],
            CONT.HOOK.XARG #sind ] ]
  """
  e.g. Juan es de esta ciudad
  """.


v_pp_ser_lex := v_cop-np_sbj &
  [ SYNSEM v_pp_ser_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_pp_ser_synsem ] ]
  """
  
  """.


v_modnp_ser_synsem := v_copula_synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #sind ] >,
                      COMPS < [ LOCAL [ CAT.HEAD modnp & [ MOD < [ LOCAL.CAT.HEAD noun ] > ],
                                        CONT.HOOK.XARG #sind ] ] > ],
            CONT.HOOK.XARG #sind ] ]
  """
   e.g. fue la semana pasada
  ; abans : COMPS < [ LOCAL.CAT.HEAD.KEYS.KEY prep_mod_rel ] >, but "Esto es al contado"... )
  """.


v_modnp_ser_lex := v_cop-np_sbj &
  [ SYNSEM v_modnp_ser_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_modnp_ser_synsem ] ]
  """
  
  """.


v_pp_e-vp-inf_ser_synsem := v_copula_basic_synsem &
  [ LOCAL [ CAT [ HEAD.PRD non-prd,
                  VAL [ SUBJ < [ OPT +,
                                 LOCAL.CONT.HOOK.INDEX #sind ] >,
                        COMPS < [ OPT -,
                                  LOCAL [ CAT.HEAD adp & [ KEYS.ALT2KEY v_event_rel,
                                                           MOD < [ LOCAL.CAT.HEAD noun ] >,
                                                           PRD.COPV ser ],
                                          CONT.HOOK [ INDEX.SF prop,
                                                      XARG #sind ] ],
                                  NON-LOCAL.REL 0-dlist ] > ] ],
            CONT.HOOK.XARG #sind ] ]
  """
  e.g. Es como pulsar una tecla de un simple vistazo.
  """.


v_pp_e-vp-inf-ser_lex := v_cop-np_sbj &
  [ SYNSEM v_pp_e-vp-inf_ser_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_pp_e-vp-inf_ser_synsem ] ]
  """
  
  """.


v_vp_ppart_ser_synsem := v_copula_synsem &
  [ LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #arg2 ] >,
                    COMPS < [ LOCAL [ CAT.HEAD verb & [ PRD.COPV ser ],
                                      CONT.RELS.LIST < [ ARG2 #arg2 ], ... > ] ] > ] ]
  """
  e.g. Juan fue atacado
  """.


v_vp_ppart-ser_lex := v_cop-np_sbj &
  [ SYNSEM v_vp_ppart_ser_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_vp_ppart_ser_synsem ] ]
  """
  
  """.


v_vp_ppart_estar_synsem := v_copula_synsem &
  [ LOCAL.CAT [ HEAD.PRD non-prd,
                VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #arg2 ] >,
                      COMPS < [ LOCAL.CAT.HEAD adj & [ MOD < [ LOCAL [ AGR #arg2,
                                                                       CAT.HEAD noun ] ] >,
                                                       PRD.COPV estar,
                                                       KEYS.KEY v_event_rel ] ] > ] ] ]
  """
  e.g. Juan está muerto
  """.


v_vp_ppart-estar_lex := v_cop-np_sbj &
  [ SYNSEM v_vp_ppart_estar_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_vp_ppart_estar_synsem ] ]
  """
  
  """.


v_ap_estar_synsem := v_copula_synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #sind ] >,
                      COMPS < [ LOCAL [ CAT.HEAD adj & [ MOD < [ LOCAL.CAT.HEAD noun ] >,
                                                         PRD.COPV estar,
                                                         KEYS.KEY adj_rel ],
                                        CONT.HOOK.XARG #sind ] ] > ],
            CONT.HOOK.XARG #sind ] ]
  """
  e.g. Juan está feo
  """.


v_ap_estar_lex := v_cop-np_sbj &
  [ SYNSEM v_ap_estar_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_ap_estar_synsem ] ]
  """
  
  """.


v_pp_estar_synsem := v_copula_synsem &
  [ LOCAL [ CAT [ HEAD.PRD non-prd,
                  VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #sind ] >,
                        COMPS < [ LOCAL [ CAT.HEAD adp & [ PRD predicative,
                                                           KEYS.ALT2KEY quant_or_deg_rel,
                                                           MOD < [ LOCAL.CAT.HEAD noun ] > ],
                                          CONT.HOOK.XARG #sind ] ] > ] ],
            CONT.HOOK.XARG #sind ] ]
  """
  e.g. Juan está en la ciudad
  """.


v_pp_estar_lex := v_cop-np_sbj &
  [ SYNSEM v_pp_estar_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_pp_estar_synsem ] ]
  """
  
  """.


v_adv_estar_synsem := v_copula_basic_synsem &
  [ LOCAL [ CAT [ HEAD.PRD non-prd,
                  VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #sind ] >,
                        COMPS < [ OPT -,
                                  LOCAL [ CAT.HEAD adv & [ MOD < [ LOCAL.CAT.HEAD verb ] > ],
                                          CONT.HOOK.XARG #sind ] ] > ] ],
            CONT.HOOK.XARG #sind ] ]
  """
  e.g. está muy bien
  """.


v_adv_estar_lex := v_cop-np_sbj &
  [ SYNSEM v_adv_estar_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_adv_estar_synsem ] ]
  """
  
  """.


v_modnp_estar_synsem := v_copula_synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #sind ] >,
                      COMPS < [ LOCAL [ CAT.HEAD modnp & [ MOD < [ LOCAL.CAT.HEAD noun ] > ],
                                        CONT.HOOK.XARG #sind ] ] > ],
            CONT.HOOK.XARG #sind ] ]
  """
  e.g. ahí estamos; ¿Dónde/cómo está Juan?
  """.


v_modnp_estar_lex := v_cop-np_sbj &
  [ SYNSEM v_modnp_estar_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_modnp_estar_synsem ] ]
  """
  
  """.


v_pp_e-vp-inf-estar_synsem := v_copula_basic_synsem &
  [ LOCAL [ CAT [ HEAD.PRD non-prd,
                  VAL [ SUBJ < [ OPT +,
                                 LOCAL.CONT.HOOK.INDEX #sind ] >,
                        COMPS < [ OPT -,
                                  LOCAL [ CAT.HEAD adp & [ KEYS.ALTKEY v_event_rel,
                                                           MOD < [ LOCAL.CAT.HEAD noun ] >,
                                                           PRD.COPV estar ],
                                          CONT.HOOK [ INDEX.SF prop,
                                                      XARG #sind ] ],
                                  NON-LOCAL.REL 0-dlist ] > ] ],
            CONT.HOOK.XARG #sind ] ]
  """
  e.g. todo está por organizar
  """.


v_pp_e-vp-inf-estar_lex := v_cop-np_sbj &
  [ SYNSEM v_pp_e-vp-inf-estar_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_pp_e-vp-inf-estar_synsem ] ]
  """
  
  """.


v_vp_ger-estar_synsem := v_copula_synsem &
  [ LOCAL [ CAT [ HEAD.PRD non-prd,
                  VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #sind ] >,
                        COMPS < [ LOCAL [ CAT [ HEAD verb & [ PRD.COPV estar,
                                                              VOICE active,
                                                              VFORM ger,
                                                              MOD < > ],
                                                VAL.SUBJ < [ OPT + ] > ],
                                          CONT.HOOK.XARG #sind ] ] > ] ],
            CONT.HOOK.XARG #sind ] ]
  """
  e.g. Juan está cantando
  """.


v_vp_ger-estar_lex := v_cop-np_sbj &
  [ SYNSEM v_vp_ger-estar_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_vp_ger-estar_synsem ] ]
  """
  
  """.


v_vp_ger-nsbj-estar_synsem := v_copula_basic_synsem &
  [ LOCAL [ AGR.PNG.PN 3sg,
            CAT [ HEAD [ PRD non-prd,
                         TAM #tam ],
                  VAL [ COMPS < [ OPT -,
                                  LOCAL [ CAT [ HEAD verb & [ PRD.COPV estar,
                                                              VOICE active,
                                                              VFORM ger,
                                                              TAM #tam ],
                                                VAL.CLTS < > ],
                                          CONT.HOOK.INDEX #index ] ] >,
                        CLTS < > ] ],
            CONT.HOOK.INDEX #index ] ]
  """
  e.g. está lloviendo
  """.


v_vp_ger-nsbj-estar_lex := v_cop-nsbj &
  [ SYNSEM v_vp_ger-nsbj-estar_synsem & [ LOCAL.CAT.HEAD.LSYNSEM v_vp_ger-nsbj-estar_synsem ] ]
  """
  
  """.

 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- Auxiliary verbs
; the VOICE of the COMPS element used to be active, but in order to deal with 
; passives such as "se ha resuelto el caso"

v_aux_haber_synsem := lex-synsem &
  [ LOCAL [ CAT [ MC bool,
                  HEAD [ INV #inv,
                         PRD non-prd,
                         MOD < >,
                         KEYS.ALTKEY #altkey ],
                  VAL.COMPS < [ OPT -,
                                LOCAL [ CAT.HEAD [ INV #inv,
                                                   PRD non-prd,
                                                   VFORM part,
                                                   KEYS [ KEY #ckey,
                                                          ALTKEY #altkey ] ],
                                        CONT.HOOK [ LTOP #hand,
                                                    INDEX #index ] ] ] > ],
	    CONT [ HOOK [ LTOP #hand,
                          INDEX #index ],
	       	   RELS <! !>,
		   HCONS <! !> ] ],
    LKEYS.--COMPKEY #ckey ]
"""
; --- Auxiliary verbs
; the VOICE of the COMPS element used to be active, but in order to deal with 
; passives such as "se ha resuelto el caso"
;   SYNSEM [ LOCAL.CAT [ HEAD [ TAM.ASPECT perf,
""".


v_aux_vp-part_synsem := v_aux_haber_synsem &
  [ LOCAL [ AGR #sind, 
            CAT.VAL [ SUBJ < [ LOCAL np_nom_local & #subject & [ AGR #sind ] ] >,
                      COMPS < [ LOCAL.CAT vp_cat &
                                          [ HEAD.VOICE active,
                                            VAL [ SUBJ < [ LOCAL #subject ] >,
                                                  CLTS #clts ] ] ] >,
                      CLTS #clts ],
	    CONT.HOOK.XARG #sind ] ].

v_aux_vp-ppart_synsem := v_aux_haber_synsem & 
  [ LOCAL [ AGR #sind, 
            CAT.VAL [ SUBJ < [ LOCAL #subject & [ AGR #sind ] ] >,
                      COMPS < [ LOCAL.CAT vp_cat &
                                          [ HEAD [ INV +,
                                                   VOICE passive ],
                                            VAL [ SUBJ < [ LOCAL #subject ] >,
                                                  CLTS #clts & < clitic-synsem & 
                                                         [ OPT -,
                                                           LOCAL [ AGR.PRONTYPE impers,
                                                                   CAT.HEAD.CASE none,
                                                                   CONT.HOOK.INDEX ref-ind ] ] > ] ] ] >,
                      CLTS #clts ],
	    CONT.HOOK.XARG #sind ] ] .

v_aux_vp-part-nsbj_synsem := v_aux_haber_synsem &
  [ LOCAL.CAT.VAL [ SUBJ #subj,
                    COMPS < [ LOCAL.CAT cat &
                                        [ HEAD verb & [ VOICE active, MOD < > ],
                                          VAL [ SUBJ #subj & < >,
                                                CLTS #clts & < >,
                                                COMPS < >,
                                                SPR < > ] ] ] >,
                    CLTS #clts ] ].

v_aux_haber := basic-aux-verb &
  [ ALTS [ RCP -, 
           RFX -, 
           PASS -,
           IMPERS -,
           VCALT - ] ].

v_vp_part-haber_lex := v_aux_haber & cc-two-arg &
  [ SYNSEM v_aux_vp-part_synsem &
           [ LOCAL.CAT [ HEAD.LSYNSEM v_aux_vp-part_synsem, 
                         VAL [ SUBJ < #subj >,
                               COMPS < #comps >,
                               CLTS #clts ] ] ],
    ARG-ST < #subj . < #comps. #clts > > ].

v_vp_ppart-haber_lex := v_aux_haber & cc-two-arg &
  [ SYNSEM v_aux_vp-ppart_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_aux_vp-ppart_synsem, 
                         VAL [ SUBJ < #subj >,
                               COMPS < #comps >,
                               CLTS #clts ] ] ],
    ARG-ST < #subj . < #comps. #clts > > ].

v_vp_part-nsbj-haber_lex := v_aux_haber & basic-one-arg &
  [ SYNSEM v_aux_vp-part-nsbj_synsem & 
           [ LOCAL.CAT [ HEAD.LSYNSEM v_aux_vp-part-nsbj_synsem, 
                         VAL.COMPS #comps ] ],
    ARG-ST #comps ].



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- 2. Nouns

basic-nominal-lex := lex-item &
  [ INFLECTED -,
    ALTS [ RCP -, 
           RFX -,
           PASS - ],
    SYNSEM [ MODIFIED notmod,
             PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     CAT [ MC na,
                           HEAD.MOD < >,
                           VAL [ SUBJ < >,
                                 CLTS < > ] ], 
                     CONT nom-obj ] ] ].

nonpronominal-lex := basic-nominal-lex & 
  [ SYNSEM [ LOCAL [ CAT.VAL [ SPEC < >,
                               SPR < #spr >,
                               COMPS #comps ], 
                     CONT [ HOOK.INDEX ref-ind,
                            RELS.LIST < noun-relation & #key, ... > ] ],
             LKEYS.KEYREL #key ],
    ARG-ST < #spr . #comps >  ].

basic-noun-lex := nonpronominal-lex & 
  [ SYNSEM [ LOCAL [ AGR #agr,
                     CAT [ HEAD noun,
                           VAL.SPR < synsem &
                                     [ LOCAL local-min &
                                             [ AGR #agr,
                                               CAT [ HEAD.KEYS.KEY quant_or_deg_rel, 
                                                     VAL.SUBJ < > ] ],
                                       NON-LOCAL [ REL 0-dlist,
                                                   SLASH 0-dlist ] ] > ],
                     CONT.HOOK [ LTOP #ltop,
                                 INDEX [ PNG.PN 3per,
                                         PRONTYPE not_pron ] ] ],
             LKEYS.KEYREL.LBL #ltop ] ]. 

basic-common-noun-synsem := lex-synsem & 
  [ LOCAL.CAT.HEAD noun ].

quant-common-noun-lex := nonpronominal-lex & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD.KEYS.KEY all_common_nom_rel,
                           VAL.SPR < synsem &
                                     [ OPT -,
                                       LOCAL local-min &
                                             [ CAT [ HEAD det & [ KEYS.KEY quant_or_wh_rel ], 
                                                     VAL.SUBJ < > ] ],
                                       NON-LOCAL.REL 0-dlist ] > ],
                     CONT.HOOK.LTOP #ltop ],
             LKEYS.KEYREL.LBL #ltop ] ].

basic-quantifying-nom-synsem := lex-synsem & 
  [ LOCAL [ CAT [ HEAD partn,
                  VAL [ SPR < [ OPT -,
                                LOCAL [ CAT [ HEAD det,
                                              VAL.SUBJ < > ],
                                        CONT.HOOK.LTOP #alt2hand ],
                                NON-LOCAL [ QUE 0-dlist,
                                            REL 0-dlist ] ] >,
                        COMPS < [ LOCAL mrkd_np_local & 
                                        [ CAT.HEAD.KEYS.ALTKEY non_modable_rel,
                                          CONT.HOOK.INDEX #arg1 & 
                                                          [ SORT #sort & non-temp ] ],
                                  NON-LOCAL [ QUE 0-dlist,
                                              SLASH 0-dlist ] ] > ] ], 
            CONT [ HOOK.INDEX.DIVISIBLE +,
                   RELS <! noun-arg1-relation & 
                           [ ARG1 #arg1 & ref-ind ] !> ] ], 
    LKEYS [ KEYREL.ARG0.SORT #sort,
            ALT2KEYREL.LBL #alt2hand ] ]. 

n_group-or-pseudopart_synsem := lex-synsem & 
  [ LOCAL [ CAT [ HEAD partn & [ KEYS.ALTKEY part_q_rel ],
                  VAL [ SPR < [ OPT -,
                                LOCAL [ CAT [ HEAD det,
                                              VAL.SUBJ < > ],
                                        CONT.HOOK.LTOP #alt2hand ],
                                NON-LOCAL [ QUE 0-dlist,
                                            REL 0-dlist ] ] >,
                        COMPS < [ LOCAL mrkd_np_local & 
                                        [ CAT.HEAD.KEYS.ALTKEY non_modable_rel,
                                          CONT.HOOK.INDEX #arg1 & 
                                                          [ SORT #sort ] ],
                                  NON-LOCAL [ QUE 0-dlist,
                                              SLASH 0-dlist ] ] > ] ], 
            CONT [ HOOK.INDEX.DIVISIBLE +,
                   RELS <! noun-arg1-relation & 
                           [ ARG1 #arg1 & ref-ind ] !> ] ], 
    LKEYS [ KEYREL.ARG0.SORT #sort,
            ALT2KEYREL.LBL #alt2hand ] ]. 

; -- subcategorization types

n_intrans := basic-noun-lex & basic-one-arg & norm-hook-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.KEYS.KEY non_temp_nonpro_rel & non_elliptical_n_rel,
                         VAL [ SPR < [ OPT -] >,
                               COMPS < > ] ],
                   CONT [ RELS <! noun-arg0-relation !>,
                          HCONS <! !> ] ] ]
"""
; -- subcategorization types
""". 

n_trans := basic-noun-lex & 
  [ SYNSEM [ LOCAL.CAT [ HEAD.KEYS.KEY non_temp_nonpro_rel & non_elliptical_n_rel,
                         VAL [ SPR < [ OPT - ] >,
                               COMPS < [ LOCAL.CAT.HEAD.KEYS.KEY #ckey ],... > ] ],
             LKEYS.--COMPKEY #ckey ] ]. 

n_ppcomp := n_trans & basic-two-arg & 
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL mrkd_np_local & 
                                           [ CAT.HEAD.KEYS.ALTKEY non_modable_rel,
                                             CONT.HOOK.INDEX ref-ind & #arg1 ] ] >,
                   CONT [ RELS <! noun-arg1-relation & [ ARG1 #arg1 ] !>,
                          HCONS <! !> ] ] ]. 

n_pp-de := n_ppcomp & 
  [ SYNSEM.LOCAL.CAT [ HEAD.KEYS.KEY non_modable_rel,
                       VAL.COMPS < [ OPT +, 
                                     LOCAL.CAT.HEAD.KEYS.KEY _de_p_sel_rel ] > ] ]. 
 
n_cp_prop_or_ques := n_trans & basic-two-arg &
  [ SYNSEM [ LOCAL [ CAT.VAL.COMPS < [ LOCAL [ CAT.MC -, 
                                               CONT.HOOK [ LTOP #larg,
                                                           INDEX.SF prop-or-ques ] ] ] >,
                     CONT [ HOOK.INDEX.SORT abs,
                            RELS <! noun-arg1-relation !>,
                            HCONS <! qeq & [ HARG #harg,
                                             LARG #larg ] !> ] ],
             LKEYS.KEYREL.ARG1 #harg ] ]. 

n_cp_question := n_cp_prop_or_ques & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL mrkd_cp_semi_ques_fin_local &
                                         [ CAT.HEAD.KEYS [ KEY _de_p_sel_rel,
                                                           ALT2KEY ques ], 
                                           CONT.HOOK.INDEX.SF prop ] ] > ]. 

n_cp_prop_fin := n_cp_prop_or_ques & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL mrkd_or_unmrkd_cp_prop_fin_local &
                                         [ CAT.HEAD.KEYS.ALT2KEY prop, 
                                           CONT.HOOK.INDEX.SF prop ] ] > ]. 

n_cp_prop_inf := n_cp_prop_or_ques & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL mrkd_cp_prop_inf_local & 
                                         [ CAT [ HEAD.KEYS.ALT2KEY prop, 
                                                 VAL.CLTS < > ],
                                           CONT.HOOK.INDEX.SF prop ] ] > ]. 


n_ppde_ppcomp := n_trans & basic-three-arg & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD.KEYS.KEY non_modable_rel,
                           VAL.COMPS < [ OPT +, 
                                         LOCAL mrkd_np_local & 
                                               [ CAT.HEAD.KEYS [ KEY _de_p_sel_rel,
                                                                 ALTKEY non_modable_rel ],
                                                 CONT.HOOK.INDEX ref-ind & #arg1 ] ],
                                       [ LOCAL.CAT.HEAD.KEYS.KEY #ockey ] > ],
                     CONT.RELS <! noun-arg12-relation & [ ARG1 #arg1 ] !> ],
             LKEYS.--OCOMPKEY #ockey ] ]. 


n_ppde_pp := n_ppde_ppcomp & 
  [ SYNSEM.LOCAL [ CAT [ HEAD.KEYS.KEY non_modable_rel,
                         VAL.COMPS < synsem,
                                     [ OPT +, 
                                       LOCAL mrkd_np_local & 
                                             [ CAT.HEAD.KEYS.ALTKEY non_modable_rel,
                                               CONT.HOOK.INDEX ref-ind & #arg2 ] ] > ],
                   CONT [ RELS <! [ ARG2 #arg2 ] !>,
                          HCONS <! !> ] ] ]. 


n_ppde_cp_prop := n_ppde_ppcomp & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD.KEYS.KEY non_modable_rel,
                           VAL.COMPS < synsem,
                                       [ LOCAL [ CAT.MC -, 
                                                 CONT.HOOK [ LTOP #larg,
                                                             INDEX.SF prop-or-ques ] ] ] > ],
                     CONT [ HOOK.INDEX.SORT abs,
                            HCONS <! qeq & [ HARG #harg,
                                             LARG #larg ] !> ] ],
             LKEYS.KEYREL.ARG2 #harg ] ]. 

n_ppde_cp_prop_fin := n_ppde_cp_prop & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < synsem,
                                 [ LOCAL mrkd_or_unmrkd_cp_prop_fin_local &
                                         [ CAT.HEAD.KEYS.ALT2KEY prop, 
                                           CONT.HOOK.INDEX.SF prop ] ] > ]. 

n_ppde_cp_prop_inf := n_ppde_cp_prop & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < synsem,
                                 [ LOCAL mrkd_cp_prop_inf_local & 
                                         [ CAT [ HEAD.KEYS.ALT2KEY prop, 
                                                 VAL.CLTS < > ],
                                           CONT.HOOK.INDEX.SF prop ] ] > ]. 


n_quant := quant-common-noun-lex & basic-two-arg & norm-hook-lex & 
  [ SYNSEM [ LOCAL [ CAT.VAL.COMPS < [ LOCAL mrkd_np_local & 
                                             [ CAT.HEAD.KEYS.KEY #ckey & _de_p_sel_rel ] ],... >,
                     CONT [ RELS <! relation !>,
                            HCONS <! !> ] ],
             LKEYS.--COMPKEY #ckey ] ].

n_prop-or-ques_fin_synsem := basic-common-noun-synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL mrkd_or_unmrkd_cp_prop_or_ques_local &
                                  [ CONT.HOOK.INDEX.E [ TENSE tense,
                                                        MOOD ind_or_sub_mood ] ] ] > ]
"""
; fot LRs
""".

n_prop-or-ques_inf_synsem := basic-common-noun-synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL mrkd_or_unmrkd_cp_prop_or_ques_local &
                                  [ CAT.VAL.CLTS < >,
                                    CONT.HOOK.INDEX.E [ TENSE nontense,
                                                        ASPECT no-aspect ] ] ] > ]. 
n_ppde_prop-fin_synsem := basic-common-noun-synsem &
  [ LOCAL.CAT.VAL.COMPS < synsem,
                          [ LOCAL mrkd_or_unmrkd_cp_prop_or_ques_local &
                                  [ CONT.HOOK.INDEX.E [ TENSE tense,
                                                        MOOD ind_or_sub_mood ] ] ] > ].

n_ppde_prop-inf_synsem := basic-common-noun-synsem &
  [ LOCAL.CAT.VAL.COMPS < synsem,
                          [ LOCAL mrkd_or_unmrkd_cp_prop_or_ques_local &
                                  [ CAT.VAL.CLTS < >,
                                    CONT.HOOK.INDEX.E [ TENSE nontense,
                                                        ASPECT no-aspect ] ] ] > ]. 


; --- 2.1. Common nouns


n_-_c_lex := n_intrans &
  [ SYNSEM.LOCAL.AGR.DIVISIBLE - ]
  """
  --- 2.1.1. Intrans common nouns
  e.g. los/cualquier niños
  """.


n_-_c-pl_lex := n_intrans &
  [ SYNSEM.LOCAL.AGR [ PNG.PN plur,
                       DIVISIBLE + ] ]
  """
  e.g. las/*la arras
  """.


n_-_m_lex := n_intrans &
  [ SYNSEM.LOCAL.AGR [ PNG.PN sing,
                       DIVISIBLE + ] ]
  """
  e.g. (bastante/un poco de/*cualquier) acidez
  """.


n_-_m-pl_lex := n_intrans &
  [ SYNSEM.LOCAL.AGR [ PNG.PN plur,
                       DIVISIBLE + ] ]
  """
  e.g. e.g. tiene *tres/un poco de celos, *entre comestibles
  """.


n_-_mc_lex := n_intrans
  """
  e.g. bebió (cualquier/un/un poco de/una copa de) vino
  """.


n_-_nc_lex := n_intrans
  """
  e.g. *un poco de/bastante abogacía
  """.


n_-_col_lex := n_intrans
  """
  e.g. ejército, manada,...
  """.


n_-_c-tmp_lex := basic-noun-lex & norm-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL [ CAT [ POSTHEAD +,
                         HEAD.KEYS.KEY time_n_rel,
                         VAL [ SPR < [ OPT + ] >,
                               COMPS < > ] ],
                   CONT [ HOOK.INDEX.SORT tmp,
                          RELS <! date-relation & [ PRED time_n_rel ] !> ] ] ]
  """
  e.g. lo vieron ese lunes/día/mes/año/...; iremos de vacaciones en enero, comeremos a las dos
  """.


n_-_c-qnt_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ AGR #agr,
                                                CAT.VAL.SPR < [ OPT -,
                                                                LOCAL local-min & [ AGR #agr,
                                                                                    CAT [ HEAD.KEYS.KEY quant_or_deg_rel,
                                                                                          VAL.SUBJ < > ] ],
                                                                NON-LOCAL [ REL 0-dlist,
                                                                            SLASH 0-dlist ] ] > ] ] ]
  """
  
  """.


; --- appositional nouns (see ERG's tittle nouns)
; e.g. propuesta número 1234
; n_-_appo_lex := n_intrans & 


; --- 2.1.2. Argumental common nouns

n_pp_c_lex := n_pp-de & 
  [ SYNSEM basic-common-noun-synsem &
           [ LOCAL.CONT.HOOK.INDEX.DIVISIBLE - ] ]
"""
; --- Nouns taking a PPde (which may be replaced by the poss.)
; (i) non-derived nouns: relational nouns (e.g. el padre de la novia), los amigos de Peter), 
; body part nouns (e.g. brazo, pierna,...), constitutive (abstract) nouns (e.g. el color del dinero); 
; (2) de-adjectival intransitive nouns (e.g. la belleza del cuadro); (iii) deverbal nouns from 
; measure verbs (e.g. el peso de la paja); (3) nouns derived from unaccusative verbs (e.g. la 
; muerte de Mikel); (4) nouns derived from unergative verbs (e.g. el silbido del tren); (5) subject 
; nominalizations (e.g. el traductor del Tractatus)
""".

n_pp_m_lex := n_pp-de & 
  [ SYNSEM basic-common-noun-synsem &
           [ LOCAL.CONT.HOOK.INDEX.DIVISIBLE + ] ].
 
n_pp_mc_lex := n_pp-de & 
  [ SYNSEM basic-common-noun-synsem ]. 

n_pp_nc_lex := n_pp-de & 
  [ SYNSEM basic-common-noun-synsem ]. 


n_pp-pp_de-mc_lex := n_ppde_pp & 
  [ SYNSEM basic-common-noun-synsem &
           [ LOCAL.CONT.HOOK.INDEX.SORT abs ] ]
"""
; --- Nouns taking two PPcomps (being the first one a PPde)
; (1) de-adjectival nouns (e.g. la adicción de Juan a los caramelos de menta); (2) deverbal 
; nouns from psicological, inchoative and perception verbs (e.g. el temor de Juan a las 
; enfermedades infecciosas, la preocupación de María por sus hijos); (3) deverbal nouns 
; derived by intrans verbs (e.g. la lucha de los kurdos contra el estado turco); (4) deverbal 
; nouns derived by trans verbs (e.g. el descubrimiento de) 
""".

n_pp-pp_de-de-mc_lex := n_ppde_pp & 
  [ SYNSEM basic-common-noun-synsem &
           [ LOCAL [ CAT.VAL.COMPS < synsem, 
                                     [ LOCAL.CAT.HEAD.KEYS.KEY de_or_por_p_sel_rel ] >,
                     CONT.HOOK.INDEX.SORT abs ] ] ].
 

; Representation common nouns (retrato, acuarela, dibujo, fotografía,novela...)
; e.g. la fotografía [de un miliciano herido](theme) [de Capa](agent) [del coleccionista](poss)
;      la fotografía [del coleccionista](poss) [de Capa](agent) [de un miliciano herido](theme)
; - the possessive may refer to the possessor, the agent and the theme (e.g. su retrato). 
; - There's a hierarchy for the argument realization as possessives: POSSESSOR > AGENT > THEME
;      su fotografía [de Capa](agent) [de un miliciano herido](theme)
;      *su fotografía [del coleccionista](poss) [de un miliciano herido](theme)
;      *su fotografía [del coleccionista](poss) [de Capa](agent) 
; n_repres_lex := 


; --- Nouns taking verbal complements

n_cp*_p-c_lex := n_cp_prop_fin & 
  [ SYNSEM n_prop-or-ques_fin_synsem & 
           [ LOCAL [ CAT.VAL.COMPS < [ OPT + ] >,
                     CONT.HOOK.INDEX.DIVISIBLE - ] ] ]
"""
; --- Nouns taking verbal complements
; e.g. una ventaja ((de) que no llueva es que no hay ocasión de perder el paraguas)
""". 


n_cp_p-c_lex := n_cp_prop_fin &
  [ SYNSEM n_prop-or-ques_fin_synsem & [ LOCAL [ CAT.VAL.COMPS < [ OPT - ] >,
                                                 CONT.HOOK.INDEX.DIVISIBLE - ] ] ]
  """
  
  """.


n_cp_p-mc_lex := n_cp_prop_fin &
  [ SYNSEM n_prop-or-ques_fin_synsem & [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ]
  """
  e.g. no hay duda de que vendrá
  """.


n_cp_q-c_lex := n_cp_question &
  [ SYNSEM n_prop-or-ques_fin_synsem & [ LOCAL [ CAT.VAL.COMPS < [ OPT + ] >,
                                                 CONT.HOOK.INDEX.DIVISIBLE - ] ] ]
  """
  e.g. la incógnita (de si/cómo se ha utilizado el dinero público)
  """.


n_pp-cp_p-mc_lex := n_ppde_cp_prop_fin &
  [ SYNSEM n_ppde_prop-fin_synsem & [ LOCAL.CAT.VAL.COMPS < [ OPT + ],
                                                            [ OPT + ] > ] ]
  """
  e.g. el interés (de la empresa) (en/por que lleguen a un acuerdo/llegar a un acuerdo)
  """.


n_pp-vp_mc_lex := n_ppde_cp_prop_inf &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ]
  """
  e.g. la estupidez (de Juan) (de votar a Ernesto)
  """.

; --- Quantifying nouns (we distinguish three classes)
; --- Partitive nouns

n_pp_part_lex := n_quant &
  [ ALTS.PASS -,
    SYNSEM basic-quantifying-nom-synsem & [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ]
  """
  --- Quantifying nouns (we distinguish three classes)
  --- Partitive nouns
  - may show "ad sensum" agreement; i.e. the verb agrees with either the head or its complement
  (e.g. la mayoría de senadores votaron/votó en contra).
  - If their complement is indefinite, they build pseudo-partitive constructions; i.e. the complement
  doesn't have referential properties, nor can it be topicalized (e.g. *de senadores, una mayoría
  votó en contra); if their complement is a definite NP, they build partitive constructions; i.e.
  both the complement and the whole NP are referential, and the complement may be topicalized
  (e.g. de los senadores, una mayoría votó en contra).
  !!! NOTE that this distinction is not implemented yet.
  --- Group nouns
  - some of them are ambiguous with collective nouns, e.g. manada de cerdos
  - ambiguous: descriptive vs pseudo-partitive reading, but they only have a pseudo-partitive reading
  when they do not co-occur with the definite article (e.g. *el/un grupo de senadores votaron en contra).
  - If their complement is indefinite, they build pseudo-partitive constructions (see above)
  (e.g. ((un grupo minoritario) (de senadores)) votaron en contra), if their complement is a definite
  NP, they build partitive constructions (e.g. ((un grupo minoritario) (de los senadores)))
  !!! NOTE that this distinction is not implemented yet.
  - Some take plural/mass nouns (e.g. un haz (de luz/protones), un grupo (de gente/caminantes)) and
  some only plural nouns (e.g. racimo (de uvas), fajo (de billetes), hatajo (de idiotas))
  --- Pseudo-partitive nouns
  - This type includes: counter ('acotadores') nouns (e.g. tableta (de mantequilla/turrón),
  terrón (de azúcar), hilo (de azafrán), hoja (de papel), rebanada (de pan), grano (de
  uva/café/arena/trigo),...) and measure nouns (e.g. un montón (de libros), un puñado (de
  dólares), un manojo (de perejil), una pila (de libros), un kilo (de peras/harina),
  un litro (de leche), una libra (de azúcar/clavos)).
  - ambiguous: descriptive vs pseudo-partitive reading, but they only have a pseudo-partitive reading
  when they do not co-occur with the definite article (e.g. *el/un montón (de libros)).
  """.


n_pp_grp_lex := n_quant &
  [ ALTS.PASS -,
    SYNSEM n_group-or-pseudopart_synsem & [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ]
  """
  
  """.


n_pp_psd-part_lex := n_quant &
  [ ALTS.PASS -,
    SYNSEM n_group-or-pseudopart_synsem & [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ]
  """
  
  """.


n_pp_c-tmp_lex := n_ppcomp &
  [ SYNSEM basic-common-noun-synsem & [ LOCAL [ CAT [ HEAD.KEYS.KEY part_nom_rel,
                                                      VAL.COMPS < [ OPT -,
                                                                    LOCAL [ CAT.HEAD.KEYS [ KEY _de_p_sel_rel,
                                                                                            ALT2KEY implicit_q_rel ],
                                                                            CONT.HOOK.INDEX.SORT non-temp ] ] > ],
                                                CONT.HOOK.INDEX [ DIVISIBLE -,
                                                                  SORT tmp ] ] ] ]
  """
  --- temporal measure nouns (e.g. despues de años (de espera/disgustos) se divorciaron)
  """.

; --- 2.2. Proper names

n_-_pn_lex := basic-noun-lex & basic-one-arg & norm-sem-lex-item &
  [ SYNSEM [ LOCAL [ AGR #agr & [ PNG.GEN #gen ],
                     CAT [ POSTHEAD +,
                           HEAD.KEYS [ KEY named_rel,
                                       ALTKEY non_free_relative_q_rel ],
                           VAL [ SPR < [ LOCAL [ AGR.PNG.GEN #gen & masc_or_fem,
                                                 CAT.HEAD.KEYS.KEY quant_rel ],
                                         NON-LOCAL.QUE #que ] >,
                                 COMPS < > ] ],
                     CONT.HOOK [ INDEX #agr & [ DIVISIBLE -,
                                                PNG.PN 3per,
                                                SORT non-temp,
                                                PRONTYPE not_pron ],
                                 XARG #arg1 ] ],
             NON-LOCAL [ SLASH 0-dlist,
                         REL 0-dlist,
                         QUE #que ],
             LKEYS [ KEYREL named-relation & [ PRED named_rel,
                                               ARG1 #arg1 ],
                     ALTKEYREL.PRED implicit_q_rel ] ] ]
  """
  If the proper name is modified, then it requires a def. article (e.g. (*el) manolo del otro día,
  la Rocío de la que te hablé). Some proper names may take the article (e.g. la Pantoja)
  """.



; --- 2.3. Pronouns

pronominal-lex := basic-nominal-lex &
  [ SYNSEM.LOCAL [ AGR #agr,
                   CONT.HOOK.INDEX #agr & 
                                   [ PRONTYPE real_pron ] ] ].

norm-pronominal-synsem := lex-synsem &
  [ LOCAL [ CAT.MC na,
            CONT [ HOOK [ LTOP #nhand,
                          INDEX #index,
                          XARG #nhand ],
                   RELS <! #keyrel & noun-relation & 
                           [ ARG0 #index,
                             LBL #nhand ],
                           #altkey & 
                           [ ARG0 #index,
                             RSTR #phand ] !>,
                   HCONS <! qeq & [ HARG #phand,
                                    LARG #nhand ] !> ] ], 
    LKEYS [ KEYREL #keyrel, 
            ALTKEYREL #altkey ] ]. 

pron_relat := basic-nominal-lex &
  [ SYNSEM.NON-LOCAL.QUE 0-dlist ].

pron_nonque := pronominal-lex & 
  [ SYNSEM.NON-LOCAL.QUE 0-dlist ].
             
pron_nonque_nonrel := pron_nonque & 
  [ SYNSEM.NON-LOCAL.REL 0-dlist ]. 
             
pron_nonque_nonrel_nonslash := pron_nonque_nonrel & 
  [ SYNSEM.NON-LOCAL.SLASH 0-dlist ]. 


; --- 2.3.1. Personal pronouns

personal-pron-lex := pron_nonque_nonrel_nonslash & 
  [ SYNSEM.LOCAL.CAT.VAL.SPR #spr,
    ARG-ST #spr ].

personal_pron_synsem := norm-pronominal-synsem & 
  [ LOCAL [ CAT [ HEAD noun & 
                       [ KEYS [ KEY non_named_non_modable_rel,
                                ALT2KEY #alt2key ] ],
                  VAL.COMPS < > ],
            CONT [ HOOK.INDEX [ SORT entity,
                                PRONTYPE real_pron ],
                   RELS <! [ PRED pron_rel ], 
                           #alt2keyrel & [ PRED #alt2key & pronoun_q_rel ] !> ] ],
    LKEYS.ALT2KEYREL #alt2keyrel ].


; --- 2.3.1.1. Personal pronouns


n_-_pr-pers-n_lex := personal-pron-lex & basic-zero-arg &
  [ SYNSEM personal_pron_synsem & [ LOCAL.CAT [ HEAD.CASE nom,
                                                VAL.SPR < > ] ] ]
  """
  -- yo, tú
  """.


n_-_pr-pers-no-sg_lex := personal-pron-lex & basic-one-arg &
  [ SYNSEM personal_pron_synsem & [ LOCAL [ AGR.PNG.PN sing,
                                            CAT [ HEAD.CASE nom_or_obl,
                                                  VAL.SPR < [ OPT +,
                                                              LOCAL.CAT.HEAD.KEYS.KEY todo_def_q_rel,
                                                              NON-LOCAL [ QUE 0-dlist,
                                                                          REL 0-dlist ] ] > ] ] ] ]
  """
  -- (todo) él, ella, vos
  """.


n_-_pr-pers-no-pl_lex := personal-pron-lex & basic-one-arg &
  [ SYNSEM personal_pron_synsem & [ LOCAL [ AGR.PNG.PN plur,
                                            CAT [ HEAD.CASE nom_or_obl,
                                                  VAL.SPR < [ OPT +,
                                                              LOCAL.CAT.HEAD.KEYS.KEY todo_def_q_rel,
                                                              NON-LOCAL [ QUE 0-dlist,
                                                                          REL 0-dlist ] ] > ] ] ] ]
  """
  -- (todos) nosotros, vosotros, ellos/as, usted/es
  """.


n_-_pr-pers-o_lex := personal-pron-lex & basic-zero-arg &
  [ SYNSEM personal_pron_synsem & [ LOCAL.CAT [ HEAD.CASE obl,
                                                VAL.SPR < > ] ] ]
  """
  -- mí, tí, sí, conmigo, contigo, consigo
  """.



; --- 2.3.1.2. Clitics

clitic-lex := norm-zero-arg &
  [ INFLECTED -,
    SYNSEM [ PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     CAT.HEAD noun ] ] ]
"""
; --- 2.3.1.2. Clitics
; - depend phonologically on the verb and can't appear alone; can't appear in a coordination nor be 
; selected by identity (e.g. *Juan lo y la trajo; *Juan la lavó y regaló); may produce phonological 
; processes in the verb (e.g. sentad+os => sentaos); when appear in a sequence, this can't be interrupted 
; (e.g. *lo puede darme)
""".

; clitic-synsem := lex-synsem &
clitic-synsem := non-canonical &
  [ LOCAL [ AGR #index,
            CAT [ MC na,
                  HEAD noun &
                      [ PRD non-prd,
                        MOD < >,
                        KEYS [ KEY pron_rel,
                               ALT2KEY #alt2key ] ],
	          VAL [ SUBJ < >,
                        COMPS < >,
                        SPEC < >,
                        SPR < >,
                        CLTS < > ] ] ,
            CONT [ HOOK [ LTOP #nhand,
                          INDEX #index,
                          XARG #nhand ],
                   RELS <! [ PRED pron_rel,
                             ARG0 #index,
                             LBL #nhand ], 
                           [ PRED #alt2key & pronoun_q_rel,
                             ARG0 #index,
                             RSTR #phand ] !>,
                   HCONS <! qeq & [ HARG #phand,
                                    LARG #nhand ] !> ] ],
    NON-LOCAL [ SLASH 0-dlist,
                REL 0-dlist,
                QUE 0-dlist ] ]. 


n_-_pr-pers-lo_lex := clitic-lex & 
  [ SYNSEM clitic-synsem & 
           [ LOCAL [ AGR.PRONTYPE std_pron,
                     CAT.HEAD.CASE acc ] ] ].

n_-_pr-pers-le_lex := clitic-lex & 
  [ SYNSEM clitic-synsem & 
           [ LOCAL [ AGR.PRONTYPE std_pron,
                     CAT.HEAD.CASE only_dat ] ] ].

n_-_pr-pers-me_lex := clitic-lex & 
  [ SYNSEM clitic-synsem & 
           [ LOCAL [ AGR.PRONTYPE std_or_refl_pron,
                     CAT.HEAD.CASE acc_or_rflx_or_dat ] ] ].

n_-_pr-pers-te_lex := clitic-lex & 
  [ SYNSEM clitic-synsem & 
           [ LOCAL [ AGR.PRONTYPE std_or_refl_pron,
                     CAT.HEAD.CASE acc_or_rflx_or_dat ] ] ].

n_-_pr-pers-nos_lex := clitic-lex & 
  [ SYNSEM clitic-synsem & 
           [ LOCAL [ AGR.PRONTYPE std_or_recip_or_refl_pron,
                     CAT.HEAD.CASE acc_or_rflx_or_rcp_or_dat ] ] ].

n_-_pr-pers-os_lex := clitic-lex & 
  [ SYNSEM clitic-synsem & 
           [ LOCAL [ AGR.PRONTYPE std_or_recip_or_refl_pron,
                     CAT.HEAD.CASE acc_or_rflx_or_rcp_or_dat ] ] ].

n_-_pr-pers-se_lex := clitic-lex & 
  [ SYNSEM clitic-synsem & 
           [ LOCAL [ AGR.PRONTYPE std_or_recip_or_refl_pron,
                     CAT.HEAD.CASE rflx_or_rcp_or_dat ] ] ].

n_-_pr-impers-se_lex := clitic-lex & 
  [ SYNSEM clitic-synsem & 
           [ LOCAL [ AGR.PRONTYPE impers,
                     CAT.HEAD.CASE none ] ] ].


; --- 2.3.2. Definite pronouns 

definite-pron-lex := pron_nonque_nonrel_nonslash & norm-hook-lex.

spec-definite-pron-lex := definite-pron-lex & basic-one-arg &
  [ SYNSEM.LOCAL.CAT.VAL.SPR #spr,
    ARG-ST #spr ].

definite_pron_synsem := norm-pronominal-synsem &
  [ LOCAL [ CAT [ HEAD noun & 
                       [ KEYS.KEY non_modable_rel ],
                  VAL.COMPS < > ],
            CONT.HOOK.INDEX [ SORT non-temp, 
                              PRONTYPE real_pron ] ] ].

spec-definite_pron_synsem := definite_pron_synsem &
  [ LOCAL [ CAT [ HEAD.KEYS.ALT2KEY #alt2key,
                  VAL.SPR < [ OPT +,
                              LOCAL [ CAT.HEAD.KEYS.KEY todo_def_q_rel ],
                              NON-LOCAL [ QUE 0-dlist,
                                          REL 0-dlist ] ] > ],
            CONT [ RELS <! relation,
                           #alt2keyrel & [ PRED #alt2key ] !> ] ],
    LKEYS.ALT2KEYREL #alt2keyrel ].

n_-_pr-dem-este_lex := spec-definite-pron-lex &
  [ SYNSEM spec-definite_pron_synsem &
           [ LOCAL.CONT.RELS <! [ PRED generic_entity_rel ], [ PRED _este_q_rel ] !> ] ].

n_-_pr-dem-ese_lex := spec-definite-pron-lex &
  [ SYNSEM spec-definite_pron_synsem &
           [ LOCAL.CONT.RELS <! [ PRED generic_entity_rel ], [ PRED _ese_q_rel ] !> ] ].

n_-_pr-dem-aquel_lex := spec-definite-pron-lex &
  [ SYNSEM spec-definite_pron_synsem &
           [ LOCAL.CONT.RELS <! [ PRED generic_entity_rel ], [ PRED _aquel_q_rel ] !> ] ].

n_-_pr-dem-ello_lex := spec-definite-pron-lex &
  [ SYNSEM spec-definite_pron_synsem &
           [ LOCAL.CONT.RELS <! [ PRED generic_entity_rel ], [ PRED _ello_q_rel ] !> ] ].

n_-_pr-df-tal_lex := definite-pron-lex &
  [ SYNSEM definite_pron_synsem &
           [ LOCAL [ CAT.VAL.SPR < >, 
                     CONT.RELS <! [ PRED generic_entity_rel ], [ PRED _tal_q_rel ] !> ] ] ].

n_-_pr-df-ambos_lex := definite-pron-lex &
  [ SYNSEM definite_pron_synsem &
           [ LOCAL [ CAT.VAL.SPR < >, 
                     CONT.RELS <! [ PRED generic_entity_rel ], [ PRED ambos_q_rel ] !> ] ] ].


; --- 2.3.3. Indefinite pronouns (intransitive)

indefinite-pron-lex := pron_nonque_nonrel_nonslash & norm-hook-lex.

spec-indefinite-pron-lex := indefinite-pron-lex & basic-one-arg &
  [ SYNSEM.LOCAL.CAT.VAL.SPR #spr,
    ARG-ST #spr ].

indefinite_pron_synsem := lex-synsem &
  [ LOCAL [ CAT [ HEAD noun & [ KEYS.KEY non_modable_rel ],
                  VAL.COMPS < > ],
            CONT [ RELS.LIST < noun-relation & #keyrel, ... >,
                   HOOK.INDEX [ SORT non-temp, 
                                PRONTYPE real_pron ] ] ],
    LKEYS.KEYREL #keyrel ].

norm_indefinite_pron_synsem := norm-pronominal-synsem & indefinite_pron_synsem &
  [ LOCAL [ CAT.HEAD.KEYS.ALTKEY #altkeypred,
            CONT.RELS <! noun-relation,
                         [ PRED quant_rel & #altkeypred ] !> ] ].

spec_norm_indefinite_pron_synsem := norm_indefinite_pron_synsem & 
  [ LOCAL [ CAT.VAL.SPR < [ OPT +,
                            LOCAL [ CAT.HEAD.KEYS.KEY _casi_x_deg_rel,
                                    CONT.HOOK [ LTOP #khand, 
                                                XARG #index ] ],
                            NON-LOCAL [ QUE 0-dlist,
                                        REL 0-dlist ] ] >,
            CONT [ HOOK.INDEX #index,
                   RELS <! noun-relation, [ LBL #khand ] !> ] ],
     LKEYS [ ALTKEYREL.PRED undef_quant_q_rel,
             ALT2KEYREL.LBL #khand ] ].



n_-_pr-idf-alguien_lex := indefinite-pron-lex & norm-zero-arg &
  [ SYNSEM norm_indefinite_pron_synsem & [ LOCAL [ AGR.PNG.PN 3per,
                                                   CAT.VAL.SPR < >,
                                                   CONT [ HOOK.INDEX.SORT hum,
                                                          RELS.LIST < [ PRED person_rel ], ... > ] ],
                                           LKEYS.ALTKEYREL.PRED undef_quant_q_rel & _alguno_q_rel ] ]
  """
  e.g. (*casi) alguien llamó
  """.


n_-_pr-idf-nadie_lex := spec-indefinite-pron-lex &
  [ SYNSEM spec_norm_indefinite_pron_synsem & [ LOCAL [ AGR.PNG.PN 3per,
                                                        CAT.VAL.SPR < [ LOCAL.CAT.HEAD.KEYS.KEY _casi_x_deg_rel ] >,
                                                        CONT [ HOOK.INDEX.SORT hum,
                                                               RELS <! [ PRED person_rel ],
                                                                       relation !> ] ],
                                                LKEYS.ALTKEYREL.PRED _ninguno_q_rel ] ]
  """
  e.g. (casi) nadie vino
  """.


n_-_pr-idf-todo_lex := spec-indefinite-pron-lex &
  [ SYNSEM spec_norm_indefinite_pron_synsem & [ LOCAL [ CAT.VAL.SPR < [ LOCAL.CAT.HEAD.KEYS.KEY _casi_x_deg_rel ] >,
                                                        CONT.RELS <! [ PRED generic_entity_rel ],
                                                                     relation !> ],
                                                LKEYS.ALTKEYREL.PRED undef_quant_q_rel & _todo_q_rel ] ]
  """
  e.g. (casi) todos fueron
  """.


n_-_pr-idf-demas_lex := spec-indefinite-pron-lex &
  [ SYNSEM indefinite_pron_synsem & [ LOCAL [ CAT.VAL.SPR < [ LOCAL.CAT.HEAD.KEYS.KEY _el_q_rel ] >,
                                              CONT.RELS <! [ PRED generic_entity_rel ] !> ] ] ]
  """
  e.g. vinieron Pedro, Juan y (los) demás
  """.


n_-_pr-idf-cual_lex := spec-indefinite-pron-lex &
  [ SYNSEM indefinite_pron_synsem & [ LOCAL [ CAT.VAL.SPR < [ OPT -,
                                                              LOCAL.CAT.HEAD.KEYS.KEY _cada_q_rel ] >,
                                              CONT.RELS <! [ PRED generic_entity_rel ] !> ] ] ]
  """
  e.g. cada cual mantuvo su posición
  """.


basic-partitive-pron-synsem := lex-synsem &
  [ LOCAL [ CAT [ MC na,
                  HEAD partn & [ MOD < >,
                                 KEYS [ KEY #key & non_modable_rel,
                                        ALTKEY non_free_relative_q_rel ] ],
                  VAL [ SUBJ < >,
                        SPEC < >,
                        COMPS < [ LOCAL mrkd_np_local & [ CAT.HEAD.KEYS [ KEY #ckey,
                                                                          ALTKEY #key ],
                                                          CONT.HOOK.INDEX #arg & [ SORT #sort ] ],
                                  NON-LOCAL [ ; REL #rel,
                                              QUE 0-dlist,
                                              SLASH 0-dlist ] ] > ] ],
            CONT [ RELS.LIST < #keyrel, ... >,
                   HOOK [ LTOP #nhand,
                          INDEX #index & [ SORT non-temp,
                                           PRONTYPE real_pron ] ] ] ],
    NON-LOCAL.REL 0-dlist,
    LKEYS [ KEYREL #keyrel & [ PRED part_of_rel,
                               LBL #nhand,
                               ARG0 #index & ref-ind & [ SORT #sort ],
                               ARG1 #arg & ref-ind ],
            --COMPKEY #ckey & _de_p_sel_rel ] ]
  """
  --- 2.3.4. (Pseudo)partitive pronouns
  """.


norm-basic-partitive-pron-synsem := basic-partitive-pron-synsem &
  [ LOCAL [ CAT.HEAD.KEYS.ALTKEY #altkeypred,
            CONT [ HOOK [ LTOP #nhand,
                          INDEX #index,
                          XARG #nhand ],
                   RELS <! #keyrel & noun-relation & [ ARG0 #index,
                                                       LBL #nhand ],
                           #altkey & [ PRED #altkeypred,
                                       ARG0 #index,
                                       RSTR #phand ] !>,
                   HCONS <! qeq & [ HARG #phand,
                                    LARG #nhand ] !> ] ],
    NON-LOCAL.SLASH 0-dlist,
    LKEYS [ KEYREL #keyrel,
            ALTKEYREL #altkey ] ]
  """
  
  """.


partitive-pron-lex := basic-nominal-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS #comps ],
    ARG-ST #comps ]
  """
  
  """.


spec-partitive-pron-lex := basic-nominal-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR #spr & < [ NON-LOCAL [ QUE 0-dlist,
                                                      REL 0-dlist ] ] >,
                           COMPS #comps ],
    ARG-ST < #spr . #comps > ]
  """
  
  """.


basic-pseudo-part-pron-synsem := lex-synsem &
  [ LOCAL [ AGR #agr & [ PNG.PN 3sg,
                         DIVISIBLE + ],
            CAT.VAL.COMPS < [ OPT +,
                              LOCAL [ CAT.HEAD.KEYS.ALT2KEY udef_q_rel,
                                      CONT.HOOK.INDEX [ PNG.PN sing,
                                                        DIVISIBLE + ] ] ] >,
            CONT.HOOK.INDEX #agr ],
    NON-LOCAL.QUE 0-dlist ]
  """
  --- 2.3.4.1. pseudo-partitive pronouns (i.e. un poco/algo/nada + de Mass_N)
  e.g. no he comido algo/nada/un poco + de sopa
  """.


norm_pseudo-partitive_synsem := basic-pseudo-part-pron-synsem & norm-basic-partitive-pron-synsem
  """
  
  """.


basic_pseudo-partitive_synsem := basic-pseudo-part-pron-synsem & basic-partitive-pron-synsem
  """
  
  """.


n_pp_pr-part-algo_lex := partitive-pron-lex &
  [ SYNSEM norm-basic-partitive-pron-synsem & [ LOCAL.CONT.RELS <! relation,
                                                                   [ PRED _alguno_q_rel ] !> ] ]
  """
  e.g. he comido (*casi) algo (de sopa)
  """.


n_pp_pr-part-nada_lex := spec-partitive-pron-lex &
  [ SYNSEM norm-basic-partitive-pron-synsem & [ LOCAL [ CAT.VAL.SPR < [ OPT +,
                                                                        LOCAL [ CAT.HEAD.KEYS.KEY _casi_x_deg_rel,
                                                                                CONT.HOOK [ XARG #index,
                                                                                            LTOP #alt2hand ] ] ] >,
                                                        CONT [ HOOK.INDEX #index,
                                                               RELS <! relation,
                                                                       [ LBL #alt2hand,
                                                                         PRED _ninguno_q_rel ] !> ] ],
                                                LKEYS.ALT2KEYREL.LBL #alt2hand ] ]
  """
  e.g. no he comido (casi) nada (de sopa)
  """.


n_pp_pr-part-un-poco_lex := partitive-pron-lex &
  [ SYNSEM basic_pseudo-partitive_synsem & [ LOCAL.CONT.RELS <! relation,
                                                                [ PRED _un_poco_part_of_rel ] !> ] ]
  """
  e.g. he comido (un) poco de sopa, *(un) poco
  """.

#|
actually...
n_pp_pr-part-poco_lex := spec-partitive-pron-lex &
  [ SYNSEM basic_pseudo-partitive_synsem &
           [ LOCAL [ CAT.VAL.SPR < [ OPT -, 
                                     LOCAL.CAT.HEAD.KEYS.KEY art_indef_q_rel ] >,
                     CONT.RELS <! [ PRED _poco_part_of_rel ] !>  ] ] ].

|#

; --- 2.3.4.2. partitive pronouns

basic-part-pron-synsem := lex-synsem &
  [ LOCAL [ AGR.PNG.GEN #gender,
            CAT.VAL.COMPS < [ OPT -, 
                              LOCAL [ CAT.HEAD.KEYS.ALT2KEY def_quant_q_rel,
                                      CONT.HOOK.INDEX.PNG [ PN plur, 
                                                            GEN #gender ] ] ] > ], 
    NON-LOCAL.QUE 0-dlist ]
"""
; --- 2.3.4.2. partitive pronouns
""".

norm_partitive_synsem := basic-part-pron-synsem & norm-basic-partitive-pron-synsem.
basic_partitive_synsem := basic-part-pron-synsem & basic-partitive-pron-synsem.


n_pp_pr-part-alguno_lex := partitive-pron-lex &
  [ SYNSEM norm_partitive_synsem & [ LKEYS.ALTKEYREL.PRED _alguno_q_rel ] ]
  """
  e.g. (*casi) alguno/bastantes/muchos/demasiados... de *(los) chicos
  """.


n_pp_pr-part-bastante_lex := partitive-pron-lex &
  [ SYNSEM norm_partitive_synsem & [ LKEYS.ALTKEYREL.PRED _bastante_q_rel ] ]
  """
  
  """.


n_pp_pr-part-cualquiera_lex := partitive-pron-lex &
  [ SYNSEM norm_partitive_synsem & [ LKEYS.ALTKEYREL.PRED _cualquiera_q_rel ] ]
  """
  
  """.


n_pp_pr-part-demasiado_lex := partitive-pron-lex &
  [ SYNSEM norm_partitive_synsem & [ LKEYS.ALTKEYREL.PRED _demasiado_q_rel ] ]
  """
  
  """.


n_pp_pr-part-quienquiera_lex := partitive-pron-lex &
  [ SYNSEM norm_partitive_synsem & [ LKEYS.ALTKEYREL.PRED _quienquiera_q_rel ] ]
  """
  
  """.


n_pp_pr-part-varios_lex := partitive-pron-lex &
  [ SYNSEM norm_partitive_synsem & [ LKEYS.ALTKEYREL.PRED _varios_q_rel ] ]
  """
  
  """.


n_pp_pr-part-mucho_lex := spec-partitive-pron-lex &
  [ SYNSEM basic_partitive_synsem & [ LOCAL [ CAT.VAL.SPR < [ OPT +,
                                                              LOCAL.CAT.HEAD.KEYS.KEY #altkey ] >,
                                              CONT.RELS <! relation & [ PRED _mucho_part_of_rel ] !> ],
                                      LKEYS.ALTKEYREL.PRED #altkey ] ]
  """
  e.g. otras muchas/pocos volvieron a su lugar de origen
  """.


n_pp_pr-part-poco_lex := spec-partitive-pron-lex &
  [ SYNSEM basic_partitive_synsem & [ LOCAL [ CAT.VAL.SPR < [ OPT +,
                                                              LOCAL.CAT.HEAD.KEYS.KEY #altkey ] >,
                                              CONT.RELS <! relation & [ PRED _poco_part_of_rel ] !> ],
                                      LKEYS.ALTKEYREL.PRED #altkey ] ]
  """
  
  """.


n_pp_pr-part-otro_lex := spec-partitive-pron-lex &
  [ SYNSEM basic_partitive_synsem & [ LOCAL [ CAT.VAL.SPR < [ OPT +,
                                                              LOCAL.CAT.HEAD.KEYS.KEY #altkey ] >,
                                              CONT.RELS <! relation & [ PRED _otro_part_of_rel ] !> ],
                                      LKEYS.ALTKEYREL.PRED #altkey ] ]
  """
  e.g. esta no es una guerra diferente a las otras
  """.


n_pp_pr-part-ninguno_lex := spec-partitive-pron-lex &
  [ SYNSEM basic_partitive_synsem & [ LOCAL [ CAT.VAL.SPR < [ OPT +,
                                                              LOCAL [ CAT.HEAD.KEYS.KEY _casi_x_deg_rel,
                                                                      CONT.HOOK [ LTOP #alt2hand,
                                                                                  XARG #index ] ],
                                                              NON-LOCAL [ QUE 0-dlist,
                                                                          REL 0-dlist ] ] >,
                                              CONT [ HOOK.INDEX #index,
                                                     RELS <! relation,
                                                             [ LBL #alt2hand ] !> ] ],
                                      LKEYS.ALT2KEYREL.LBL #alt2hand ] ]
  """
  e.g. (casi) ninguno (de los chicos)
  """.


n_pp_pr-part-uno_lex := spec-partitive-pron-lex &
  [ SYNSEM basic_partitive_synsem & [ LOCAL [ CAT.VAL.SPR < [ OPT +,
                                                              LOCAL.CAT.HEAD.KEYS.KEY cada_q_rel ] >,
                                              CONT.RELS <! relation & [ PRED card_rel ] !> ],
                                      LKEYS.ALTKEYREL.PRED cada_q_rel ] ]
  """
  e.g. (cada) uno (de los chicos)
  """.


n_pp_pr-part-cuantos_lex := spec-partitive-pron-lex &
  [ SYNSEM basic_partitive_synsem & [ LOCAL [ CAT.VAL.SPR < [ OPT -,
                                                              LOCAL.CAT.HEAD.KEYS.KEY art_indef_q_rel ] >,
                                              CONT.RELS <! relation !> ],
                                      LKEYS.ALTKEYREL.PRED art_indef_q_rel ] ]
  """
  e.g. *(unos) cuantos (de los chicos)
  """.


; --- 2.3.5. Relative pronouns

rel_pronominal_synsem := lex-synsem &
  [ LOCAL [ AGR #index,
            CAT [ MC na,
                  HEAD noun & 
                       [ PRD non-prd,
                         KEYS.ALTKEY norm_rel ],
                  VAL [ SUBJ < >,
                        COMPS < > ] ],
            CONT [ HOOK [ LTOP #hand,
                          INDEX #index & ref-ind,
                          XARG #xarg ],
                   RELS <! !>,
                   HCONS <! !> ] ],
    NON-LOCAL [ REL 1-dlist &
                    [ LIST < [ LTOP #hand,
                               INDEX #index,
                               XARG #xarg ] > ] ],
    LKEYS [ KEYREL [ PRED non_free_relative_nom_rel, 
                     LBL #hand ], 
            ALTKEYREL relation ] ]
"""
; --- 2.3.5. Relative pronouns
; - they don't inflect when they function as subjects, so its predicate agrees with its antecedent  
; (e.g. yo, que me porté bien, pude salir temprano). 
; NOTE: more in Bosque pp. 458-463

;LKEYS [ KEYREL [ PRED non_temp_nom_rel,
""".



free_rel_pro_lex := basic-nominal-lex &
  [ SYNSEM [ LOCAL [ AGR #ind,
                     CAT [ HC-LIGHT -,
                           MC na,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ],
                     CONT [ HOOK [ INDEX ref-ind & #ind,
                                   XARG #nhand ],
                            RELS.LIST < [ ARG0 #ind,
                                          RSTR #rhand ],
                                        [ LBL #nhand,
                                          ARG0 #ind ], ... >,
                            HCONS <! qeq & [ HARG #rhand,
                                             LARG #nhand ] !> ] ],
             NON-LOCAL [ REL 0-dlist,
                         QUE 1-dlist & <! #ind !>,
                         SLASH 1-dlist & <! [ CAT.VAL.COMPS < > ] !> ] ],
    ARG-ST < > ]
  """
   Free relatives have a non-empty QUE value whose single list element is an index
   (rather than the handle which is employed for ordinary question WH-words).
   They encode the constraints for their S/XP sister in the free-relative construction,
   in their SLASH attribute.
  free_rel_pro_lex := pronominal-lex &
  """.


n_-_pr-rel-que_lex := pron_relat &
  [ SYNSEM rel_pronominal_synsem & [ LOCAL.CAT [ HEAD.KEYS [ KEY que_pron_rel,
                                                             ALTKEY def_q_rel ],
                                                 VAL.SPR #spr & < [ OPT -,
                                                                    LOCAL [ CAT.HEAD det & [ KEYS.KEY def_q_rel ],
                                                                            CONT.RELS <! relation !> ] ] > ] ],
    ARG-ST #spr ]
  """
  a)- The pronoun "que":
  - May occur in non-restrictive and restrictive RC, taking any syntactic funcion. It also
  occur in predicative and semi-free relatives (together with the quantifier), but they never occur
  in free relatvs.
  - Must be preceeded by the article when functioning as a preposition's complement (and, obviously, when
  they occur in a semi-free relative, where we find other quantifiers (e.g. los estudiantes que faltaron
  fueron más que los/aquellos que asistieron))
  e.g. el escritor al que premiaron anoche vendrá a nuestra tertulia.
  - Never co-occur with the article in a non-oblique rel. explicativa
    - may function as DO without the prep. "a"
    e.g. el escritor que premiaron anoche vendrá a nuestra tertulia.
    - In oblique relatives the determiner may be absent when the antecedent has a 'caracter predicativo', and:
      - the phrase including the relative is definite
      e.g. le regalé *una/la pluma con que había escrito mis novelas
      - the polarity of the subordinate clause can't be negative
      e.g. me prestó el dinero *de/del que yo no disponía
      - only with the propositions "con", "de", "en", "por" and "a" (if it is not accusative nor dative)
      - que no sea explicativa (la empresa, *en que/en la que trabajo hace años, se dedica a ...)
  """.


n_-_pr-free-rel-que_lex := free_rel_pro_lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun & [ MOD < >,
                                         PRD non-prd,
                                         KEYS [ KEY #pred,
                                                ALTKEY semi-free_relative_q_rel ] ],
                           VAL.SPR < [ OPT -,
                                       LOCAL.CAT.HEAD det & [ KEYS.KEY art_def_q_rel ] ] > ],
                     CONT [ HOOK.INDEX #ind,
                            RELS <! #altkey, #key !> ] ],
             NON-LOCAL.SLASH 1-dlist & <! [ AGR ref-ind,
                                            CAT.HEAD [ MOD < >,
                                                       PRD non-prd ],
                                            CONT.HOOK.INDEX #ind ] !>,
             LKEYS [ KEYREL #key & [ PRED #pred & free_que_pron_rel ],
                     ALTKEYREL #altkey & [ PRED semi-free_relative_q_rel ] ] ] ]
  """
  
  """.


n_-_pr-rel-quien_lex := pron_relat &
  [ SYNSEM rel_pronominal_synsem & [ LOCAL [ CAT [ HEAD [ MOD < >,
                                                          KEYS [ KEY non_que_pron_rel,
                                                                 ALTKEY def_q_rel ] ],
                                                   VAL.SPR < > ],
                                             CONT.HOOK.INDEX.SORT hum ] ] ]
  """
             LKEYS [ KEYREL #key & [ PRED #pred & nom_rel ],
  b)- La forma "quien"
  - puede aparecer en rel. especificativas, explicativas, predicativas y libres.
  - sólo puede aparecer en las especificativas cuando actúa como término de preposición,
  i.e. no puede desempeñar la función de sujeto (*los congresistas quienes llegaron anoche
  fueron alojados provisionalmente)
  - en las explicativas puede aparecer sin restricción alguna (los congresistas, quienes
  llegaron anoche, fueron alojados provisionalmente)
  - cuando actúa de OD debe llevar la prep."a" (*el hombre quien vimos ayer...)
  """.


n_-_pr-free-rel-quien_lex := free_rel_pro_lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun & [ MOD < >,
                                         PRD non-prd,
                                         KEYS [ KEY nom_rel & #pred,
                                                ALTKEY free_relative_q_rel ] ],
                           VAL.SPR < > ],
                     CONT [ HOOK.INDEX #ind & [ SORT hum ],
                            RELS <! #altkey, #key !> ] ],
             NON-LOCAL.SLASH 1-dlist & <! [ AGR ref-ind,
                                            CAT.HEAD [ MOD < >,
                                                       PRD non-prd ],
                                            CONT.HOOK.INDEX #ind ] !>,
             LKEYS [ KEYREL #key & [ PRED #pred ],
                     ALTKEYREL #altkey & [ PRED free_relative_q_rel ] ] ] ]
  """
  
  """.


n_-_pr-rel-cual_lex := pron_relat &
  [ SYNSEM rel_pronominal_synsem & [ LOCAL.CAT [ HEAD [ MOD < >,
                                                        KEYS [ KEY non_que_pron_rel,
                                                               ALTKEY def_q_rel ] ],
                                                 VAL.SPR #spr & < [ OPT -,
                                                                    LOCAL.CAT.HEAD det & [ KEYS.KEY art_def_q_rel ] ] > ] ],
    ARG-ST #spr ]
  """
  c)- La forma "el cual"
  - no puede aparecer en rel. libres o semilibres
  - sólo puede aparecer en las especificativas cuando actúa como término de preposición,
  e.g. *ese es un tema el cual ha estudiado a fondo/sobre el cual tiene varios artículos
  - es el único rel. que puede aparecer al final de un grupo fónico:
    - c. genitivo no extrapuesto de sintagmas partitivos
    e.g. los estudiantes, la mayoría de los cuales apoyó la propuesta, se manifestaron.
    - suj. de cláusulas absolutas , e.g. dicho lo cual
    - término de locuciones prepositivas( a consecuencia de, en torno a,...)
  - aparece con frecuencia al frente de la rel. yustapuestas, o cuando el antecedentes es
  un SN complejo de cuyo núcleo queda distanciado el rel.
  e.g. la columna de humo que causó la explosión, el cual se propagó a otros edificios
  """.


basic_wh_pron_lex := pronominal-lex &
  [ SYNSEM [ LOCAL [ AGR #index,
                     CAT [ MC na,
                           HC-LIGHT -,
                           HEAD.KEYS.KEY non_modable_rel,
                           VAL.SPR < > ],
                     CONT [ HOOK.XARG #nhand,
                            RELS <! [ LBL #nhand,
                                      ARG0 #index ],
                                    [ ARG0 #index,
                                      RSTR #rhand ] !>,
                            HCONS <! qeq & [ HARG #rhand,
                                             LARG #nhand ] !> ] ],
             NON-LOCAL [ REL 0-dlist,
                         QUE 1-dlist & [ LIST < param > ] ] ] ]
  """
  d)- cuantos le oían le admiraban
  --- 2.3.6. Interrogative pronouns (qué, quién/es, cuál/es, cuánto/s)
  - quién, cuál y cuánto pueden tomar un PP_de partitivo
  e.g. ¿Quién/cuál/cuántos de tus amigos es diputado?
  """.


pron_wh_lex := basic_wh_pron_lex &
  [ SYNSEM.LOCAL [ AGR #index,
                   CAT.VAL.COMPS < >,
                   CONT.HOOK.INDEX #index ],
    ARG-ST < > ]
  """
  
  """.


pron_wh_part_lex := basic_wh_pron_lex &
  [ SYNSEM basic-partitive-pron-synsem & [ LOCAL [ AGR.PNG.GEN #gender,
                                                   CAT.VAL.COMPS #comps & < [ OPT +,
                                                                              LOCAL.CONT.HOOK.INDEX.PNG [ PN plur,
                                                                                                          GEN #gender ] ] >,
                                                   CONT.HOOK.INDEX.SORT non-temp ] ],
    ARG-ST #comps ]
  """
  
  """.


n_-_pr-wh-que_lex := pron_wh_lex &
  [ SYNSEM [ LOCAL.CONT [ HOOK.INDEX.SORT non-hum_non-temp,
                          RELS <! relation, [ PRED que_q_rel ] !> ],
             LKEYS.KEYREL.PRED thing_rel ] ]
  """
  
  """.


n_pp_pr-wh-quien_lex := pron_wh_part_lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
                   CONT [ HOOK.INDEX.SORT hum,
                          RELS <! relation, [ PRED que_q_rel ] !> ] ] ]
  """
  
  """.


n_pp_pr-wh-cual_lex := pron_wh_part_lex &
  [ SYNSEM.LOCAL.CONT.RELS <! relation, [ PRED que_q_rel ] !> ]
  """
  
  """.


n_pp_pr-wh-cuanto_lex := pron_wh_part_lex &
  [ SYNSEM.LOCAL.CONT.RELS <! relation, [ PRED que_q_rel ] !> ]
  """
  
  """.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- 3. Adjectives

basic-adjective-lex := lex-item &
  [ INFLECTED -,
    ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS - ],
    SYNSEM [ PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             MODIFIED notmod,
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     COORD-REL.PRED null_coord_rel,
                     CAT [ HEAD adj & 
                                [ KEYS.KEY basic_adj_rel ],
                           VAL [ SUBJ < >,
                                 CLTS < > ] ] ] ] ].

non-agr_basic_adjective_synsem := lex-synsem &
  [ LOCAL [ AGR.PNG.GEN #gen,
            CAT [ MC na,
                  HEAD [ KEYS.KEY basic_adj_rel,
                         TAM #tam,
                         MOD < [ LOCAL [ COORD -,
                                         AGR.PNG.GEN #gen, 
                                         CAT [ MC na,
                                               HEAD noun & [ KEYS.KEY nom_rel ],
                                               VAL [ SUBJ < >,
                                                     SPEC < > ] ],
                                         CONT.HOOK.INDEX #xarg ],
                                 NON-LOCAL.REL 0-dlist ] > ],
                           VAL [ SUBJ < >,
                                 CLTS < > ] ],
            CONT [ HOOK.XARG #xarg,
                   RELS.LIST < #key & basic-adj-relation & 
                               [ ARG0.E #tam ], ... > ] ], 
    LKEYS.KEYREL #key ].

basic_adjective_synsem := lex-synsem &
  [ LOCAL [ AGR #agr,
            CAT [ MC na,
                  HEAD [ KEYS.KEY basic_adj_rel,
                         TAM #tam,
                         MOD < [ LOCAL [ COORD -,
                                         AGR #agr,
                                         CAT [ MC na,
                                               HEAD noun & [ KEYS.KEY nom_rel ],
                                               VAL [ SUBJ < >,
                                                     SPEC < > ] ],
                                         CONT.HOOK.INDEX #xarg ],
                                 NON-LOCAL.REL 0-dlist ] > ],
                           VAL [ SUBJ < >,
                                 CLTS < > ] ],
            CONT [ HOOK.XARG #xarg,
                   RELS.LIST < #key & basic-adj-relation & 
                               [ ARG0.E #tam ], ... > ] ], 
    LKEYS.KEYREL #key ].

scopal_adjective_synsem := basic_adjective_synsem &
  [ LOCAL [ CAT.HEAD.MOD < canonical-synsem & 
                           [ LOCAL scopal-mod &
                                   [ CONT.HOOK [ LTOP #larg,
                                                 INDEX #index ] ] ] >,
            CONT [ HOOK.INDEX #index,
                   HCONS <! qeq & [ HARG #harg,
                                    LARG #larg ] !> ] ],
    LKEYS.KEYREL.ARG1 #harg ].


intersective_adjective_synsem := basic_adjective_synsem &
  [ LOCAL [ CAT.HEAD.MOD < canonical-synsem & 
                           [ LOCAL intersective-mod ] >,
            CONT.HOOK [ LTOP #ltop,
                        INDEX #arg0,
                        XARG #ind ] ],
    LKEYS.KEYREL [ LBL #ltop,
                   ARG0 #arg0,
                   ARG1 #ind ] ].

non-modfied-adj-lex := basic-adjective-lex & 
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >, 
                           COMPS #comps ], 
    ARG-ST #comps ].

modfied-adj-lex := basic-adjective-lex & 
  [ SYNSEM [ LOCAL.CAT.VAL [ SPR < #spr & 
                                   [ OPT +,
                                     LOCAL [ CAT [ HEAD adv, 
                                                   MC na ], 
                                             CONT.HOOK [ LTOP #ltop,
                                                         XARG #index ] ],
                                     NON-LOCAL.SLASH 0-dlist ] >,  
                             COMPS #comps ], 
             LKEYS.KEYREL [ LBL #ltop,
                            ARG0 #index ] ], 
    ARG-ST < #spr . #comps > ].


; -- subcat types

a_intrans := basic-adjective-lex & 
  [ SYNSEM.LOCAL [ CAT [ HEAD.KEYS.KEY adj_rel,
                         VAL.COMPS < > ], 
                   CONT.RELS <! adj-arg1-relation !> ] ]
"""
; -- subcat types
""".  

a_trans := basic-adjective-lex & 
  [ SYNSEM.LOCAL [ CAT [ POSTHEAD +,
                         HEAD.KEYS.KEY norm_adj_rel ], 
                   CONT.RELS.LIST < adj-relation, ... > ] ]. 

a_mrkd_np := a_trans & 
  [ SYNSEM [ LOCAL [ CAT.VAL.COMPS < [ LOCAL mrkd_np_local & 
                                             [ CAT.HEAD.KEYS.KEY #ckey & selected_rel,
                                               CONT.HOOK.INDEX #arg2 ] ] >,
                     CONT [ RELS <! adj-arg12-relation !>,
                            HCONS <! !> ] ], 
             LKEYS [ KEYREL.ARG2 #arg2,
                     --COMPKEY #ckey ] ] ]. 

a_cp_prop_or_ques := a_trans &
  [ SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ MC -,
                                                   HEAD.KEYS.KEY #ckey ],
                                             CONT.HOOK.INDEX.SF prop-or-ques ] ] >,
             LKEYS.--COMPKEY #ckey ] ]. 

a_cp_question := a_cp_prop_or_ques & 
  [ SYNSEM [ LOCAL [ CAT.VAL.COMPS < [ LOCAL mrkd_cp_semi_ques_fin_local &
                                             [ CAT.HEAD.KEYS.ALT2KEY ques, 
                                               CONT.HOOK [ INDEX.SF prop, 
                                                           LTOP #larg ] ] ] >, 
                     CONT [ RELS <! adj-arg12-relation !>,
                            HCONS <! qeq & [ HARG #harg,
                                             LARG #larg ] !> ] ], 
             LKEYS.KEYREL.ARG2 #harg ] ]. 

a_cp_prop_fin := a_cp_prop_or_ques & 
  [ SYNSEM [ LOCAL [ CAT.VAL.COMPS < [ LOCAL mrkd_or_unmrkd_cp_prop_fin_local &
                                             [ CAT.HEAD.KEYS.ALT2KEY prop, 
                                               CONT.HOOK.LTOP #larg ] ] >, 
                     CONT [ RELS <! adj-arg12-relation !>,
                            HCONS <! qeq & [ HARG #harg,
                                             LARG #larg ] !> ] ], 
             LKEYS.KEYREL.ARG2 #harg ] ]. 

a_cp_prop_inf := a_cp_prop_or_ques & 
  [ SYNSEM [ LOCAL [ CAT.VAL.COMPS < [ LOCAL [ CAT.HEAD.KEYS.ALT2KEY prop, 
                                               CONT.HOOK.INDEX.SF prop ] ] > ] ] ]. 

a_mrkd_cp_prop_inf_ctrl_synsem := intersective_adjective_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL mrkd_cp_prop_inf_local & 
                                    [ CONT.HOOK.LTOP #larg ] ] >,
            CONT [ RELS <! adj-arg12-relation !>,
                   HCONS <! qeq & [ HARG #harg,
                                    LARG #larg ] !> ] ],
    LKEYS.KEYREL.ARG2 #harg ]. 

a_mrkd_cp_prop_inf_rais_synsem := basic_adjective_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL mrkd_cp_prop_inf_local & 
                                    [ CONT.HOOK.LTOP #larg ] ] >,
            CONT [ HOOK [ LTOP #ltop,
                          INDEX #arg0 ],
                   RELS <! adj-arg1-relation !>,
                   HCONS <! qeq & [ HARG #harg,
                                    LARG #larg ] !> ] ],
    LKEYS.KEYREL [ LBL #ltop,
                   ARG0 #arg0,
                   ARG1 #harg ] ]. 

; fot LRs

a_mrkd_cp_prop-or-ques_fin_synsem := intersective_adjective_synsem &
  [  LOCAL.CAT.VAL.COMPS < [ LOCAL mrkd_or_unmrkd_cp_prop_or_ques_local &
                                   [ CAT.HEAD.KEYS.ALTKEY v_event_rel,
                                     CONT.HOOK.INDEX.E [ TENSE tense,
                                                         MOOD ind_or_sub_mood ] ] ] > ]
"""
; fot LRs
""".

a_mrkd_cp_prop-or-ques_inf_synsem := intersective_adjective_synsem &
  [  LOCAL.CAT.VAL.COMPS < [ LOCAL mrkd_or_unmrkd_cp_prop_or_ques_local &
                                   [ CAT.HEAD.KEYS.ALTKEY v_event_rel,
                                     CONT.HOOK.INDEX.E [ TENSE nontense,
                                                         ASPECT no-aspect ] ] ] > ]
"""
; fot LRs
""". 


; --- Adjectival lexical entry types


aj_adv := a_intrans & non-modfied-adj-lex & norm-zero-arg &
  [ SYNSEM scopal_adjective_synsem & [ LOCAL.CAT.HEAD.PRD non-prd ] ]
  """
  --- 3.1. Adverbial adjectives (do not introduce properties, but modify a referent modifier)
  """.


aj_-_s-nprd_lex := aj_adv
  """
  --- 3.1.1. Event modifiers (they refer to objects or processes as entities which take place in
  a particular time, place and manner. They are variants of qualitative adjectives)
  a)- Circunstanciales (temporal, locative, manner)
  e.g. próximo año/año próximo, cercana casa/casa cercana, mirada dulce/dulce mirada
  b)- Aspectual (modify event or result nouns, and nouns refering to states or relations)
  e.g. periódicas revisiones, largo adiós, esporádicas crisis
  """.


aj_-_s-mismo_lex := a_intrans & non-modfied-adj-lex & norm-zero-arg &
  [ SYNSEM non-agr_basic_adjective_synsem & [ LOCAL [ CAT [ POSTHEAD +,
                                                            HEAD [ PRD non-prd,
                                                                   MOD < [ LOCAL scopal-mod & [ CAT [ HEAD noun,
                                                                                                      VAL.SPR < > ],
                                                                                                CONT.HOOK [ LTOP #larg,
                                                                                                            INDEX #index & [ PRONTYPE real_pron ] ] ] ] > ] ],
                                                      CONT [ HOOK.INDEX #index,
                                                             HCONS <! qeq & [ HARG #harg,
                                                                              LARG #larg ] !> ] ],
                                              LKEYS.KEYREL.ARG1 #harg ] ]
  """
  
  """.


aj_-_s-nprd-prh_lex := aj_adv &
  [ SYNSEM.LOCAL.CAT.POSTHEAD - ]
  """
  --- 3.1.2. Intentional (indicate the way a given concept applies to a given referent)
  a)- Modal: e.g. el presunto asesino, un posible acuerdo, un falso amigo
  b)- Restrictive: e.g. el mero hecho, la verdadera razón
  """.


aj_rel := non-modfied-adj-lex &
  [ SYNSEM intersective_adjective_synsem & [ LOCAL.CAT.POSTHEAD + ] ]
  """
  --- 3.2. Relational adjectives  (they express a set of properties)
  - not graduable but may co-occur with focalizing adverbs (e.g. viaje específicamente/sólo turístico)
  - by default intersective
  - always in post-nominal position (except those ones that are recategorized as calificative adjectives).
  - the noun and the relational adjectives which follow it form a compact unit, they cannot be intercalated
  among them or with calificative adjectives (eg. magnífica actuación policial/actuación
  policial magnífica/*actuación policial magnífica), neither with modals nor with adverbials (el posible
  avance normando/*el avance posible normando) or possessives (un recurso administrativo suyo/*un
  recurso suyo administrativo), or "alguno" (no tengo reloj eléctrico alguno/*reloj alguno
  eléctrico), or PPs (eg. la producción industrial de Francia/*la producción de Francia
  industrial), or when N+PP form a semi-compound (eg. tren francés de alta velocidad/?tren
  de alta velocidad francés), but they admit pronouns, eg. la sociedad industrial y la cibernética
  """.


aj_-_i-nspd_lex := aj_rel & a_intrans & norm-zero-arg &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRD.COPV ser,
                   CONT.HCONS <! !> ] ]
  """
  --- 3.2.1. Predicative relational adjectives
  Classifying predicates that co-occur with concrete or abstract nouns.
  e.g. la revista mensual / la revista es mensual
  """.


aj_-_i-nprd_lex := aj_rel & a_intrans & norm-zero-arg &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRD non-prd,
                   CONT.HCONS <! !> ] ]
  """
  --- 3.2.2. Non-predicative relational intransitive
  they mostly go with deverbal nouns, but only result nominalizations, and describe the arguments of the noun
  e.g. la actuación policial / *la actuación fue policial
  """.


aj_pp_i-nprd_lex := aj_rel & a_mrkd_np & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD non-prd,
                       VAL.COMPS < [ OPT - ] > ] ]
  """
  --- 3.2.3. Non-predicative relational transitive adjectives
  e.g. consistente en
  """.


aj_cp_p-i-nprd_lex := aj_rel & a_cp_prop_fin & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD non-prd,
                       VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD.KEYS.KEY selected_rel ] > ] ]
  """
  --- for "referente a" and "consistente en", e.g. "una visión de negocio consistente en estar alerta/
  que estén alerta/cómo se ha ejercido..."
  """.


aj_cp_q-i-nprd_lex := aj_rel & a_cp_question & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD non-prd,
                       VAL.COMPS < [ OPT - ] > ] ]
  """
  
  """.


a_qual := modfied-adj-lex &
  [ SYNSEM basic_adjective_synsem & [ LOCAL.CAT [ HEAD.PRD prd,
                                                  VAL.SPR < [ LOCAL.CAT.HEAD.KEYS.KEY degree_rel ] > ] ] ]
  """
  --- 3.3. Qualitative Adjectives (express a single property)
  - they are predicative and gradable
  """.


aj_qual_intr := a_qual & a_intrans & basic-one-arg &
  [ SYNSEM.LOCAL.CONT.HCONS <! !> ]
  """
  --- 3.3.1. Qualitative intransitive adjectives
  """.


aj_-_s_lex := aj_qual_intr &
  [ SYNSEM intersective_adjective_synsem ]
  """
  a)- scopal qualitative intransitive adjectives (co-ocurring with ser and estar
  and pre/post-nominal (adjectives of evaluation, physical dimension, velocity, age, physical
  properties (weight, consistency, taste, touch, smell, temperature, sonority))
  e.g. ésto es/está alto, dulce sabor/sabor dulce
  !!! problem in predicative constructions
  """.


aj_-_i_lex := aj_qual_intr &
  [ SYNSEM intersective_adjective_synsem ]
  """
  b)- intersective qualitative intransitive adjectives co-ocurring with ser (though
  we could also find them with estar), and pre/post-nominal (adjectives of colour, shape,
  aptitudes and human (pre)dispositions)
  e.g. el cielo es/está azul, ojos negros/negros ojos
  """.


aj_-_i-psth_lex := aj_qual_intr &
  [ SYNSEM intersective_adjective_synsem & [ LOCAL.CAT.POSTHEAD + ] ]
  """
  c)- intersective qualitative intransitive adjectives co-occurring with 'ser'
  (though we could also find them with estar), and post-nominal (aptitude and human
  (pre)disposition adjectives
  e.g.
  """.


aj_-_i-e_lex := aj_qual_intr &
  [ SYNSEM intersective_adjective_synsem & [ LOCAL.CAT [ POSTHEAD +,
                                                         HEAD.PRD.COPV estar ] ] ]
  """
  d)- intersective qualitative intransitive adjectives, co-occurring with 'estar'
  and post-nominal (adjectives derived from participles and adjectival participles)
  e.g. está seco, maduro, abierto lleno (un vaso lleno/*un lleno vaso)
  """.


a_qual_trans := a_qual & basic-two-arg &
  [ SYNSEM intersective_adjective_synsem ]
  """
  --- 3.3.2. Qualitative transitive adjectives
  """.


aj_pp_i_lex := a_qual_trans & a_mrkd_np &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD +,
                       VAL.COMPS < [ OPT - ] > ] ]
  """
  --- 3.3.2.1. Qualitative transitive adjectives taking marked NPs
  they can have dative clitics which alter with the complements with the preposition
  "para" ("for")(e.g. le es útil/es útil para él)
  e.g. es/está muy atento con sus compañeros
  """.


aj_pp*_i_lex := a_qual_trans & a_mrkd_np &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ OPT + ] > ]
  """
  e.g. es/está muy vulnerable (a todo)
  """.


aj_pp_i-e_lex := a_qual_trans & a_mrkd_np &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD +,
                       HEAD.PRD.COPV estar,
                       VAL.COMPS < [ OPT - ] > ] ]
  """
  e.g. está/*es atento a las notícias
  """.


aj_pp*_i-e_lex := a_qual_trans & a_mrkd_np &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD +,
                       HEAD.PRD.COPV estar,
                       VAL.COMPS < [ OPT + ] > ] ]
  """
  e.g. estoy/*soy harto (de tí)
  """.


aj_cp_p-i-s_lex := a_qual_trans & a_cp_prop_fin &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD.COPV ser,
                       VAL.COMPS < [ OPT - ] > ] ]
  """
  --- 3.3.2.2. Qualitative transitive adjectives taking finite completive clauses/free infinitives
  e.g. es partidaria (de) que legalizen la droga/de legalizar la droga
  """.


aj_cp_p-i-e_lex := a_qual_trans & a_cp_prop_fin &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD.COPV estar,
                       VAL.COMPS < [ OPT - ] > ] ]
  """
  e.g. estoy segura (de) que vendrá/de cambiarlo
  """.


aj_q_i-s_lex := a_qual_trans & a_cp_question &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD.COPV ser,
                       VAL.COMPS < [ OPT - ] > ] ]
  """
  --- 3.3.2.3. Qualitative transitive adjectives taking interrogative clauses (finite & infinitival)
  e.g. es muy revelador de cómo actuan
  """.


aj_q_i-e_lex := a_qual_trans & a_cp_question &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD +,
                       HEAD.PRD.COPV estar,
                       VAL.COMPS < [ OPT - ] > ] ]
  """
  e.g. no estoy muy seguro de cuándo/de si vendrá/ir
  """.


aj_vp_sr-i-s_lex := a_qual & a_cp_prop_inf & basic-two-arg &
  [ SYNSEM a_mrkd_cp_prop_inf_rais_synsem & [ LOCAL [ CAT [ POSTHEAD +,
                                                            HEAD.PRD.COPV ser,
                                                            VAL.COMPS < [ OPT -,
                                                                          LOCAL.CONT.HOOK.XARG #ctrl,
                                                                          NON-LOCAL.SLASH 0-dlist ] > ],
                                                      CONT.HOOK.XARG #ctrl & ref-ind ] ] ]
  """
  -- 3.4. Subject Raising Adjectives
  - post-nominal, co-occurring with 'ser', optional complement
  e.g. soy muy libre de pensarlo
  """.


aj_sctrl := a_qual & a_cp_prop_inf & basic-two-arg &
  [ SYNSEM a_mrkd_cp_prop_inf_ctrl_synsem & [ LOCAL [ CAT [ POSTHEAD +,
                                                            VAL.COMPS < [ LOCAL.CONT.HOOK.XARG #ctrl,
                                                                          NON-LOCAL.SLASH 0-dlist ] > ],
                                                      CONT.HOOK.XARG #ctrl & ref-ind ] ] ]
  """
  --- 3.5. Subject Control Adjectives
  """.


aj_vp_sc-i-s_lex := aj_sctrl &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD.COPV ser,
                       VAL.COMPS < [ OPT - ] > ] ]
  """
  e.g. aficionado a (es aficionado (a jugar a tenis)), capaz de (no soy capaz (de hacerlo))
  """.


aj_vp_sc-i-e_lex := aj_sctrl &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD.COPV estar,
                       VAL.COMPS < [ OPT - ] > ] ]
  """
  e.g. dispuesto a (no estoy dispuesto a venderlo), seguro de (no estoy seguro (de poder hacerlo))
  """.


aj_vp_or-i-s_lex := a_qual & a_cp_prop_inf & o_rais-two-arg &
  [ SYNSEM a_mrkd_cp_prop_inf_rais_synsem & [ LOCAL [ CAT [ POSTHEAD +,
                                                            HEAD [ PRD.COPV ser,
                                                                   MOD #mod ],
                                                            VAL.COMPS < [ OPT -,
                                                                          NON-LOCAL.SLASH <! np_acc_local & [ CAT.HEAD.MOD #mod,
                                                                                                              CONT.HOOK.INDEX #ctrl ] !> ] > ],
                                                      CONT.HOOK.XARG #ctrl & ref-ind ] ] ]
  """
  --- 3.6. Object Raising Adjectives
   - pre/post-nominal, co-occurring with 'ser', optional complement (PPde)
   e.g. difícil de (el violín es muy difícil (de tocar))
  """.


aj_vp_oc-i-s_lex := non-modfied-adj-lex & a_cp_prop_inf & o_rais-one-arg &
  [ SYNSEM a_mrkd_cp_prop_inf_ctrl_synsem & [ LOCAL [ CAT [ POSTHEAD +,
                                                            HEAD.PRD.COPV estar,
                                                            VAL.COMPS < [ OPT -,
                                                                          NON-LOCAL.SLASH <! np_acc_local & [ CONT.HOOK.INDEX #ctrl ] !> ] > ],
                                                      CONT.HOOK.XARG #ctrl & ref-ind ] ] ]
  """
  --- 3.7. Object Control Adjectives
  - post-nominal, co-occurring with 'estar', complement (PPde)
  e.g. pendiente (el contrato está (*muy) pendiente (de firmar/ser firmado/firma)))!!!
  """.


compar-adj-lex := basic-adjective-lex & basic-two-arg &
  [ SYNSEM intersective_adjective_synsem & [ LOCAL [ CAT [ POSTHEAD -,
                                                           HEAD [ PRD prd,
                                                                  KEYS.ALTKEY compar,
                                                                  MOD < [ LOCAL.CAT.VAL.SPR < [ LOCAL.CAT.HEAD.KEYS.KEY quant_rel ] > ] > ],
                                                           VAL [ SPR < #spr & [ OPT +,
                                                                                LOCAL [ CAT [ MC na,
                                                                                              HEAD adv & [ KEYS.KEY degree_rel ],
                                                                                              VAL.COMPS < > ],
                                                                                        CONT.HOOK [ LTOP #hand,
                                                                                                    XARG #altarg0 ] ],
                                                                                NON-LOCAL.SLASH 0-dlist ] >,
                                                                 COMPS #comps & < [ LOCAL local & [ CAT [ HEAD adp & [ PRD non-prd,
                                                                                                                       MOD < >,
                                                                                                                       KEYS.KEY #ckey & selected_rel ],
                                                                                                          VAL [ SUBJ < >,
                                                                                                                COMPS < > ] ],
                                                                                                    CONT.HOOK.INDEX #arg2 ] ] > ] ],
                                                     CONT [ RELS <! adj-arg1-relation & [ LBL #hand,
                                                                                          ARG0 #arg0 ],
                                                                    #altkey & [ PRED compar,
                                                                                LBL #hand,
                                                                                ARG0 #altarg0,
                                                                                ARG1 #arg0,
                                                                                ARG2 #arg2 ] !>,
                                                            HCONS <! !> ] ],
                                             LKEYS [ ALTKEYREL #altkey,
                                                     --COMPKEY #ckey ] ],
    ARG-ST < #spr . #comps > ]
  """
  --- 3.8. Comparative Adjectives
  """.


aj_pp_i-cmp_lex := compar-adj-lex &
  [ SYNSEM [ LOCAL.CAT.HEAD.KEYS.KEY adj_rel,
             LKEYS.--COMPKEY _que_p_comp_rel ] ]
  """
  a)- (mucho/bastante/...) mejor, peor, mayor, menor + que
  """.


aj_pp_i-cmp-altp_lex := compar-adj-lex &
  [ SYNSEM [ LOCAL.CAT.HEAD.KEYS.KEY adj_rel,
             LKEYS.--COMPKEY que_or_a_p_comp_rel ] ]
  """
  b)- (mucho/bastante/...) igual, anterior, posterior, inferior, superior + que/a
  """.


aj_pp_i-cmp-menos_lex := compar-adj-lex &
  [ SYNSEM [ LOCAL.CAT [ HEAD.KEYS.KEY compar_adj_rel,
                         VAL.COMPS < [ OPT + ] > ],
             LKEYS.--COMPKEY _de_p_sel_rel ] ]
  """
  c)- (mucho/poco/bastante) + MÁS/MENOS + 'de' + Number
  e.g. más/menos de tres chicos
  """.


aj_pp_i-cmp-mas_lex := compar-adj-lex &
  [ SYNSEM [ LOCAL.CAT [ HEAD.KEYS.KEY compar_adj_rel,
                         VAL.COMPS < [ OPT + ] > ],
             LKEYS.--COMPKEY _de_p_sel_rel ] ]
  """
  
  """.


aj_pp_i-sup_lex := non-modfied-adj-lex & basic-one-arg &
  [ SYNSEM intersective_adjective_synsem & [ LOCAL [ CAT [ HEAD [ PRD prd,
                                                                  KEYS.ALTKEY superl,
                                                                  MOD < [ LOCAL.CAT.VAL.SPR < [ LOCAL.CAT.HEAD.KEYS.KEY def_q_rel ] > ] > ],
                                                           VAL.COMPS #comps & < [ LOCAL mrkd_np_local & [ CAT.HEAD.KEYS.KEY #ckey & _de_p_sel_rel ] ] > ],
                                                     CONT [ RELS <! adj-arg1-relation & [ LBL #hand,
                                                                                          ARG0 #arg0 ],
                                                                    #altkey & [ PRED superl,
                                                                                LBL #hand,
                                                                                ARG0 event,
                                                                                ARG1 #arg0 ] !>,
                                                            HCONS <! !> ] ],
                                             LKEYS [ ALTKEYREL #altkey,
                                                     --COMPKEY #ckey ] ],
    ARG-ST #comps ]
  """
  --- 3.9. Superlative Adjectives (mejor, peor, mayor, menor)
  """.


aj_-_i-poss_lex := aj_qual_intr &
  [ SYNSEM intersective_adjective_synsem & [ LOCAL.CAT [ HEAD.KEYS.KEY poss_adj_rel,
                                                         POSTHEAD + ] ] ]
  """
  --- 3.10. Possessives: when they follow the noun, they are modifiers
  and they require the def. article or the demonstrative
  e.g. la/esa canción tuya me gustó
  """.



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- 4. Adverbs 

basic-adverb-lex := lex-item & 
  [ INFLECTED -,
    ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ],
    SYNSEM [ PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             MODIFIED notmod,
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     CAT [ HEAD adv,
                           VAL [ SUBJ < >,
                                 CLTS < > ] ] ] ] ].
 
spec-adverb-lex := basic-adverb-lex & 
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr >, 
                           COMPS #comps ], 
    ARG-ST < #spr . #comps > ].

nonspec-adverb-lex := basic-adverb-lex & 
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >, 
                           COMPS #comps ], 
    ARG-ST #comps ].

basic_adverb_synsem := lex-synsem &
  [ LOCAL [ CAT [ MC #mc,
                  HEAD adv &
		       [ MOD < canonical-synsem & 
                               [ LOCAL [ COORD -,
                                         CAT.MC #mc,
                                         CONT.HOOK.XARG #xarg ] ] >,
                         KEYS.KEY basic_adv_rel,
                         CASE none ] ],
	    CONT [ HOOK.XARG #xarg,
		   RELS.LIST < #key, ... > ] ],
    NON-LOCAL [ SLASH 0-dlist,
                REL 0-dlist,
                QUE 0-dlist ],
    LKEYS.KEYREL #key & adv-relation ].

basic_spec_adverb_synsem := basic_adverb_synsem &
  [ LOCAL.CAT.VAL.SPR < synsem & 
		        [ LOCAL local-min &
			        [ CAT [ MC na,
                                        VAL.SUBJ < > ],
                                  CONT.HOOK [ LTOP #hand,
                                              XARG #arg0 ] ],
                          NON-LOCAL.QUE 0-dlist ] >,
    LKEYS.KEYREL [ LBL #hand,
                   ARG0 #arg0 ] ].

spec_adverb_synsem := basic_spec_adverb_synsem &
  [ LOCAL.CAT.VAL.SPR < [ LOCAL.CAT.HEAD adv & [ KEYS.KEY degree_rel ] ] > ].


basic_int_adverb_synsem := basic_adverb_synsem & 
  [ LOCAL [ CAT [ HEAD [ KEYS.KEY adv_rel,
                         MOD < [ LOCAL intersective-mod & 
                                       [ CONT.HOOK.INDEX #index ],
                                 NON-LOCAL.REL 0-dlist ] > ],
                  VAL.COMPS < > ],
	    CONT.HOOK [ LTOP #hand,
                        INDEX #arg0 ] ],
    LKEYS.KEYREL [ LBL #hand,
                   ARG0 #arg0,
                   ARG1 #index ] ].

intersect_spec_adverb_synsem := basic_int_adverb_synsem & basic_spec_adverb_synsem & 
  [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] > ].

basic_intersect_adverb_synsem := intersect_spec_adverb_synsem.

intersect_adverb_synsem := basic_intersect_adverb_synsem &
  [ LOCAL [ CAT.VAL.SPR < [ LOCAL.CAT.HEAD adv &
                                           [ KEYS.KEY degree_rel ] ] >,
            CONT [ RELS <! relation !>,
                   HCONS <! !> ] ] ].

intersect_vp_adverb_synsem := intersect_adverb_synsem.

nonspec_intersect_s_adverb_synsem := basic_int_adverb_synsem &
  [ LOCAL [ CAT.HEAD [ MOD < [ LOCAL.CAT.HEAD verb ] >, 
                       KEYS.KEY adv_rel ],
            CONT [ RELS <! relation !>,
                   HCONS <! !> ] ],
    LKEYS.KEYREL adv-relation ].
;                       MOD < [ LOCAL.CAT.VAL [ SUBJ < >, 
;                                               COMPS < > ] ] > ],

nonspec_intersect_vp_adverb_synsem := basic_int_adverb_synsem &
  [ LOCAL [ CAT.HEAD [ MOD < [ LOCAL.CAT.HEAD verb ] >, 
                       KEYS.KEY adv_rel ],
            CONT [ RELS <! relation !>,
                   HCONS <! !> ] ],
    LKEYS.KEYREL adv-relation ].


basic_scopal_adverb_synsem := basic_adverb_synsem &
  [ LOCAL [ CAT [ HEAD [ PRD non-prd,
                         MOD < [ LOCAL scopal-mod &
			    	       [ COORD -,
                                         CONT.HOOK [ LTOP #mhand,
                                                     INDEX #index ] ] ] > ],
                  VAL.COMPS < > ],
	    CONT [ HOOK [ LTOP #ltop,
                          INDEX #index ],
                   RELS <! relation !>,
                   HCONS <! qeq &
                            [ HARG #hand,
                              LARG #mhand ] !> ] ],
    LKEYS.KEYREL [ LBL #ltop,
                   ARG1 #hand & handle ] ].

scopal_spec_adverb_synsem := basic_scopal_adverb_synsem & spec_adverb_synsem.

scopal_adverb_synsem := scopal_spec_adverb_synsem.

scopal_xp_adverb_synsem := scopal_adverb_synsem &
  [ LOCAL.CAT.HEAD.KEYS.KEY basic_adv_rel,
    LKEYS.KEYREL adv-relation ].

nonspec_scopal_xp_adverb_synsem := basic_scopal_adverb_synsem &
  [ LOCAL.CAT.HEAD.KEYS.KEY basic_adv_rel,
    LKEYS.KEYREL adv-relation ].


; --- 4.1. Scopal adverbs

;--- 4.1.1. focus adverbs

av_-_s_lex := nonspec-adverb-lex & norm-zero-arg &
  [ SYNSEM nonspec_scopal_xp_adverb_synsem &
           [ LOCAL.CAT [ POSTHEAD -,
                         HEAD.MOD < [ LOCAL.CAT [ HEAD +nvjrp,
                                                  VAL.COMPS < > ],
                                      NON-LOCAL.REL 0-dlist ] > ] ] ]
"""
; --- 4.1. Scopal adverbs
;--- 4.1.1. focus adverbs
; e.g. especialmente bajo la escalera/aquí/simpático/estos chicos
""".


av_-_s-spd_lex := spec-adverb-lex & basic-one-arg & 
  [ SYNSEM scopal_xp_adverb_synsem &
           [ LOCAL.CAT [ POSTHEAD -,
                         HEAD.MOD < [ LOCAL.CAT [ HEAD +nvjrp,
                                                  VAL.COMPS < > ] ] > ] ] ]
"""
; --- 4.1. Scopal adverbs
;--- 4.1.1. focus adverbs
; e.g. Los Colegios deben velar muy especialmente por el cumplimiento de estas normas.
""".

; e.g. mañana/en la mesa mismo; *mismo mañana/en la mesa
av_-_s-psth_lex := nonspec-adverb-lex & norm-zero-arg &
  [ SYNSEM nonspec_scopal_xp_adverb_synsem & 
           [ LOCAL.CAT [ POSTHEAD +,
                         HEAD.MOD < [ LOCAL.CAT.HEAD +vjrp ] > ] ] ]
"""
; --- 4.1. Scopal adverbs
;--- 4.1.1. focus adverbs
; e.g. mañana/en la mesa mismo; *mismo mañana/en la mesa
""".

av_-_s-psth-n_lex := nonspec-adverb-lex & norm-zero-arg &
  [ SYNSEM nonspec_scopal_xp_adverb_synsem & 
           [ LOCAL.CAT [ POSTHEAD +,
                         HEAD.MOD < [ LOCAL [ CAT [ LASTNMOD -,
                                                    HEAD noun,
                                                    VAL.SPR < > ] ] ] > ] ] ]
"""
; --- 4.1. Scopal adverbs
;--- 4.1.1. focus adverbs
; e.g. e.g. también
"""
.

; --- 4.1.2. modal adverbs

; --- verb modifiers

av_-_s-vm_lex := nonspec-adverb-lex & norm-zero-arg &
  [ SYNSEM nonspec_scopal_xp_adverb_synsem & 
           [ LOCAL.CAT.HEAD [ PRD non-prd,
                              MOD < [ LOCAL.CAT.HEAD verb ] > ] ] ]
"""
; --- 4.1.2. modal adverbs
; --- verb modifiers
; e.g. (*muy) quizás yo venga mañana
""".

av_-_s-vm-spd_lex := spec-adverb-lex & basic-one-arg &
  [ SYNSEM scopal_xp_adverb_synsem & 
          [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] > ] ]
"""
; --- 4.1.2. modal adverbs
; --- verb modifiers
; e.g. (muy) probablemente iremos al cine
""".

; --- non-verb modifiers

av_-_s-xm_lex := nonspec-adverb-lex & norm-zero-arg &
  [ SYNSEM nonspec_scopal_xp_adverb_synsem & 
           [ LOCAL.CAT.HEAD [ PRD non-prd,
                              MOD < [ LOCAL.CAT [ HEAD +njrp,
                                                  VAL.COMPS < > ] ] > ] ] ]
"""
; --- non-verb modifiers
; e.g. (*muy) quizás yo
""".

; e.g. (muy) probablemente yo
av_-_s-xm-spd_lex := spec-adverb-lex & basic-one-arg &
  [ SYNSEM scopal_xp_adverb_synsem & 
          [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD +njrp,
                                               VAL.COMPS < > ] ] > ] ]
"""
; --- non-verb modifiers
; e.g. (*muy) quizás yo
""".


; --- 4.2. Intersective adverbs

; --- 4.2.1. S modifiers 

av_-_i-sm_lex := nonspec-adverb-lex & norm-zero-arg &
  [ SYNSEM nonspec_intersect_s_adverb_synsem & 
           [ local.cat.posthead - ] ]
"""
; --- 4.2. Intersective adverbs

; --- 4.2.1. S modifiers (davant subject o parentetics -entre comes
; --- que no sempre apareixen- en qualsevol posició)
; e.g. 
""".


; --- 4.2.2. VP modifiers (any position after the verb)

av_-_i-vm_lex := nonspec-adverb-lex & norm-zero-arg &
  [ synsem nonspec_intersect_vp_adverb_synsem & 
           [ local.cat.posthead + ] ]
"""
; --- 4.2.2. VP modifiers (any position after the verb)
; e.g. (*muy) mortalmente

""".

av_-_i-vm-spd_lex := spec-adverb-lex & basic-one-arg &
  [ synsem intersect_vp_adverb_synsem & 
           [ local.cat.posthead + ] ]
"""
; --- 4.2.2. VP modifiers (any position after the verb)
; e.g. (muy) negativamente

""".

av_-_i-vm-ppart_lex := nonspec-adverb-lex & norm-zero-arg &
  [ synsem nonspec_intersect_vp_adverb_synsem & 
           [ local.cat [ posthead -,
                         head [ keys.key adv_rel,
                                mod < [ local.cat [ head.vform part,
                                                    val.subj < [ ] > ] ] > ] ] ] ]
"""
; --- 4.2.2. VP modifiers (any position after the verb)
; e.g. (*muy) recien llegados

""".


; --- 4.3. degree adverbs (modify adverbs/adjectives (& pastparts))

basic_degree_spec_synsem := canonical-synsem &
  [ local local &
          [ cat [ head adv & [ prd non-prd,
                               mod < > ],
                  val.subj < > ] ] ]
"""
; --- 4.3. degree adverbs (modify adverbs/adjectives (& pastparts))
; !!! missing: así de tonto, igual de extraño, cómo de pequeño (interrogativo); qué (exclamativo); 
; doblemente bueno; (*muy) cortés hasta la adulación; (*muy) fiel a sus ideas hasta la muerte 
""".

basic_lex_degree_spec_synsem := basic_degree_spec_synsem & lex-synsem &
  [ local [ cont [ hook.index #index,
                   rels.list.first #keyrel & [ arg0 #index ] ] ],
    lkeys.keyrel #keyrel ].

lex_degree_spec_synsem := basic_lex_degree_spec_synsem &
  [ local [ cat.head.keys.key degree_rel,
            cont [ hook [ ltop #ltop,
                          index.e [ tense nontense,
                                    aspect no-aspect ],
                          xarg #xarg ],
                   rels.list.first [ lbl #ltop,
                                     arg1 #xarg ] ] ] ].

basic_comp_degree_spec_synsem := lex_degree_spec_synsem & 
  [ local [ cat [ mc na,
                  head.keys.key comp_degree_rel,
                  val [ spec < [ local [ cat.val.comps < >,
                                         cont.hook.ltop #ltop ] ] >,
                        spr < [ local local-min &
                                      [ cat [ head adv,
                                              val.spr < > ],
                                        cont.hook [ ltop #ltop,
                                                    xarg #arg0 ] ],
                                non-local.que 0-dlist ] >,
;                        comps < [ local mrkd_np_local &
;                                        [ cat.head.keys.key #ckey,  
;                                          cont.hook.index #arg2 ] ] > ] ],
                         comps < [ local local &
                                         [ cat [ head adp & 
                                                      [ prd non-prd,
                                                        mod < >,
                                                        keys.key #ckey & selected_rel ], 
                                                 val [ subj < >,
                                                       comps < > ] ], 
                                           cont.hook.index #arg2 ] ] > ] ],
            cont [ hook.ltop #ltop,
                   rels <! [ arg0 #arg0 & event,
                             arg2 #arg2 ] !> ] ],
             lkeys.--compkey #ckey,
    non-local [ slash 0-dlist,
                rel 0-dlist,
                que 0-dlist ] ].

basic_sup_degree_spec_synsem := lex_degree_spec_synsem & 
  [ local [ cat [ mc na,
                  head.keys.key comp_degree_rel,
                  val [ spec < [ local [ cat.val.comps < >,
                                         cont.hook.ltop #ltop ] ] >,
                        comps < [ local mrkd_np_local &
                                        [ cat.head.keys.key #ckey ] ] > ] ],
            cont [ hook.ltop #ltop,
                   rels <! relation !> ] ],
             lkeys.--compkey #ckey,
    non-local [ slash 0-dlist,
                rel 0-dlist,
                que 0-dlist ] ].

basic_degree_spec_lex := norm-hook-lex &
  [ inflected -,
    synsem basic_lex_degree_spec_synsem &
           [ punct [ lpunct no_punct,
                     rpunct no_punct ],
             modified notmod,
             local [ coord -,
                     coord-strat zero,
                     cat [ mc na,
                           hc-light -,
                           val.spec < [ ] > ], 
                     cont.rels.list < #key, ... > ],
             non-local [ slash 0-dlist,
                         rel 0-dlist ],
             lkeys.keyrel #key ] ].

degree_spec_lex := basic_degree_spec_lex & 
  [ synsem [ local [ cat.val [ spr < >,
                               comps < > ],
                     cont [ rels <! degree-relation !>,
                            hcons <! !> ] ],
             non-local.que 0-dlist ] ].

spec_degree_spec_lex := basic_degree_spec_lex & 
  [ synsem [ local [ cat.val [ comps < >,
                               spr #spr & 
                                   < [ local local-min &
                                             [ cat [ head adv &
                                                          [ keys.key degree_rel ],
                                                     val.spr < > ],
                                               cont.hook [ ltop #khand,
                                                           xarg #spind ] ],
                                       non-local.que 0-dlist ] > ],
                    cont.rels <! [ lbl #khand,
                                   arg0 #spind ] !> ] ],
    arg-st #spr ].


; --- 4.3.1. quant degree adverbs

av_-_dg-qnt_lex := degree_spec_lex & norm-zero-arg &
  [ synsem lex_degree_spec_synsem &
           [ local [ cat [ posthead -,
                           head.keys.key quant_degree_rel,
                           val.spec < [ local.cat.head +nvjr ] > ] ] ] ]
"""
; --- 4.3.1. quant degree adverbs
; modify adverbs, adjectives, pastparts, and quant. pronom adverbs (e.g. mucho más)
; - mucho, bien, algo, bastante, demasiado, super, nada, medio: can't co-occur with "muy" 
; - un poco, un tanto: can't co-occur with any degree adverb
""".

av_-_dg-muy-and-casi_lex := degree_spec_lex & norm-zero-arg &
  [ synsem lex_degree_spec_synsem &
           [ local.cat [ posthead -,
                         val.spec < [ local.cat [ head +vjrpd,
                                                  val.comps < > ] ] > ] ] ]
"""
; - for 'casi' and 'muy', which may specify determiners; e.g. muy pocos/casi todos los chicos lloran
; and also modify adverbs, adjectives, pastparts, and pps
; also for tan (tan metafísicamente imposible)
""".

av_-_dg-casi_lex := degree_spec_lex & norm-zero-arg &
  [ synsem lex_degree_spec_synsem &
           [ local.cat [ posthead -,
                         val.spec < [ local [ agr.prontype real_pron,
                                              cat [ head noun,
                                                    val [ comps < >,
                                                          spr < [ local.cat.head.keys.key _casi_x_deg_rel ] > ] ] ] ] > ] ] ]
"""
; - for 'casi', which may specify pronouns; e.g. casi nadie/nada/ninguno
""".

;av_-_dg-un-tanto_lex := basic_degree_spec_lex & basic-one-arg &
;  [ synsem lex_degree_spec_synsem &
;           [ local.cat [ posthead -,
;                         head.keys.key tanto_degree_rel,
;                         val [ comps < >,
;                               spec < [ local.cat.head +jr ] >,
;                               spr #spr & 
;                                   < [ opt -, 
;                                       local.cat.head.keys.key art_indef_q_rel ] > ] ] ],
;    arg-st #spr ].

; --- 4.3.2. degree adverbs (ending in '-mente')

av_-_dg_lex := spec_degree_spec_lex & basic-one-arg & 
  [ synsem lex_degree_spec_synsem &
           [ local.cat [ posthead -,
                         head.keys.key non-quant_degree_rel,
                         val [ spec < [ local.cat.head +vjr ] > ] ] ] ]
"""
; --- 4.3.2. degree adverbs (ending in '-mente')
; modify adjectives, adverbs and pastparts: they may have a degree adverbs "tan metafísicamente imposible"
""".


; --- 4.3.3. comparative degree adverbs

comp_degree_spec_lex := basic_degree_spec_lex & basic-two-arg &
  [ synsem basic_comp_degree_spec_synsem &
           [ local [ cat [ posthead -,
                           val [ spec < [ local.cat.head +vjr ] >,
                                 spr < #spr >,
                                 comps #comps ] ],
                     cont [ rels <! arg12-relation !>,
                            hcons <! !> ] ] ], 
    arg-st < #spr . #comps > ]
"""
; --- 4.3.3. comparative degree adverbs
""".

av_-_dg-cmp_lex := comp_degree_spec_lex &
  [ synsem [ local.cat.val.spr < [ local.cat.head.keys.key basic_quant_degree_rel ] >,
             lkeys.--compkey _que_p_comp_rel ] ]
"""
; --- 4.3.3. comparative degree adverbs
; e.g. (mucho/poco/bastante) más/menos guapo que 
""".

; e.g. (casi) tan guapo como
av_-_dg-cmp-eq_lex := comp_degree_spec_lex &
  [ synsem [ local.cat.val.spr < [ local.cat.head.keys.key _casi_x_deg_rel ] >,
             lkeys.--compkey _como_p_comp_rel ] ]
"""
; --- 4.3.3. comparative degree adverbs
; e.g. (casi) tan guapo como
""".


; --- 4.3.5. Superlative degree adverbs

av_-_dg-sup_lex := basic_degree_spec_lex & basic-one-arg &
  [ SYNSEM basic_sup_degree_spec_synsem &
           [ LOCAL [ CAT [ POSTHEAD -,
                           VAL [ SPEC < [ LOCAL.CAT.HEAD +vj ] >,
                                 COMPS #comps ] ],
                     CONT [ RELS <! arg1-relation !>,
                            HCONS <! !> ] ], 
             LKEYS [ KEYREL.PRED superl,
                     --COMPKEY _de_p_sel_rel ] ],
    ARG-ST #comps ]
"""
; --- 4.3.5. Superlative degree adverbs
; e.g. la más/menos guapa de 
""".


; --- 4.4. Ordinal adverbs
; e.g. (mucho) antes morir que ofender; antes X que Y; X antes que Y



; --- 4.4. Pronominal adverbs

basic_np_adv_synsem := lex-synsem & 
  [ LOCAL [ AGR #ind,
            CAT [ HC-LIGHT -,
                  HEAD noun & 
                       [ CASE none,
                         KEYS keys_norm & 
                            [ KEY #keypred,
                              ALTKEY def_explicit_q_rel ] ],
                  VAL [ SPEC < >,
                        COMPS < > ] ],
            CONT [ HOOK [ INDEX #ind & ref-ind,
                          LTOP #ltop ],
                   HCONS <! qeq & [ HARG #rhand,
                                    LARG #ltop ] !>,
                   RELS.LIST < #key & noun-relation & 
                               [ LBL #ltop,
                                 PRED basic_nom_rel & #keypred,
                                 ARG0 #ind ],
                               #altkey & 
                               [ PRED implicit_q_rel,
                                 ARG0 #ind,
                                 RSTR #rhand ],... > ] ],
    LKEYS [ KEYREL #key,
            ALTKEYREL #altkey ] ].

pron_adverb_synsem := basic_np_adv_synsem & 
  [ LOCAL.CONT [ HOOK [ INDEX #ind,
                        LTOP #ltop ],
                 RELS <! relation, relation, #alt2key & 
                                             [ LBL #ltop,
                                               ARG1 #ind ]!> ],
    LKEYS.ALT2KEYREL #alt2key & [ LBL #ltop ] ].

quant_pron_adverb_synsem := pron_adverb_synsem &
  [ LOCAL [ CAT.HEAD.KEYS.KEY quant_n_rel,
            CONT.HOOK.INDEX.SORT mod ] ].


; --- 4.4.1. Quant pronominal adverbs

av_-_pr-mucho_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & 
           [ LOCAL [ CAT.VAL.SPR < >,
                     CONT.HOOK.INDEX.PNG.PN 3sg ],
             LKEYS.ALT2KEYREL.PRED "_mucho_x_rel" ] ]
"""
; --- 4.4.1. Quant pronominal adverbs
; e.g. llovió mucho
""".


av_-_pr-bastante_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ CAT.VAL.SPR < >,
                                                CONT.HOOK.INDEX.PNG.PN 3sg ],
                                        LKEYS.ALT2KEYREL.PRED "_bastante_x_rel" ] ]
  """
  e.g. llovió bastante
  """.


av_-_pr-demasiado_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ CAT.VAL.SPR < >,
                                                CONT.HOOK.INDEX.PNG.PN 3sg ],
                                        LKEYS.ALT2KEYREL.PRED "_demasiado_x_rel" ] ]
  """
  e.g. llovió demasiado
  """.


av_-_pr-tanto_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ CAT.VAL.SPR < >,
                                                CONT.HOOK.INDEX.PNG.PN 3sg ],
                                        LKEYS.ALT2KEYREL.PRED "_tanto_x_rel" ] ]
  """
  e.g. llovió tanto
  """.


av_-_pr-algo_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ CAT.VAL.SPR < >,
                                                CONT.HOOK.INDEX.PNG.PN 3sg ],
                                        LKEYS.ALT2KEYREL.PRED "_algo_x_rel" ] ]
  """
  e.g. llovió algo
  """.


av_-_pr-suficiente_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ CAT.VAL.SPR < >,
                                                CONT.HOOK.INDEX.PNG.PN 3sg ],
                                        LKEYS.ALT2KEYREL.PRED "_suficiente_x_rel" ] ]
  """
  e.g. llovió suficiente
  """.


av_-_pr-mea_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ CAT.VAL.SPR < [ LOCAL.CAT.HEAD.KEYS.KEY quant_or_deg_rel ] >,
                                                CONT.HOOK.INDEX.PNG.PN 3sg ] ] ]
  """
  e.g. aumentaron el 20%
  """.


av_-_pr-un-poco_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ CAT.VAL.SPR < >,
                                                CONT.HOOK.INDEX.PNG.PN 3sg ],
                                        LKEYS.ALT2KEYREL.PRED "_un_poco_x_rel" ] ]
  """
  e.g. llovió un poco
  """.


av_-_pr-nada_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ CAT.VAL.SPR < [ LOCAL [ CAT.HEAD.KEYS.KEY _casi_x_deg_rel,
                                                                        CONT.HOOK.XARG #index ] ] >,
                                                CONT.HOOK.INDEX #index & [ PNG.PN 3sg ] ],
                                        LKEYS.ALT2KEYREL.PRED "_nada_x_rel" ] ]
  """
  e.g. llovió (casi) nada
  """.


av_-_pr-poco_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ CAT.VAL.SPR < [ LOCAL [ CAT.HEAD.KEYS.KEY quant_degree_rel,
                                                                        CONT.HOOK.XARG #index ] ] >,
                                                CONT.HOOK.INDEX #index & [ PNG.PN 3sg ] ],
                                        LKEYS.ALT2KEYREL.PRED "_poco_x_rel" ] ]
  """
  e.g. llovió (bien/muy/bastante/...) poco
  """.


av_-_pr-más_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ CAT.VAL.SPR < [ LOCAL [ CAT.HEAD.KEYS.KEY quant_degree_rel,
                                                                        CONT.HOOK.XARG #index ] ] >,
                                                CONT.HOOK.INDEX #index & [ PNG.PN 3sg ] ],
                                        LKEYS.ALT2KEYREL.PRED "_más_x_rel" ] ]
  """
  e.g. llovió (mucho/poco/bastante/...) más
  """.


av_-_pr-menos_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM quant_pron_adverb_synsem & [ LOCAL [ CAT.VAL.SPR < [ LOCAL [ CAT.HEAD.KEYS.KEY quant_degree_rel,
                                                                        CONT.HOOK.XARG #index ] ] >,
                                                CONT.HOOK.INDEX #index & [ PNG.PN 3sg ] ],
                                        LKEYS.ALT2KEYREL.PRED "_menos_x_rel" ] ]
  """
  e.g. llovió (mucho/poco/bastante/...) menos
  """.



; --- 4.4.2. Deictic adverbs 

av_-_deic-place_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM pron_adverb_synsem &
           [ LOCAL [ CAT [ HEAD.KEYS.KEY place_n_rel,
                           VAL.SPR < > ],
                     CONT.HOOK.INDEX.SORT loc-mod ] ] ]
"""
; --- 4.4.2. Deictic adverbs 
; a)- place (aquí, allí, ahí, acá, allá, acullá, aquende, allende)

""".

av_-_deic-tmp_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM pron_adverb_synsem &
           [ LOCAL [ CAT [ HEAD.KEYS.KEY time_n_rel,
                           VAL.SPR < > ],
                     CONT.HOOK.INDEX.SORT tmp ] ] ]
"""
; --- 4.4.2. Deictic adverbs 
; b)- temporal (ahora, entonces, hoy, ayer, anteayer, mañana, anoche, anteanoche, anteayer, 
; anteanteayer, antes de ayer, antes de anoche, pasado mañana, hogaño, antaño) 

""".

av_-_deic-mann_lex := pronominal-lex & norm-zero-arg &
  [ SYNSEM pron_adverb_synsem &
           [ LOCAL [ CAT [ HEAD.KEYS.KEY manner_n_rel,
                           VAL.SPR < > ],
                     CONT.HOOK.INDEX.SORT manner-mod ] ] ]
"""
; --- 4.4.2. Deictic adverbs 
; c)- manner (así)

""".

; d)- quant (cuanto)
; av_-_deic-qnt_lex := pronominal-lex & norm-zero-arg &
;   [ SYNSEM pron_adverb_synsem &
;             [ LOCAL [ CAT.HEAD [ KEYS.KEY _n_rel,
;                                 VAL.SPR < > ],
;                      CONT.HOOK.INDEX.SORT mod ] ] ].


; --- 4.4.3. Relative adverbs (como, (a)donde, cuando) 

rel_loc_adverb_synsem := lex-synsem & 
  [ LOCAL [ AGR ref-ind & [ PNG.PN 3sg ],
            CAT [ HC-LIGHT -,
                  POSTHEAD -,
                  HEAD noun & 
                       [ KEYS keys_norm & 
                              [ ALTKEY def_explicit_q_rel ] ],
                  VAL [ SPEC < >,
                        SPR < >,
                        COMPS < > ] ],
            CONT [ HOOK [ INDEX #objind,
                          LTOP #khand ],
                   HCONS <! !>,
                   RELS <! !> ] ],
    NON-LOCAL [ REL 1-dlist & [ LIST < [ INDEX #objind ] > ],
                SLASH 0-dlist,
                QUE 0-dlist ],
    LKEYS.KEYREL.LBL #khand ]
"""
; --- 4.4.3. Relative adverbs (como, (a)donde, cuando)
; pueden aparecer en rel. especificativas, explicativas, yuxtapuestas, predicativas y libres.

""".

rel_adverb_synsem := basic_np_adv_synsem & 
  [ LOCAL [ CAT [ POSTHEAD -,
                  VAL.SPR < > ],
            CONT [ HOOK [ INDEX #ind,
                          LTOP #ltop ],
                   RELS <! relation, relation, #alt2key & 
                                               [ LBL #ltop,
                                                 ARG2 #ind ]!> ] ], 
    NON-LOCAL [ REL 1-dlist,
                SLASH 0-dlist,
                QUE 0-dlist ],
    LKEYS [ KEYREL.ARG0 #arg0,
            ALT2KEYREL #alt2key & 
                       [ LBL #ltop,
                         ARG0 #arg0 ] ] ].

free_rel_adverb_synsem := lex-synsem &
  [ LOCAL [ CAT [ HEAD noun &
		       [ MOD < >,
                         KEYS [ KEY #keypred,
                                ALTKEY free_relative_q_rel,
                                ALT2KEY prep_mod_rel ] ],
                  VAL.SPR < > ],
	    CONT [ HOOK.INDEX.SORT mod, 
                   RELS <! relation & [ PRED free_relative_q_rel ], 
                           #key & [ ARG0 #ind ],
                           #alt2key &
                           [ LBL #lochand,
                             PRED prep_mod_rel,
                             ARG0 [ E [ TENSE nontense,
                                        ASPECT no-aspect ] ],
                             ARG1 #arg,
                             ARG2 #ind ] !> ] ],
    NON-LOCAL.SLASH 1-dlist &
                    <! [ CAT.HEAD adp & 
                                  [ MOD < [ LOCAL.CONT.HOOK.INDEX #arg ] > ],
                         CONT.HOOK [ LTOP #lochand,
                                     XARG #arg ] ] !>,
    LKEYS [ KEYREL #key & [ PRED #keypred ],
            ALTKEYREL #key,
            ALT2KEYREL #alt2key ] ].


av_-_rel-place_lex := pronominal-lex &
  [ SYNSEM rel_adverb_synsem & [ LOCAL [ CAT.HEAD.KEYS.KEY state_loc_rel,
                                         CONT.HOOK.INDEX.SORT loc-mod ],
                                 NON-LOCAL.REL 1-dlist & [ LIST < [ INDEX.SORT loc-mod ] > ] ] ]
  """
  a)- "donde" (adonde)
  - expresses location (with or without the preposition 'en'), and when
  co-ocurring with prepositions, denotes todas las gamas de movimiento.
  - admite antecedentes explícitos: sustantivos locativos (la casa donde vivía),
  PP locativo (fue hallada en la casa de Comillas, donde vivió en su juventud),
  adverbios pronominales de lugar (allá donde estés tú estaré yo).
  in fact rel_loc_adverb_synsem
  """.


av_-_free-rel-place_lex := free_rel_pro_lex &
  [ SYNSEM free_rel_adverb_synsem & [ LOCAL.CONT.HOOK.INDEX.SORT loc-mod,
                                      LKEYS [ ALT2KEYREL.PRED unspec_loc_rel,
                                              KEYREL.PRED state_loc_rel ] ] ]
  """
  e.g. [donde vive tu hermano] es demasiado lejos para ir de vacaciones (NPs)
  """.


av_-_rel-tmp_lex := pronominal-lex &
  [ SYNSEM rel_adverb_synsem & [ LOCAL [ CAT.HEAD.KEYS.KEY time_n_rel,
                                         CONT.HOOK.INDEX.SORT tmp ],
                                 NON-LOCAL.REL 1-dlist & [ LIST < [ INDEX.SORT mod ] > ] ] ]
  """
  b)- cuando
  - expresses time. Admite antecedentes explícitos: sustantivos temporales
  (recuerdo el día cuando dimitió), adverbio pronominal, pero sólo en cláusulas
  explicativas (hoy, cuando consigas el permiso, podrás volver).
  """.


av_-_free-rel-tmp_lex := free_rel_pro_lex &
  [ SYNSEM free_rel_adverb_synsem & [ LOCAL.CONT.HOOK.INDEX.SORT mod,
                                      LKEYS [ ALT2KEYREL.PRED unspec_loc_rel,
                                              KEYREL.PRED prep_mod_rel ] ] ]
  """
  - en función de complemento directo (recuerdo cuando vino), complemento
  predicativo de OD (la ví cuando salía del metro). Tambén puede aparecer como
  complemento de un nombre (el diploma de cuando te graduaste), de un adjetivo
  (preparado para cuando te vayas), de un adverbio (además de cuando hizo la
  mili, feu allí un par de veces) y de preposición (para cuando te vayas, ya habrá
  llegado el buen tiempo). También en función de adverbiales (cuando consigas el
  permiso, podrás volver)
  """.


av_-_rel-mann_lex := pronominal-lex &
  [ SYNSEM rel_adverb_synsem & [ LOCAL.CONT.HOOK.INDEX.SORT manner-mod,
                                 NON-LOCAL.REL 1-dlist & [ LIST < [ INDEX.SORT mod ] > ] ] ]
  """
  c)- como
  - los únicos sustantivos que puede modificar son propio, manera y forma
  (la manera como contestó al periodista), it can also modify the adverb
  'así' (lo hice así, como me había recomendado), and manner adverb/PP
  (lo hice distretamente/con precaución, como me había recomendado).
  También puede reproducir entidades predicativas (vivía sola, como
  siempre había deseado)
  """.


av_-_free-rel-mann_lex := free_rel_pro_lex &
  [ SYNSEM free_rel_adverb_synsem & [ LOCAL.CONT.HOOK.INDEX.SORT manner-mod,
                                      LKEYS [ ALT2KEYREL.PRED unspec_manner_rel,
                                              KEYREL.PRED prep_mod_rel ] ] ]
  """
  - en función de atributo (será como tú digas) y de complemento
  predicativo (los niños dejaron la sala como ya os podéis imaginar)
  """.



; --- 4.4.4. Interrogative adverbs (cómo, (a)dónde, cuándo)

wh_adverb_synsem := basic_np_adv_synsem & 
  [ LOCAL [ CAT.VAL.SPR < >,
            CONT.RELS <! noun-relation, relation !> ],
    NON-LOCAL [ SLASH 0-dlist,
                QUE 1-dlist & [ LIST < param > ],
                REL 0-dlist ] ].

av_-_wh-place_lex := pronominal-lex & 
  [ SYNSEM wh_adverb_synsem &
           [ LOCAL [ CAT.HEAD.KEYS.KEY place_n_rel,
                     CONT.HOOK.INDEX.SORT loc-mod ] ] ].
  
av_-_wh-tmp_lex := pronominal-lex & 
  [ SYNSEM wh_adverb_synsem &
           [ LOCAL [ CAT.HEAD.KEYS.KEY time_n_rel,
                     CONT.HOOK.INDEX.SORT tmp ] ] ].

av_-_wh-mann_lex := pronominal-lex & 
  [ SYNSEM wh_adverb_synsem &
           [ LOCAL [ CAT.HEAD.KEYS.KEY manner_n_rel,
                     CONT.HOOK.INDEX.SORT manner-mod ] ] ].

av_-_wh-caus_lex := pronominal-lex & 
  [ SYNSEM wh_adverb_synsem &
           [ LOCAL [ CAT.HEAD.KEYS.KEY cause_n_rel,
                     CONT.HOOK.INDEX.SORT cause-mod ] ] ].



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- 5. Prepositions

basic-adp-lex := lex-item & 
  [ INFLECTED -,
    ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ],
    SYNSEM [ PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             MODIFIED notmod,
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     CAT [ HEAD adp,
                           VAL.COMPS #comps ] ] ],
    ARG-ST #comps ].

basic_adposition_synsem := lex-synsem &
  [ LOCAL.CAT [ HEAD [ INV -,
                       AUX -,
                       KEYS.KEY #key ],
                VAL.SUBJ < > ],
    LKEYS.KEYREL.PRED #key ].

adposition_synsem := basic_adposition_synsem &
  [ LOCAL.CONT.RELS.LIST < #keyrel & relation & 
                           [ PRED norm_rel ], ... >,
    LKEYS.KEYREL #keyrel ].

; modifying prepositions may co-occur with degree adverbs (e.g. muy por debajo de esto)
specfd_adposition_synsem := basic_adposition_synsem &
  [ LOCAL.CAT.VAL.SPR < [ OPT +,
                          LOCAL [ CAT [ HEAD adv & [ KEYS.KEY degree_rel ],
                                        VAL.COMPS < > ], 
                                  CONT.HOOK [ LTOP #ltop,
                                              XARG #arg0 ] ], 
                          NON-LOCAL.QUE 0-dlist ] >,
    LKEYS.KEYREL [ LBL #ltop, 
                   ARG0 #arg0 ] ]
"""
; modifying prepositions may co-occur with degree adverbs (e.g. muy por debajo de esto)
""".

basic_nomod-adp_synsem := basic_adposition_synsem & 
  [ LOCAL.CAT [ HEAD.MOD < >,
                VAL.COMPS < synsem & 
                            [ OPT -,
                              LOCAL.CAT.HEAD.KEYS.KEY #ckey ] > ], 
    LKEYS [ KEYREL arg12-relation & [ PRED prep_rel ],
            --COMPKEY #ckey ] ].

basic_nomark-adp_synsem := adposition_synsem & 
  [ LOCAL [ CAT [ MC na,
                  HEAD [ CASE none,
                         KEYS.KEY independent_rel, 
                         MOD < [ LOCAL intersective-mod & 
                                       [ CONT.HOOK.INDEX #arg1 ] ] > ],
                  VAL.CLTS < > ],
            CONT.HOOK.XARG #arg1 ],
    LKEYS.KEYREL.ARG1 #arg1 ].

basic_mark-adp_synsem := basic_nomod-adp_synsem & 
  [ LOCAL [ CAT [ HEAD.KEYS [ KEY selected_prep_rel, 
                              ALTKEY #ckey ], 
                  VAL [ COMPS < [ OPT -,
                                  LOCAL [ COORD -,
                                          CAT [ HEAD.KEYS.KEY #ckey,
                                                VAL.CLTS #clts ] ] ] >,
                        CLTS #clts ] ],
            CONT [ RELS <! !> ,
                   HCONS <! !> ] ] ]. 

basic_mod-adp_synsem := basic_nomark-adp_synsem & specfd_adposition_synsem &
  [ LOCAL [ CAT [ HEAD [ KEYS.ALTKEY #ckey,
                         MOD < [ LOCAL.CONT.HOOK.LTOP #ltop ] > ],
                  VAL [ SPR < [ OPT +,
                                LOCAL.CAT.HEAD.KEYS.KEY degree_rel ] >,
                        COMPS < [ OPT -,
                                  LOCAL [ COORD -,
                                          CAT [ HEAD.KEYS.KEY #ckey,
                                                VAL.CLTS < > ] ] ],... > ] ],
            CONT [ HOOK.LTOP #ltop,
                   RELS.LIST < prep-relation, ... > ] ],
    LKEYS.--COMPKEY #ckey ].

mark-adp-lex := basic-adp-lex & 
  [ SYNSEM basic_mark-adp_synsem ].

mod-adp-lex := basic-adp-lex & 
  [ SYNSEM basic_mod-adp_synsem ].

mod-pp-lex := basic-adp-lex &  basic-zero-arg & 
  [ SYNSEM basic_nomark-adp_synsem ].


; --- marking/modification sub-types

p_nmark_synsem := basic_mark-adp_synsem & 
  [ LOCAL [ CAT [ MC na,
                  HEAD.KEYS.ALT2KEY #alt2key,
                  VAL [ COMPS < [ LOCAL [ CAT.HEAD noun & 
                                                   [ KEYS [ KEY nom_rel,
                                                            ALTKEY #alt2key ] ],
                                          CONT.HOOK #hook ] ] >,
                        CLTS < > ] ],
            CONT.HOOK #hook ] ]. 

p_vmark_synsem := basic_mark-adp_synsem & 
  [ LOCAL [ CAT [ MC -,
                  HEAD.KEYS.ALT2KEY #alt2key,
                  VAL.COMPS < [ LOCAL [ CAT.HEAD.KEYS.ALTKEY #alt2key,
                                        CONT.HOOK.LTOP #ltop ] ] > ],
            CONT.HOOK.LTOP #ltop ] ].


p_vmod_synsem := basic_mod-adp_synsem &
  [ LOCAL.CAT [ HEAD [ PRD non-prd,
                       MOD < [ LOCAL [ CAT.HEAD verb,
                                       CONT.HOOK.INDEX.SF prop ] ] > ],
                VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #arg2 ],... > ],
    LKEYS.KEYREL.ARG2 #arg2 ].

p_nmod_synsem := basic_mod-adp_synsem &
  [ LOCAL.CAT [ POSTHEAD +, 
                HEAD [ PRD prd,
                       MOD < [ LOCAL.CAT [ LASTNMOD -,
                                           HEAD noun ],
                               NON-LOCAL.SLASH 0-dlist ] > ] ] ]
"""
OZ: Not sure whether this comment belongs here or was free-standing:
; !!! la en otros tiempos mujer del año, el último libro en aparecer,
;                                           VAL.SPR < [ ] >
""". 

p_amod_synsem := basic_mod-adp_synsem &
  [ LOCAL.CAT [ POSTHEAD +, 
                HEAD [ PRD non-prd,
                       MOD < [ LOCAL.CAT. HEAD adj,
                               NON-LOCAL.SLASH 0-dlist ] > ] ] ].

p_numod_synsem := basic_mod-adp_synsem &
  [ LOCAL.CAT [ POSTHEAD +, 
                HEAD[ PRD non-prd,
                      MOD < [ LOCAL.CAT [ HEAD adj & [ PRD prd ],
                                          VAL.SPR < > ],
                              NON-LOCAL.SLASH 0-dlist ] > ] ] ].

p_pmod_synsem := basic_mod-adp_synsem &
  [ LOCAL.CAT [ POSTHEAD -, 
                HEAD [ PRD non-prd,
                       MOD < [ LOCAL.CAT [ MC na,
                                           HEAD adp,
                                           VAL.COMPS < > ] ] > ],
                VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #arg2 ] > ],
   LKEYS.KEYREL.ARG2 #arg2 ]. 

pp_nmod_synsem := basic_nomark-adp_synsem &
  [ LOCAL [ CAT [ POSTHEAD +, 
                  HEAD [ PRD prd,
                         MOD < [ LOCAL.CAT [ LASTNMOD -,
                                             HEAD noun,
                                             VAL.SPR < > ],
                                 NON-LOCAL.SLASH 0-dlist & [ LIST < > ] ] > ] ],
            CONT.RELS.LIST < pp-relation, ... > ] ]. 

pp_vmod_synsem := basic_nomark-adp_synsem &
  [ LOCAL [ CAT [ HEAD [ PRD non-prd,
                         MOD < [ LOCAL [ CAT.HEAD verb,
                                         CONT.HOOK.INDEX.SF prop ],
                                 NON-LOCAL.SLASH 0-dlist & [ LIST < > ] ] > ] ],
            CONT.RELS.LIST < pp-relation, ... > ] ]. 


; --- subcategorization sub-types

p_np := basic-one-arg & 
  [ SYNSEM.LOCAL [ CAT [ HEAD.KEYS.ALT2KEY #alt2key,
                         VAL.COMPS < [ LOCAL [ CAT [ MC na,
                                                     HEAD noun & [ KEYS.ALTKEY #alt2key ],
                                                     VAL [ SUBJ < >,
                                                           COMPS < > ] ],
                                               CONT.HOOK.INDEX.SORT #sort ] ] > ],
                   CONT.HOOK.INDEX.SORT #sort ] ].  

p_cp_prop_or_ques := basic-one-arg & 
  [ SYNSEM.LOCAL [ CAT [ HEAD [ AUX -,
                                TAM #tam,
                                KEYS.ALT2KEY #alt2key ],
                         VAL.COMPS < [ LOCAL v_local & 
                                             [ CAT [ MC bool,
                                                     HEAD [ TAM #tam,
                                                            KEYS.ALTKEY #alt2key ],
                                                     VAL.COMPS < > ],
                                               CONT.HOOK.INDEX.SF prop-or-ques ] ] > ],
                   CONT.HOOK.INDEX.E #tam ] ].  

p_cp_prop_or_ques_fin := p_cp_prop_or_ques & 
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS < [ LOCAL.CAT.HEAD.VFORM fin ] >,
                           CLTS < > ] ].   

p_cp_prop_or_ques_inf := p_cp_prop_or_ques & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT [ HEAD.VFORM inf,
                                               VAL.SUBJ < synsem & 
                                                          [ NON-LOCAL.SLASH 0-dlist & [ LIST < > ] ] > ] ] > ].


p_cp_prop_inf_slash := o_rais-one-arg &
  [ SYNSEM [ LOCAL [ CAT [ HEAD [ AUX -,
                                  TAM #tam ],
                           VAL.COMPS < [ LOCAL vp_inf_local & [ CAT [ MC -,
                                                                      HEAD.TAM #tam,
                                                                      VAL.COMPS < > ],
                                                                CONT.HOOK [ LTOP #larg,
                                                                            INDEX.SF prop ] ] ] > ],
                     CONT [ HOOK [ LTOP #ltop,
                                   INDEX #index & [ E #tam ] ],
                            RELS <! #keyrel & prep-relation !>,
                            HCONS <! qeq & [ HARG #harg,
                                             LARG #larg ] !> ] ],
             LKEYS.KEYREL #keyrel & [ LBL #ltop,
                                      ARG0 #index,
                                      ARG2 #harg ] ] ]
  """
  control modifying PPs
  """.


p_ap := basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ MC na,
                       HEAD.KEYS.ALT2KEY non_free_relative_q_rel,
                       VAL [ COMPS < [ LOCAL.CAT [ MC na,
                                                   HEAD adj,
                                                   VAL [ SUBJ < >,
                                                         COMPS < > ] ],
                                       NON-LOCAL [ SLASH 0-dlist,
                                                   REL 0-dlist,
                                                   QUE 0-dlist ] ] >,
                             CLTS < > ] ] ]
  """
  prep + AP, for predicative complements
  e.g. presume de valiente, lo tienen por tonto
  """.


p_adv := basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ MC na,
                       HEAD.KEYS.ALTKEY basic_adv_rel,
                       VAL [ COMPS < [ LOCAL.CAT [ HEAD +ro,
                                                   VAL.COMPS < > ] ] >,
                             CLTS < > ] ] ]
  """
  prep + ADV
  e.g. mira hacia atrás
  """.


p_modnp := basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ MC na,
                       HEAD.KEYS.ALTKEY prep_mod_rel,
                       VAL [ COMPS < [ LOCAL.CAT [ HEAD modnp & [ MOD < [ LOCAL.CAT.HEAD verb ] > ],
                                                   VAL.COMPS < > ] ] >,
                             CLTS < > ] ] ]
  """
  prep + MODNP
  e.g. como ahora
  """.


p_pp := basic-one-arg &
  [ SYNSEM.LOCAL [ CAT [ MC na,
                         HEAD.KEYS.ALT2KEY non_free_relative_q_rel,
                         VAL [ COMPS < [ LOCAL [ CAT [ HEAD adp & [ KEYS.KEY prep_mod_rel,
                                                                    CASE none ],
                                                       VAL.COMPS < > ],
                                                 CONT.HOOK.LTOP #ltop ] ] >,
                               CLTS < > ] ],
                   CONT.HOOK.LTOP #ltop ] ]
  """
  non-locative preposition + locative PP
  a)- "de" when, with the verb "ser" or with movement verbs, expresses origin, or when it heads a nominal
  complement, e.g. es de por ese barrio, salió de tras el matorral, el libro de sobre la mesa
  b)- "desde" (origin), "hasta" (destination), "por" (path) + locative PP except "en"
  e.g. se lanzó desde sobre el tejado
  c)- Carpetazo en el Congreso hasta después de las elecciones europeas.
  """.


p_mrkd_np := basic-one-arg &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.KEYS.ALT2KEY non_free_relative_q_rel,
                           VAL [ COMPS < [ OPT -,
                                           LOCAL mrkd_np_local & [ CAT [ HEAD.KEYS.KEY #ckey,
                                                                         VAL.SPR < > ],
                                                                   CONT.HOOK.INDEX #arg2 ] ] >,
                                 CLTS < > ] ],
                     CONT [ RELS <! prep-relation !>,
                            HCONS <! !> ] ],
             LKEYS [ KEYREL.ARG2 #arg2,
                     --COMPKEY #ckey ] ] ]
  """
  "de/a" + marked NP_por, e.g. vengo de/a por agua
  """.


p_ditrans := basic-two-arg &
  [ SYNSEM [ LOCAL.CAT [ HEAD.KEYS.ALT2KEY non_free_relative_q_rel,
                         VAL.COMPS < [ OPT -,
                                       LOCAL.CAT [ MC na,
                                                   HEAD noun,
                                                   VAL [ SUBJ < >,
                                                         COMPS < >,
                                                         SPR < > ] ] ],
                                     [ OPT -,
                                       LOCAL mrkd_np_local & [ CAT.HEAD.KEYS.KEY #ockey,
                                                               CONT.HOOK.INDEX #arg3 ] ] > ],
             LKEYS [ KEYREL.ARG3 #arg3,
                     --OCOMPKEY #ockey & _de_p_sel_rel ] ] ]
  """
  for the ditransitive preposition "a" in "a... de..." expressing distance
  e.g. Juan vive (a (3km) (de Madrid))/Juan vive a 3km/*Juan vive de Madrid
  """.



; --- Marking prepositions


p_np_ptcl_lex := mark-adp-lex & p_np &
  [ SYNSEM p_nmark_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.VAL.SPR < > ] > ] ]
  """
  - marking NPs (a, como, con, contra, de, en, para, por)
  e.g. sucumbió a la tentación, hay tantos niños como niñas, tan largo como eso, cumple con su deber,
  luchó contra el enemigo, depende de tí, creo en el destino, aptitud para la danza, fue hecho por mí
  """.


p_nb_ptcl_lex := mark-adp-lex & p_np &
  [ SYNSEM p_nmark_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.VAL.SPR < [ LOCAL.CONT.RELS <! relation !>,
                                                                            NON-LOCAL [ QUE 0-dlist,
                                                                                        REL 0-dlist ] ] > ] > ] ]
  """
  
  """.


p_np_ptcl-spd_lex := mark-adp-lex & p_np &
  [ SYNSEM p_nmark_synsem & [ LOCAL.CAT.VAL [ SPR < [ OPT -,
                                                      LOCAL.CAT.HEAD adv & [ KEYS.KEY comp_degree_rel ] ] >,
                                              COMPS < [ LOCAL.CAT.VAL.SPR < > ] > ] ] ]
  """
  
  """.


p_cp_ptcl_lex := mark-adp-lex & p_cp_prop_or_ques_fin &
  [ SYNSEM p_vmark_synsem ]
  """
  - marking finite completive clauses/indirect questions (a, con, de, en, por)
  e.g. esperó a que llegase, me conformo con que vengas, me preocupo de que comáis, confío en que vengan,
  voto por que vayamos al cine, depende de cómo lo hagas, pensaré en cómo lo haré/hizo
  """.


p_vp_ptcl_lex := mark-adp-lex & p_cp_prop_or_ques_inf &
  [ SYNSEM p_vmark_synsem & [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.XARG #ctrl ] >,
                                      CONT.HOOK.XARG #ctrl ] ] ]
  """
  - marking VPinf - subject & object control (a, con, de, en, para, por)
  e.g. aspira a ganar, sueño con ganar, deja de molestar, confío en ganar, capacitado para hacerlo,
  voto por ir al cine
  """.


; - marking VPinf - subject & object raising (de)
; e.g. fácil de tocar 


; - comparatives
p_rg_ptcl_lex := mark-adp-lex & p_adv & 
  [ SYNSEM basic_mark-adp_synsem & 
           [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD.KEYS.KEY adv_rel ] > ] ]
"""
; - comparatives
; e.g. tan distantes como antes
""".

p_pp_ptcl_lex := mark-adp-lex & p_pp & 
  [ SYNSEM basic_mark-adp_synsem & 
           [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT [ MC na,
                                                 HEAD.MOD < [ LOCAL.CAT.HEAD noun ] > ] ]> ] ]
"""
; - comparatives
; e.g. igual que en una película, contará con más funciones que en la anterior
""".  

p_ap_ptcl_lex := mark-adp-lex & p_ap & 
  [ SYNSEM basic_mark-adp_synsem & 
           [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.MC na ] > ] ]
"""
; - comparatives
; e.g. tan maravillada como rutinatia
""".

; --- Nominal modifying prepositions

p_np_i-nm_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_nmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD.KEYS [ KEY non_free_relative_nom_rel,
                                                                               ALTKEY explicit_q_rel ],
                                                                   VAL.SPR < > ],
                                                             CONT.HOOK.INDEX #arg2 & [ SORT non-temp ] ] ] >,
                             LKEYS.KEYREL.ARG2 #arg2 ] ]
  """
  --- Nominal modifying prepositions
  - taking NPs
  """.


p_nb_i-nm_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_nmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD.KEYS [ KEY non_free_relative_nom_rel,
                                                                               ALTKEY explicit_q_rel ],
                                                                   VAL.SPR < [ LOCAL.CONT.RELS <! relation !>,
                                                                               NON-LOCAL [ SLASH 0-dlist,
                                                                                           QUE 0-dlist,
                                                                                           REL 0-dlist ] ] > ],
                                                             CONT.HOOK.INDEX #arg2 ] ] >,
                             LKEYS.KEYREL.ARG2 #arg2 ] ]
  """
  --- Nominal modifying prepositions
  - taking Nbar
  """.


p_np_i-pn-nm_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_nmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD.KEYS.KEY named_rel,
                                                                   VAL.SPR < > ],
                                                             CONT.HOOK.INDEX #arg2 & [ PRONTYPE not_pron ] ] ] >,
                             LKEYS.KEYREL.ARG2 #arg2 ] ]
  """
  --- Nominal modifying prepositions
  - taking NEs
  """.


p_np_i-tmp-nm_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_nmod_synsem & [ LOCAL.CAT [ HEAD.MOD < [ LOCAL.CAT.HEAD.KEYS.KEY non_modable_rel ] >,
                                         VAL.COMPS < [ LOCAL [ CAT [ HEAD.KEYS [ KEY non_free_relative_nom_rel,
                                                                                 ALTKEY explicit_q_rel ],
                                                                     VAL.SPR < > ],
                                                               CONT.HOOK.INDEX #arg2 & [ SORT tmp ] ] ] > ],
                             LKEYS.KEYREL.ARG2 #arg2 ] ]
  """
  --- Nominal modifying prepositions
  - taking temporal NPs (de, hasta, para)
  e.g. el concierto del otro día/de ayer, tengo entradas para el jueves/mañana
  """.


p_vp_i-ctrl-nm_lex := mod-adp-lex & p_cp_prop_inf_slash &
  [ SYNSEM p_nmod_synsem & [ LOCAL [ CAT [ HEAD.MOD #mod & < [ LOCAL.CAT.HEAD.KEYS.KEY non_modable_rel ] >,
                                           VAL.COMPS < [ NON-LOCAL.SLASH <! np_acc_local & [ CAT.HEAD.MOD #mod,
                                                                                             CONT.HOOK.INDEX #ctrl ] !> ] > ],
                                     CONT.HOOK.XARG #ctrl & ref-ind ] ] ]
  """
  --- Nominal modifying prepositions
  - taking verbal complements (por, sin)
  e.g. pan por cocer
  """.


p_vp_i-nm_lex := mod-adp-lex & p_cp_prop_inf_slash &
  [ SYNSEM p_nmod_synsem & [ LOCAL.CAT [ HEAD.MOD < [ LOCAL.CAT.HEAD.KEYS.KEY non_modable_rel ] >,
                                         VAL.COMPS < [ LOCAL.CAT.HEAD.KEYS.ALTKEY prop,
                                                       NON-LOCAL.SLASH 0-dlist ] > ] ] ]
  """
  --- Nominal modifying prepositions
  e.g. satisfacción por estar aquí
  """.


p_adv_i-nm_lex := mod-adp-lex & p_adv & norm-sem-lex-item &
  [ SYNSEM p_nmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD.KEYS.KEY adv_rel ] > ] ]
  """
  --- Nominal modifying prepositions
  Taking ADV
  e.g. tengo las ganas de siempre
  """.


p_pp_i-nm_lex := mod-adp-lex & p_pp & norm-sem-lex-item &
  [ SYNSEM p_nmod_synsem & [ LOCAL.CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD noun & [ KEYS.KEY non_modable_rel ],
                                                                  VAL.COMPS < > ] ] >,
                                         VAL.COMPS < [ LOCAL [ CAT.HEAD.MOD < [ LOCAL.CAT.HEAD noun ] >,
                                                               CONT.HOOK.INDEX #arg2 ] ] > ],
                             LKEYS.KEYREL.ARG2 #arg2 ] ]
  """
  --- Nominal modifying prepositions
  - taking PPs (de (orig) + PP (loc))
  e.g. el libro de sobre la mesa
  """.


pp_-_i-nm_lex := mod-pp-lex & norm-sem-lex-item &
  [ SYNSEM pp_nmod_synsem ]
  """
  --- Nominal modifying prepositions
  non-temporal lexical PPs
  e.g. seis horas más, un nombré así.
  """.


pp_-_i-nm-tmp_lex := mod-pp-lex & norm-sem-lex-item &
  [ SYNSEM pp_nmod_synsem & [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CONT.HOOK.INDEX.SORT tmp ] > ] ]
  """
  --- Nominal modifying prepositions
  temporal lexical PPs: antes, después
  e.g. Los agentes sospechan de la mujer rescatada bajo un sofá nueve horas después.
  """.


p_ap_i-nm_lex := mod-adp-lex & p_ap & norm-sem-lex-item &
  [ SYNSEM p_nmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX #arg2 ] >,
                             LKEYS.KEYREL.ARG2 #arg2 ] ]
  """
  --- Nominal modifying prepositions
  - taking APs (de, por)
  e.g. presume de valiente, lo acusó de traidor, ¿me tomas por tonto?
  """.


; --- Verbal modifying prepositions
  

p_nb_i-vm_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_vmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD.KEYS [ KEY common_nom_rel,
                                                                               ALTKEY explicit_q_rel ],
                                                                   VAL.SPR < [ LOCAL.CONT.RELS <! relation !>,
                                                                               NON-LOCAL [ QUE 0-dlist,
                                                                                           REL 0-dlist ] ] > ],
                                                             CONT.HOOK.INDEX.SORT non-temp ] ] >,
                             LKEYS.KEYREL.PRED prep_mod_rel ] ]
  """
  --- Verbal modifying prepositions
  - taking Nbar
  """.


p_np_i-vm_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_vmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD.KEYS [ KEY non_named_non_modable_rel,
                                                                               ALTKEY explicit_q_rel ],
                                                                   VAL.SPR < > ],
                                                             CONT.HOOK.INDEX.SORT non-temp ] ] >,
                             LKEYS.KEYREL.PRED prep_mod_rel ] ]
  """
  --- Verbal modifying prepositions
  - taking NPs
  """.


p_np_i-pn-vm_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_vmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD.KEYS.KEY named_rel,
                                                                   VAL.SPR < > ],
                                                             CONT.HOOK.INDEX.PRONTYPE not_pron ],
                                                     NON-LOCAL.QUE 0-dlist ] >,
                             LKEYS.KEYREL.PRED prep_mod_rel ] ]
  """
  --- Verbal modifying prepositions
  - taking NEs
  """.


p_np_i-tmp-vm_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_vmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT.VAL.SPR < >,
                                                             CONT.HOOK.INDEX.SORT tmp ] ] >,
                             LKEYS.KEYREL.PRED temp_loc_rel ] ]
  """
  --- Verbal modifying prepositions
  - taking temporal NPs (a, desde, en, entre, hace, hacia, hasta, para, por, sobre, tras)
  e.g. te espero a las cinco; no he vuelto desde el mes pasado/ayer; nací en 1967;
  quedamos entre las 9 y las 10 de la mañana; vino hace un mes; ¿quedamos hacia las dos?
  se despidió hasta la noche/mañana; lo dejaremos para el jueves; trabajaremos por la mañana;
  lo dejaremos para la noche/mañana; el tren llegará sobre las diez
  """.


p_np_i-tmp-durante-vm_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_vmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.VAL.SPR < > ] >,
                             LKEYS.KEYREL.PRED temp_loc_rel ] ]
  """
  --- Verbal modifying prepositions
  durante
  """.


p_np-pp_i-vm_lex := mod-adp-lex & p_ditrans & norm-sem-lex-item &
  [ SYNSEM p_vmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD.KEYS.ALTKEY non_free_relative_q_rel,
                                                                   VAL.SPR < > ],
                                                             CONT.HOOK.INDEX.SORT mea ] ],
                                                   [ LOCAL.CONT.HOOK.INDEX.SORT loc ] >,
                             LKEYS.KEYREL.PRED state_loc_rel ] ]
  """
  --- Verbal modifying prepositions
  -- ditransitive preposition "a" in "a... de..." expressing distance
  e.g. Juan vive (a (3km) (de Madrid))/Juan vive a 3km/*Juan vive de Madrid
  """.


p_ap_i-vm_lex := mod-adp-lex & p_ap & norm-sem-lex-item &
  [ SYNSEM p_vmod_synsem & [ LOCAL.CAT [ HEAD.MOD < [ LOCAL.CONT.HOOK.XARG #ctrl ] >,
                                         VAL.COMPS < [ LOCAL.CONT.HOOK.XARG #ctrl ] > ],
                             LKEYS.KEYREL.PRED prep_mod_rel ] ]
  """
  --- Verbal modifying prepositions
  - taking APs (por, de)
  e.g. lloró por tonto/de impotencia
  """.


p_adv_i-vm_lex := mod-adp-lex & p_adv & norm-sem-lex-item &
  [ SYNSEM p_vmod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX.SORT non-temp ] >,
                             LKEYS.KEYREL.PRED prep_mod_rel ] ]
  """
  --- Verbal modifying prepositions
  Taking ADV
  e.g. mira hacia atrás
  """.


p_modnp_i-vm_lex := mod-adp-lex & p_modnp & norm-sem-lex-item &
  [ SYNSEM p_vmod_synsem & [ LKEYS.KEYREL.PRED prep_mod_rel ] ]
  """
  --- Verbal modifying prepositions
  Taking MODNP
  e.g. Como ahora
  """.


p_pp_i-vm_lex := mod-adp-lex & p_pp & norm-sem-lex-item &
  [ SYNSEM [ LOCAL.CAT [ HEAD [ PRD non-prd,
                                MOD < [ LOCAL [ CAT.HEAD verb & [ AUX - ],
                                                CONT.HOOK.INDEX.SF prop ] ] > ],
                         VAL.COMPS < [ LOCAL [ CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
                                               CONT.HOOK.INDEX #arg2 ] ], ... > ],
             LKEYS.KEYREL.ARG2 #arg2 ] ]
  """
  --- Verbal modifying prepositions
  - taking PPs, there are two types:
  a)- "de" when, with the verb "ser" or with movement verbs, expresses origin, or when it heads a nominal
  complement; e.g. es de por ese barrio, salió de tras el matorral, el libro de sobre la mesa
  b)- "desde" (origin), "hasta" (destination), "por" (path) + locative PP except "en"
  e.g. se lanzó desde sobre el tejado
  """.


p_pp_i-e-vm_lex := mod-adp-lex & p_mrkd_np & norm-sem-lex-item &
  [ SYNSEM p_vmod_synsem & [ LOCAL.CAT.MC na,
                             LKEYS [ KEYREL.PRED dir_rel,
                                     --COMPKEY _por_p_sel_rel ] ] ]
  """
  --- Verbal modifying prepositions
  - taking marked NPs
  !!! in fact, only with with movement verbs: "de/a" + PP_por, e.g. vengo de/a por agua
  """.


pp_-_i-vm_lex := mod-pp-lex & norm-sem-lex-item &
  [ SYNSEM pp_vmod_synsem ]
  """
  --- Verbal modifying prepositions
  e.g. tengo que ser honesta conmigo
  """.

; --- Adjectival modifying prepositions (degree)

p_np_i-am_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_amod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT.VAL.SPR < >,
                                                             CONT.HOOK.INDEX #arg2 & [ SORT non-loc ] ] ] >,
                             LKEYS.KEYREL.ARG2 #arg2 ] ]
  """
  --- Adjectival modifying prepositions (degree)
  - taking NP (a, hasta)
  e.g. (*muy) irritante al máximo, (*muy) fiel hasta la muerte
  """.


p_np_i-tmp-am_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_amod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT.VAL.SPR < >,
                                                             CONT.HOOK.INDEX.SORT tmp ] ] >,
                             LKEYS.KEYREL.PRED temp_loc_rel ] ]
  """
  --- Adjectival modifying prepositions (degree)
  - taking temporal NP (desde)
  e.g. la más alta desde 1945
  """.


p_nb_i-am_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_amod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD.KEYS [ KEY non_free_relative_nom_rel,
                                                                               ALTKEY explicit_q_rel ],
                                                                   VAL.SPR < [ LOCAL.CONT.RELS <! relation !>,
                                                                               NON-LOCAL [ SLASH 0-dlist,
                                                                                           QUE 0-dlist,
                                                                                           REL 0-dlist ] ] > ],
                                                             CONT.HOOK.INDEX #arg2 & [ SORT non-temp ] ] ] >,
                             LKEYS.KEYREL.ARG2 #arg2 ] ]
  """
  --- Adjectival modifying prepositions (degree)
  - taking Nbar
  """.


p_np_i-pn-am_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_amod_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD.KEYS.KEY named_rel,
                                                                   VAL.SPR < > ],
                                                             CONT.HOOK.INDEX #arg2 & [ PRONTYPE not_pron ] ] ] >,
                             LKEYS.KEYREL.ARG2 #arg2 ] ]
  """
  --- Adjectival modifying prepositions (degree)
  - taking NEs
  """.


p_vp_i-ctrl-am_lex := mod-adp-lex & p_cp_prop_inf_slash &
  [ SYNSEM p_amod_synsem & [ LOCAL.CAT [ HEAD.MOD < [ LOCAL.CONT.HOOK.XARG #ctrl ] >,
                                         VAL.COMPS < [ LOCAL [ CAT.HEAD.KEYS.ALTKEY prop,
                                                               CONT.HOOK.XARG #ctrl & ref-ind ],
                                                       NON-LOCAL.SLASH 0-dlist ] > ] ] ]
  """
  --- Adjectival modifying prepositions (degree)
  - Taking VPinf (a, hasta)
  e.g. !!! (*muy) llenas a/hasta reventar de vino/lleno de vino a reventar.
  """.



; --- Ordinal modifying prepositions (degree)

p_np_i-num_lex := mod-adp-lex & p_np & norm-sem-lex-item & 
  [ SYNSEM p_numod_synsem &
           [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT.VAL.SPR < >,
                                             CONT.HOOK.INDEX #arg2 & [ SORT non-loc ] ] ] >,
             LKEYS.KEYREL.ARG2 #arg2 ] ]
"""
; --- Ordinal modifying prepositions (degree)

; - taking NP (con)
; e.g. Rusia, primera con tres puntos,...
""". 


; --- Prepositional modifying prepositions (PPmod + PPhd)

p_np_i-pm_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_pmod_synsem &
           [ LOCAL.CAT [ HEAD.MOD < [ LOCAL [ CAT.HEAD.KEYS.KEY state_loc_rel,
                                              CONT.HOOK.INDEX.SORT location ] ] >,
                         VAL.COMPS < [ LOCAL.CAT.VAL.SPR < > ] > ] ] ]
"""
; --- Prepositional modifying prepositions (PPmod + PPhd)
; - the first expresses distance, the second includes a locative preposition (a, al)
; e.g. a 20 metros sobre el nivel del mar, a mitad de camino entre Madrid y Cáceres

""".

p_np_i-orig-pm_lex := mod-adp-lex & p_np & norm-sem-lex-item &
  [ SYNSEM p_pmod_synsem &
           [ LOCAL.CAT [ HEAD.MOD < [ LOCAL [ CAT.HEAD.KEYS.KEY period_rel,
                                              CONT.HOOK.INDEX.SORT #sort ] ] >,
                         VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX.SORT #sort & location ] > ] ] ]
"""
; --- Prepositional modifying prepositions (PPmod + PPhd)
; - they express a distance / period of time (de, desde) 
; e.g. corrió de un extremo al otro, voy de aquí para allá, duró desde las 4 hasta las 6
""".



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- 6. Determiners
; !!! LOCAL.AGR checks full morpho-syntactic agreement within the NP, 
; whereas CONT.HOOK.INDEX does not check 'NUMBER', with this we can deal 
; with 'ad-sensum' agr. 

basic-det-lex := lex-item & 
  [ INFLECTED -,
    ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ],
    SYNSEM [ PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             MODIFIED notmod,
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     CAT [ HEAD det & [ KEYS.KEY quant_rel ],
                           VAL.COMPS #comps ] ] ],
    ARG-ST #comps ]
"""
; --- 6. Determiners
; !!! LOCAL.AGR checks full morpho-syntactic agreement within the NP, 
; whereas CONT.HOOK.INDEX does not check 'NUMBER', with this we can deal 
; with 'ad-sensum' agr. 
""".

basic_det_synsem := lex-synsem & 
  [ LOCAL [ COORD-STRAT zero,
            AGR #agr & [ PNG.PN 3per ],
            CAT [ MC na,
                  HEAD.MOD < >,
                  VAL [ SUBJ < >,
                        CLTS < >,
                        SPEC < [ LOCAL [ COORD -,
                                         AGR #agr,
                                         CAT.HEAD.KEYS.ALTKEY #pred,
                                         CONT.HOOK [ INDEX #index,
                                                     LTOP #larg ] ] ] > ] ],
            CONT nom-obj & [ HOOK [ LTOP #ltop,
                                    INDEX #index,
                                    XARG #larg ], 
                             HCONS.LIST < qeq & [ HARG #harg,
                                                  LARG #larg ], ... >,
                             RELS.LIST < #keyrel & quant-relation, ... > ] ],
    NON-LOCAL.SLASH 0-dlist,
    LKEYS.KEYREL #keyrel & [ LBL #ltop,
                             ARG0 #index,
                             PRED #pred,
                             RSTR #harg ] ]
"""
; --- 6. Determiners
; !!! LOCAL.AGR checks full morpho-syntactic agreement within the NP, 
; whereas CONT.HOOK.INDEX does not check 'NUMBER', with this we can deal 
; with 'ad-sensum' agr. 
""".

specfd_det_synsem := basic_det_synsem &
  [ LOCAL [ AGR #agr,
            CAT.VAL.SPR < [ LIGHT +,
                            LOCAL.AGR #agr,
                            NON-LOCAL [ QUE 0-dlist,
                                        REL 0-dlist ] ] > ] ]
"""
; dets taking spr and building a DP
""".

det_que := basic-det-lex & 
  [ SYNSEM [ LOCAL.CAT [ POSTHEAD -,
                         VAL.COMPS < > ], 
             NON-LOCAL [ QUE 1-dlist & [ LIST < param > ],
                         REL 0-dlist ] ] ]
"""
; sub-hierarchy of dets on the basis of non-local valuess
""". 

det_nonque := basic-det-lex & 
  [ SYNSEM.NON-LOCAL.QUE 0-dlist ]. 

det_rel := det_nonque &
  [ SYNSEM [ LOCAL [ CAT [ POSTHEAD -,
                           VAL.COMPS < > ],
                     CONT [ RELS <! relation, relation !>,
                            HCONS <! qeq !> ] ],
             NON-LOCAL.REL 1-dlist ] ].

det_nonque_nonrel := det_nonque & 
  [ SYNSEM.NON-LOCAL.REL 0-dlist ]. 

det_nonque_nonrel_nonposs := det_nonque_nonrel & 
  [ SYNSEM.LOCAL.CONT [ RELS <! relation !>,
                        HCONS <! qeq !> ] ].


; --- 6.1. Definite articles

d_-_art-d := det_nonque_nonrel_nonposs & 
  [ SYNSEM basic_det_synsem & 
           [ LOCAL.CAT [ POSTHEAD -,
                         VAL [ SPR < [ OPT +,
                                       LOCAL.CAT.HEAD.KEYS.KEY todo_def_q_rel ] >,
                               SPEC < [ LOCAL.CAT.HEAD noun ] >,
                               COMPS < > ] ],
             LKEYS [ KEYREL [ PRED _el_q_rel,
                              LBL #lbl ],
                     ALTKEYREL.LBL #lbl ] ] ]
"""
; --- 6.1. Definite articles
; - (todo) + DEF. ART + (adj. indef.)* + (adj. qual.)* + N'
; e.g. (todos) los (otros) (muchos/pocos/tres) libros
""".

d_-_art-d_lex := d_-_art-d &
  [ SYNSEM specfd_det_synsem ].

 
; --- 6.2. Indefinite article
d_-_art-i_lex := det_nonque_nonrel_nonposs &
  [ SYNSEM specfd_det_synsem &
           [ LOCAL.CAT [ POSTHEAD -,
                         VAL [ COMPS < >,
                               SPR < [ OPT +,
                                       LOCAL.CAT.HEAD.KEYS.KEY pre_indef_art_rel ] > ] ],
             LKEYS [ KEYREL [ PRED art_indef_q_rel,
                              LBL #lbl ],
                     ALTKEYREL.LBL #lbl ] ] ]
"""
; --- 6.2. Indefinite article
; - INDEF. ART + (cardinal) + Pl_N'
; e.g. Necesito unas tres personas 
; !!! yet not covered: ¡cayó una (cantidad) de agua...!
""".

; --- 6.3. Possessives 

det_poss := det_nonque_nonrel & 
  [ SYNSEM specfd_det_synsem &
           [ LOCAL [ CAT [ POSTHEAD -,
                           VAL [ SPR  < [ OPT +,
                                          LOCAL.CAT.HEAD.KEYS.KEY todo_or_dem_q_rel ] >,
                                 SPEC < [ LOCAL [ CAT.HEAD noun, 
                                                  CONT.HOOK.LTOP #hand ] ] >,
                                 COMPS < > ] ],
                     CONT [ HOOK.INDEX #index,
                            RELS <! [ WLINK #wlink ], 
                                    #altkey & prep-relation & 
                                    [ PRED poss_rel,
                                      LBL #hand,
                                      ARG1 #index, 
                                      ARG2 #ind ], 
                                    [ PRED pronoun_q_rel,
                                      RSTR #rhand,
                                      ARG0 #ind ],
                                    [ PRED pron_rel,
                                      LBL #prohand,
                                      WLINK #wlink,
                                      ARG0 #ind &
                                           [ SORT entity ] ] !>,
                            HCONS <! qeq, qeq & [ HARG #rhand,
                                                  LARG #prohand ] !> ] ],
             LKEYS [ KEYREL.PRED poss_q_rel, 
                     ALTKEYREL #altkey ] ] ]
"""
; --- 6.3. Possessives 
; - no puede aparecer con relativas especificativas, ni con SNs cuyo núcleu se relacione con
; verbos impersonales meteorológicos (*su nevada nos dejó aislados). Tampoco en un SN con 
; núcleo elíptico (*su coche pequeño y mi grande).No se puede interpretar de forma impersonal, 
; a no ser que exista un antecedente impersonal sintácticamente explícito. Puede realizar las 
; funciones de poseedor, agente o tema, pronominalizando complementos o adjuntos introducidos 
; por la prep "de". Pero no pueden pronominalizar complementos locativos de procedencia, ni 
; adjuntos que expresan materia, ni expresiones temporales, ni los complementos partitivos 
; - Existe una jerarquía para la realización de los argumentos como posesivos: (POSEEDOR >) AGENTE > TEMA
; - when they follow the noun, they are modifiers and they require the def. article or the 
; demonstrative, e.g. la/esa canción tuya me gustó
; - (todo) + POSS + (adj. indef.)* + (adj. qual.)* + N'
;   e.g. (todos) tus (otros) (muchos/pocos/tres) libros
; - dem + POSS + N'
;   e.g. esos tus ojos
""". 

d_-_poss-mi_lex := det_poss &
 [ SYNSEM.LKEYS.KEYREL.PRED _mi_q_rel ]. 

d_-_poss-tu_lex := det_poss &
 [ SYNSEM.LKEYS.KEYREL.PRED _tu_q_rel ]. 

d_-_poss-su_lex := det_poss &
 [ SYNSEM.LKEYS.KEYREL.PRED _su_q_rel ].

d_-_poss-nuestro_lex := det_poss &
 [ SYNSEM.LKEYS.KEYREL.PRED _nuestro_q_rel ]. 

d_-_poss-vuestro_lex := det_poss &
 [ SYNSEM.LKEYS.KEYREL.PRED _vuestro_q_rel ].

; --- 6.4. Demonstratives

det_dem := det_nonque_nonrel_nonposs & 
  [ SYNSEM specfd_det_synsem &
           [ LOCAL.CAT [ POSTHEAD -,
                         VAL [ SPR < [ OPT +,
                                       LOCAL.CAT.HEAD.KEYS.KEY todo_def_q_rel ] >,
                               COMPS < > ] ],
             LKEYS [ KEYREL [ PRED dem_q_rel,
                              LBL #lbl ],
                     ALTKEYREL.LBL #lbl ] ] ]
"""
; --- 6.4. Demonstratives
; - when they follow the noun, they are modifiers and they require the definite article
; e.g. la canción esa me gustó
; - (todo) + DEM + (otro) (mucho/poco/cardinal) + N'
;   e.g. (todos) estos (otros) (muchos/pocos/tres) libros
; - DEM + poss + N'
;   e.g. esos tus ojos
""".

d_-_dem-este_lex := det_dem &
 [ SYNSEM.LKEYS.KEYREL.PRED _este_q_rel ].

d_-_dem-ese_lex := det_dem &
 [ SYNSEM.LKEYS.KEYREL.PRED _ese_q_rel ].

d_-_dem-aquel_lex := det_dem &
 [ SYNSEM.LKEYS.KEYREL.PRED _aquel_q_rel ].

d_-_tal_lex := det_nonque_nonrel_nonposs & 
  [ SYNSEM basic_det_synsem &
           [ LOCAL.CAT [ POSTHEAD -,
                         VAL [ SPEC < [ LOCAL.CAT.HEAD noun ] >,
                               SPR < >,
                               COMPS < > ] ],
             LKEYS [ KEYREL [ PRED _tal_q_rel,
                              LBL #lbl ],
                     ALTKEYREL.LBL #lbl ] ] ]
"""
; --- the demonstrative "tal" 
; e.g. en tal ocasión, en tales casos
""".

d_-_semejante_lex := det_nonque_nonrel_nonposs & 
  [ SYNSEM basic_det_synsem &
           [ LOCAL.CAT [ POSTHEAD -,
                         VAL [ SPEC < [ LOCAL.CAT.HEAD noun ] >,
                               SPR < >,
                               COMPS < > ] ],
             LKEYS [ KEYREL [ PRED _semejante_q_rel,
                              LBL #lbl ],
                     ALTKEYREL.LBL #lbl ] ] ]
"""
; --- The demonstrative "semejante" 
; e.g. semenjante persona no puede estar aquí
""".

; --- 6.5. Quantifiers

det_quant := det_nonque_nonrel_nonposs & 
  [ SYNSEM basic_det_synsem &
           [ LOCAL.CAT.VAL.COMPS < >,
             LKEYS [ KEYREL.LBL #lbl,
                     ALTKEYREL.LBL #lbl ] ] ].


; --- 6.5.1. Universal Def/Indef. Quantifier (cualquier)
  
d_-_q-cualquier_lex := det_quant &
  [ SYNSEM [ LOCAL [ AGR [ PNG.PN sing,
                           DIVISIBLE - ],
                     CAT [ POSTHEAD -,
                           VAL [ SPEC < [ LOCAL.CAT.HEAD noun ] >,
                                 SPR < > ] ] ],
             LKEYS.KEYREL.PRED _cualquiera_q_rel ] ]
  """
  --- 6.5.1. Universal Def/Indef. Quantifier (cualquier)
  - cualquier + (otro) + Count Sg_N'
  """.


aj_-_i-nprd-cualquiera_lex := aj_rel & a_intrans & norm-zero-arg &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD +,
                       HEAD [ PRD non-prd,
                              MOD < [ LOCAL.CAT [ HEAD.KEYS.ALTKEY undef_quant_q_rel,
                                                  VAL.SPR < [ LOCAL.CAT.HEAD.KEYS.KEY quant_rel ] > ] ] > ] ] ]
  """
  - cualquiera: it may follow (modify) the noun, but then it needs an indef. article or a cardinal number
  e.g. un hombre cualquiera, tres libros cualesquiera.
  """.

; --- 6.5.2. Universal (or definite) Quantifiers  

det_def_quant := det_quant &
  [ SYNSEM [ LOCAL.CAT.POSTHEAD -,
             LKEYS.KEYREL.PRED univ_quant_q_rel ] ]
  """
  --- 6.5.2. Universal (or definite) Quantifiers
  !!! pueden cuantificar nombres contables, de sustancia o abstractos
  - tienen caracter definido
  e.g. *hay [cada libro/ambos libros/todos los libros] en el estante
  """.


d_-_q-ambos_lex := det_nonque_nonrel &
  [ SYNSEM basic_det_synsem & [ LOCAL [ CAT [ POSTHEAD -,
                                              VAL.COMPS < > ],
                                        CONT [ HOOK.INDEX #index,
                                               HCONS <! [ LARG #larg ] !>,
                                               RELS <! relation,
                                                       #altkey & [ LBL #larg,
                                                                   PRED card_q_rel,
                                                                   ARG1 #index,
                                                                   CARG "2" ] !> ] ],
                                LKEYS [ KEYREL.PRED univ_quant_q_rel & _ambos_q_rel,
                                        ALTKEYREL #altkey ] ] ]
  """
  - AMBOS + Pl_N'
  """.


d_-_q-sendos_lex := det_def_quant &
  [ SYNSEM [ LOCAL [ AGR.PNG.PN plur,
                     CAT.VAL.SPEC < [ LOCAL.CAT.HEAD noun ] > ],
             LKEYS.KEYREL.PRED _sendos_q_rel ] ]
  """
  - SENDOS + Pl_N'
  """.


d_-_q-cada_lex := det_def_quant &
  [ SYNSEM [ LOCAL [ AGR.PNG.PN sing,
                     CAT.VAL.SPEC < [ LOCAL.CAT.HEAD noun ] > ],
             LKEYS.KEYREL.PRED _cada_q_rel ] ]
  """
  - CADA + Sg_N'
  e.g. íbamos al cine cada día
  """.


d_-_q-todo_lex := det_def_quant &
  [ SYNSEM specfd_det_synsem & [ LOCAL.CAT.VAL [ SPR < [ OPT +,
                                                         LOCAL [ CAT.HEAD.KEYS.KEY _casi_x_deg_rel,
                                                                 CONT.HOOK.LTOP #lbl ] ] >,
                                                 SPEC < [ LOCAL.CAT.HEAD.KEYS.KEY post_todo_q_rel ] > ],
                                 LKEYS [ KEYREL.PRED todo_def_q_rel,
                                         ALTKEYREL.LBL #lbl ] ] ]
  """
  - (casi) + TODO + art_def;dem;poss + N'
  e.g. (casi) todos los/estos/sus alumnos

  ;                         SPEC < [ LOCAL.CAT.HEAD.KEYS.KEY def_q_rel ] > ],
  
  """.


d_-_q-prn-todo_lex := det_def_quant &
  [ SYNSEM specfd_det_synsem & [ LOCAL [ AGR.PNG.PN plur,
                                         CAT.VAL [ SPR < [ OPT +,
                                                           LOCAL [ CAT.HEAD.KEYS.KEY _casi_x_deg_rel,
                                                                   CONT.HOOK.LTOP #lbl ] ] >,
                                                   SPEC < [ LOCAL [ CAT.HEAD noun & [ KEYS.KEY non_modable_rel ],
                                                                    CONT.HOOK.INDEX.PRONTYPE real_pron ] ] > ] ],
                                 LKEYS [ KEYREL.PRED todo_def_q_rel,
                                         ALTKEYREL.LBL #lbl ] ] ]
  """
  e.g. (casi) todos estos/nosotros
  """.

;--- 6.5.3. Non-universal (or indef.) Quantifiers
  
det_quant_indef := det_quant &
  [ SYNSEM [ LOCAL.CAT [ POSTHEAD -,
                         VAL.SPEC < [ LOCAL.CAT.HEAD noun ] > ],
             LKEYS.KEYREL.PRED undef_quant_q_rel ] ]
  """
  --- 6.5.3. Non-universal (or indef.) Quantifiers
  - forman SSNN indefinidos. e.g. había algunos/muchos/varios (otros) problemas
  """.


; --- 6.5.3.1. Cuantificadores de existencia

d_qnt-indf_alg-ning := det_quant_indef &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < > ]
"""
; --- 6.5.3.1. Cuantificadores de existencia
; - no pueden ser predicados, ni como atributos, ni como adjetivos pospuestos a otro 
; determinante. e.g. *sus problemas eran algunos/ningunos, *su alguna/ninguna compañera

; a)- ALGÚN/NINGÚN + (otro) Sg/Pl_N'
; - alguno/ninguno always follow the noun (e.g. no tengo miedo alguno); 
; algún/ningún always precede the nouns; alguna/os/as, ninguna may precede 
; and follow the noun. 

""". 


d_-_q-algun_lex := d_qnt-indf_alg-ning &
  [ SYNSEM.LKEYS.KEYREL.PRED _alguno_q_rel ]
  """
  
  """.


d_-_q-ningun_lex := d_qnt-indf_alg-ning &
  [ SYNSEM.LKEYS.KEYREL.PRED _ninguno_q_rel ]
  """
  
  """.


d_-_q-cuantos_lex := det_quant_indef &
  [ SYNSEM specfd_det_synsem & [ LOCAL [ AGR.PNG.PN plur,
                                         CAT.VAL.SPR < [ OPT -,
                                                         LOCAL.CAT.HEAD.KEYS.KEY art_indef_q_rel ] > ],
                                 LKEYS.KEYREL.PRED _cuantos_q_rel ] ]
  """
  b)- UNOS CUANTOS + (otro) Pl_N'
  e.g.
  """.


d_-_q-todo-sg_lex := det_quant &
  [ SYNSEM [ LOCAL [ AGR [ DIVISIBLE -,
                           PNG.PN sing ],
                     CAT [ POSTHEAD -,
                           VAL [ SPEC < [ LOCAL.CAT.HEAD noun ] >,
                                 SPR < > ] ] ],
             LKEYS.KEYREL.PRED todo_undef_q_rel ] ]
  """
  b)- TODO + (otro) Sg_N'
  e.g. toda persona ajena a la empresa
  """.

;--- 6.5.3.2. Cuantificadores evaluativos

det_quant_eval := det_nonque_nonrel &
  [ SYNSEM basic_det_synsem & [ LOCAL [ CAT [ POSTHEAD -,
                                              VAL [ SPEC < [ LOCAL.CAT.HEAD noun ] >,
                                                    COMPS < > ] ],
                                        CONT [ HOOK [ LTOP #ltop,
                                                      INDEX #index,
                                                      XARG #larg ],
                                               HCONS <! qeq & [ HARG #harg,
                                                                LARG #larg ] !>,
                                               RELS <! [ LBL #ltop,
                                                         PRED undef_q_rel,
                                                         ARG0 #index,
                                                         RSTR #harg ],
                                                       #altkey & [ PRED card_or_undef_q_rel,
                                                                   LBL #larg,
                                                                   ARG1 #index ] !> ] ],
                                LKEYS.ALTKEYREL #altkey ] ]
  """
  --- 6.5.3.2. Cuantificadores evaluativos
  pueden ser predicados, sea como atributo, sea como adjetivo pospuesto a otro
  determinante (i.e. se les aplicaran RLs que los convertiran en adj. indef.)
  e.g. sus problemas eran muchos/demasiado, sus demasiados/muchos problemas.
  """.


d_-_q-otro_lex := det_quant_eval &
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _otro_q_rel ] ]
  """
  a)- OTRO (mediante una regla léxica se convierte en adj. indef que modifica a un sust.
  que tendrá un especificador con KEYS.KEY pre_otro_q_rel
  (el/este/su/algún/poco/bastante) + otro + N'
  """.


d_-_q-mucho_lex := det_quant_eval &
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _mucho_q_rel ] ]
  """
  b)- MUCHO/POCO (mediante una regla léxica se convierten en adj. indef que modifican a un
  sust. que tendrán un especificador con KEYS.KEY pre_much_or_poc_q_rel
  (el/este/su/otro) + poco/mucho + N'
  lo mismo para los numerales cardinales
  """.


d_-_q-poco_lex := det_quant_eval &
  [ SYNSEM specfd_det_synsem & [ LOCAL.CAT.VAL.SPR < [ OPT +,
                                                       LOCAL [ CAT.HEAD.KEYS.KEY _muy_x_deg_rel,
                                                               CONT.HOOK.LTOP #lbl ] ] >,
                                 LKEYS [ ALTKEYREL.PRED _poco_q_rel,
                                         KEYREL.LBL #lbl ] ] ]
  """
  
  """.


det_quant_eval_div := det_quant_eval &
  [ SYNSEM [ LOCAL.AGR.DIVISIBLE +,
             LKEYS.ALTKEYREL.PRED undef_q_rel ] ]
  """
  c)- Other
  - mediante una regla léxica se convierten en adj. indef que modifican a un sust. que
  tendrán un especificador con KEYS.KEY def_q_rel
  - co-ocurring with divisible nouns (plural/mass nouns)
  """.


d_-_q-bastante_lex := det_quant_eval_div &
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _bastante_q_rel ] ]
  """
  
  """.


d_-_q-demasiado_lex := det_quant_eval_div &
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _demasiado_q_rel ] ]
  """
  
  """.


d_-_q-varios_lex := det_quant_eval_div &
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _varios_q_rel ] ]
  """
  
  """.


d_-_q-multiples_lex := det_quant_eval_div &
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _multiples_q_rel ] ]
  """
  
  """.


d_-_q-demas_lex := det_quant_eval_div &
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _demás_q_rel ] ]
  """
  DEMÁS puede aparecer sin artículo en el cierre de enumeración
  e.g. vinieron mi padre, mi madre y demás familia.
  """.


d_quant_eval := det_quant_eval &
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED undef_q_rel ] ]
  """
  - the following ones are now encoded as adjectives
  cierto, determinado, distinto, diverso, escaso, numeroso, raro, cuanto
  """.


d_-_q-cierto_lex := det_quant_indef & 
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _cierto_q_rel ] ].

d_-_q-determinado_lex := det_quant_indef & 
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _determinado_q_rel ] ].

d_-_q-diferente_lex := det_quant_indef & 
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _diferente_q_rel ] ].

d_-_q-distinto_lex := det_quant_indef & 
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _distinto_q_rel ] ].

d_-_q-diverso_lex := det_quant_indef & 
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _diverso_q_rel ] ].

d_-_q-escaso_lex := det_quant_indef & 
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _escaso_q_rel ] ].

d_-_q-numeroso_lex := det_quant_indef & 
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _numeroso_q_rel ] ].

d_-_q-raro_lex := det_quant_indef & 
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.ALTKEYREL.PRED _raro_q_rel ] ].

; --- 6.6. Comparative

basic-comp-det-lex := lex-item & 
  [ INFLECTED -,
    ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ],
    SYNSEM [ PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             MODIFIED notmod,
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     CAT.VAL.COMPS #comps ] ],
    ARG-ST #comps ].

basic_comp_det_synsem := basic_det_synsem &
  [ LOCAL [ CAT [ POSTHEAD -,
                  VAL [ SPEC < [ LOCAL [ CAT.VAL.COMPS < >,
                                         CONT.HOOK [ INDEX #index,
                                                     LTOP #larg ] ] ] >,
                        SPR < [ LOCAL local-min &
                                      [ CAT [ HEAD adv,
                                              VAL.SPR < > ],
                                        CONT.HOOK.LTOP #ltop ],
                                NON-LOCAL.QUE 0-dlist ] > ] ],
            CONT [ HOOK.LTOP #ltop,
                   HCONS <! qeq !>,
                   RELS <! [ PRED undef_q_rel ],
                           #altkey & [ LBL #larg,
                                       ARG1 #index ],
                           [ LBL #larg,
                             ARG1 #index ] !> ] ],
    LKEYS.ALTKEYREL #altkey,
    NON-LOCAL [ REL 0-dlist,
                QUE 0-dlist ] ].


det_cmp_deg_spec := basic-comp-det-lex &
  [ SYNSEM basic_comp_det_synsem & [ LOCAL [ CAT [ HEAD adv & [ KEYS.KEY comp_degree_rel ],
                                                   VAL [ SPEC < [ LOCAL.CAT.HEAD noun ] >,
                                                         SPR < [ LOCAL.CAT.HEAD.KEYS.KEY basic_quant_degree_rel ] >,
                                                         COMPS < [ LOCAL mrkd_np_local & [ CAT.HEAD.KEYS.KEY #ckey,
                                                                                           CONT.HOOK.INDEX #arg2 ] ] > ] ],
                                             CONT.RELS <! relation,
                                                          relation,
                                                          [ PRED compar,
                                                            ARG2 #arg2 ] !> ],
                                     LKEYS.--COMPKEY #ckey & _que_p_comp_rel ] ]
  """
  a)- (mucho/poco/bastante) + MÁS/MENOS + N' ( + que + N')
  e.g. (muchos) más niños (que niñas)
  """.


d_pp_cmp-mas_lex := det_cmp_deg_spec &
  [ SYNSEM.LKEYS.ALTKEYREL.PRED _más_q_rel ]
  """
  
  """.


d_pp_cmp-menos_lex := det_cmp_deg_spec &
  [ SYNSEM.LKEYS.ALTKEYREL.PRED _menos_q_rel ]
  """
  
  """.


d_pp_cmp-tanto_lex := basic-comp-det-lex &
  [ SYNSEM basic_comp_det_synsem & [ LOCAL [ CAT [ HEAD det & [ KEYS.KEY comp_degree_rel ],
                                                   VAL [ SPEC < [ LOCAL.CAT.HEAD noun ] >,
                                                         SPR < [ LOCAL.CAT.HEAD.KEYS.KEY _casi_x_deg_rel ] >,
                                                         COMPS < [ LOCAL mrkd_np_local & [ CAT.HEAD.KEYS.KEY #ckey,
                                                                                           CONT.HOOK.INDEX #arg2 ] ] > ] ],
                                             CONT.RELS <! relation,
                                                          relation,
                                                          [ PRED comp_equal_rel,
                                                            ARG2 #arg2 ] !> ],
                                     LKEYS [ ALTKEYREL.PRED _tanto_q_rel,
                                             --COMPKEY #ckey & _como_p_comp_rel ] ] ]
  """
  b)- (casi) TANTO + N' ( + como N')
  e.g. tantos niños (como niñas)
  """.


; c)- (mucho/poco/bastante) + MÁS/MENOS + 'de' + Number
; e.g. más/menos de tres chicos
; det_cmp_deg_spec_numb := basic-comp-det-lex &
;   [ SYNSEM basic_comp_det_synsem &
;            [ LOCAL [ CAT [ HEAD adv & [ KEYS.KEY comp_degree_rel ],
;                            VAL [ SPR < [ LOCAL.CAT.HEAD.KEYS.KEY basic_quant_degree_rel ] >,
;                                  SPEC < [ LOCAL mrkd_np_local & 
;                                                 [ CAT.HEAD.KEYS [ KEY _de_p_sel_rel,
;                                                                   ALT2KEY undef_q_rel ] ] ] > ] ],
;                      CONT.RELS <! relation, relation, [ PRED compar ] !> ] ] ]. 

; d_pp_cmp-mas-de_lex := det_cmp_deg_spec_numb &
;  [ SYNSEM.LKEYS.ALTKEYREL.PRED _más_q_rel ].

; d_pp_cmp-menos-de_lex := det_cmp_deg_spec_numb &
;  [ SYNSEM.LKEYS.ALTKEYREL.PRED _menos_q_rel ].


; --- 6.7. Relative determiners 

; a)-  "cuyo" (whose)
; - can only appear in restrictive and non-restrictive RCs
; - does nor agree with the antecedent (i.e. possessor), but the head of the NP (e.g. el autor cuya novela 
; fue premiada estaba exultante)
; - only appears sólo puede aparecer al frente de SN determinados. Cuando el elemento poseído es indeterminado,
; es sustituido por un SP encabezado por "de"
rel_det_synsem := basic_det_synsem & 
  [ LOCAL.CONT [ HOOK.INDEX #index,
		 RELS <! relation,
                         #altkey & prep-relation &
                         [ PRED poss_rel,
                           LBL #hand,
                           ARG1 #index,
                           ARG2 #ind ] !>,
                 HCONS <! qeq !> ],
    NON-LOCAL.REL 1-dlist & 
	          [ LIST < [ LTOP #hand,
			     INDEX #ind ] > ],
    LKEYS [ KEYREL.PRED proper_q_rel,
            ALTKEYREL #altkey ] ]
"""
; a)-  "cuyo" (whose)
; - can only appear in restrictive and non-restrictive RCs
; - does nor agree with the antecedent (i.e. possessor), but the head of the NP (e.g. el autor cuya novela 
; fue premiada estaba exultante)
; - only appears sólo puede aparecer al frente de SN determinados. Cuando el elemento poseído es indeterminado,
; es sustituido por un SP encabezado por "de"
""".

d_-_rel-poss_lex := det_rel & 
  [ SYNSEM rel_det_synsem ].

; d_rel_cuanto_lex := det_rel.

 
; --- 6.8. Interrogative determiners
 

d_-_wh-que_lex := det_que &
  [ SYNSEM basic_det_synsem & [ LOCAL [ CAT.VAL [ SPEC < [ LOCAL.CAT.HEAD noun ] >,
                                                  SPR < >,
                                                  COMPS < > ],
                                        CONT [ RELS <! quant-relation !>,
                                               HCONS <! qeq !> ] ],
                                LKEYS.KEYREL.PRED que_q_rel ] ]
  """
  - qué (what) (e.g. ¿qué libros has leído?)
  """.


d_-_wh-cual_lex := det_que &
  [ SYNSEM basic_det_synsem & [ LOCAL [ CAT.VAL [ SPEC < [ LOCAL.CAT.HEAD noun ] >,
                                                  SPR < >,
                                                  COMPS < > ],
                                        CONT [ RELS <! quant-relation !>,
                                               HCONS <! qeq !> ] ],
                                LKEYS.KEYREL.PRED que_q_rel ] ]
  """
  - cuál (which) (e.g. ¿cuáles poemas de Neruda conoces?)
  """.


d_-_wh-cuanto_lex := det_que &
  [ SYNSEM basic_det_synsem & [ LOCAL [ AGR.DIVISIBLE +,
                                        CAT.VAL [ SPEC < [ LOCAL.CAT.HEAD noun ] >,
                                                  SPR < >,
                                                  COMPS < > ],
                                        CONT [ HOOK [ INDEX #index,
                                                      XARG #larg ],
                                               RELS <! quant-relation & [ PRED undef_q_rel ],
                                                       #altkey & [ LBL #larg,
                                                                   ARG1 #index ] !>,
                                               HCONS <! qeq !> ] ],
                                LKEYS.ALTKEYREL #altkey ] ]
  """
  - cuánto + Mass/Pl_N' (how much/many) (e.g. ¿cuánto dinero te dieron?)
  """.



; --- 6.9. Exclamative determiners 
;
; 'qué/cuánto/cuál' + Sg/Pl_N'
; e.g. 
det_excl := det_nonque_nonrel_nonposs & 
  [ SYNSEM basic_det_synsem &
           [ LOCAL.CAT [ POSTHEAD -,
                         VAL [ SPEC < [ LOCAL.CAT.HEAD noun ] >,
                               SPR < >,
                               COMPS < > ] ],
             LKEYS [ KEYREL [ PRED excl_q_rel,
                              LBL #lbl ],
                     ALTKEYREL.LBL #lbl ] ] ]
"""
; 'qué/cuánto/cuál' + Sg/Pl_N'
; e.g. 
""".

d_-_excl-que_lex := det_excl &
 [ SYNSEM.LKEYS.KEYREL.PRED _que_q_rel ].

d_-_excl-cuanto_lex := det_excl &
 [ SYNSEM.LKEYS.KEYREL.PRED _cuanto_q_rel ].

d_-_excl-cual_lex := det_excl &
 [ SYNSEM.LKEYS.KEYREL.PRED _cual_q_rel ].


;
; 'qué de' + Mass/Count_Pl N'
; e.g. ¡Qué de agua/casas!
;
; 'cuánto'
;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- 7. Numerals

; --- 7.1. Cardinals (Indef. Quantifiers/Pronoun)


d_-_q-nu-card_lex := det_quant_eval &
  [ SYNSEM [ LOCAL [ AGR.PNG.PN 3pl,
                     CAT.VAL.SPR < > ],
             LKEYS.ALTKEYREL.PRED card_q_rel ] ]
  """
  a)- determiners / indef. adjectives (Z)
  !!! num + sust pueden formar una unidad inseparable, e.g. esas tristes dos pesetas,
  esas famosas tres tardes con Teresa
  e.g. (los) tres hermanos
  """.


n_pp_pr-part-nu-card_lex := partitive-pron-lex &
  [ SYNSEM norm-basic-partitive-pron-synsem & [ LOCAL [ AGR.PNG.GEN #gender,
                                                        CAT.VAL.COMPS < [ OPT -,
                                                                          LOCAL.CONT.HOOK.INDEX.PNG [ PN plur,
                                                                                                      GEN #gender ] ] > ],
                                                NON-LOCAL.QUE 0-dlist,
                                                LKEYS.ALTKEYREL.PRED card_q_rel ] ]
  """
   b)- pronouns (Z)
   e.g. dame dos (de ésos/de esos libros), dos (de nosotros) comeremos sopa.
  n_pp_pr-part-nu-card_lex := partitive-pron-lex &
    [ SYNSEM norm_partitive_synsem &
             [ LKEYS.ALTKEYREL.PRED card_q_rel ] ].
  """.


n_pp_pr-psd-part-nu-card_lex := basic-nominal-lex &
  [ SYNSEM norm-basic-partitive-pron-synsem & [ LOCAL [ AGR #agr,
                                                        CAT.VAL [ SPR #spr & < [ OPT + ] >,
                                                                  COMPS #comps & < [ OPT -,
                                                                                     LOCAL [ CAT.HEAD.KEYS.ALT2KEY udef_q_rel,
                                                                                             CONT.HOOK.INDEX.DIVISIBLE + ] ] > ],
                                                        CONT.HOOK.INDEX #agr ] ],
    ARG-ST < #spr . #comps > ]
  """
  c)- pseudo-partitive pronouns (Zd): decena, docena, centenar, millar, millón
  e.g. compró tres docenas (de (*los) huevos)
  """.


n_pp_psd-part-nu-card_lex := n_quant &
  [ ALTS.PASS -,
    SYNSEM n_group-or-pseudopart_synsem & [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ]
  """
  d)- pseudo-partitive nouns; e.g. decena, veintena, treintena,
  """.



; --- 7.2. Ordinals (Adjectives)

aj_-_i-nu-ord_lex := non-modfied-adj-lex & a_mrkd_np & basic-one-arg &
  [ SYNSEM intersective_adjective_synsem &
            [ LOCAL.CAT [ HEAD.PRD prd,
                          VAL.COMPS < [ OPT +,
                                        LOCAL.CAT.HEAD.KEYS.KEY _de_p_sel_rel ] > ] ] ]
"""
; NOTA: los ordinales precedidos de 'lo' pueden desempeñar funciones típica de 
; sustantivos (e.g. me propuso ir al cine o tomar una copa, y elegí lo segundo) y de 
; adverbios (e.g. lo rechazaron por dos razones: lo primero, porque...; lo segundo, porque...)
; e.g. los/sus/estos/dos primeros pasos. *su segundo/el segundo suyo.
; NOTA: in the ERG there is the feature CARG to specify the numeral
""".

aj_-_i-nu-ord-ms_lex := non-modfied-adj-lex & a_mrkd_np & basic-one-arg &
  [ SYNSEM intersective_adjective_synsem &
            [ LOCAL [ AGR [ PNG [ GEN masc,
                                  PN 3sg ] ],
                      CAT [ HEAD.PRD prd,
                            VAL.COMPS < [ OPT +,
                                          LOCAL.CAT.HEAD.KEYS.KEY _de_p_sel_rel ] > ] ] ] ].

; --- 7.3. Partitives
  

n_pp_part-nu_lex := n_pp_part_lex
  """
  --- 7.3. Partitives
  a)- se combinan con cardinales; e.g. un tercio (de (los) alumnos)
  b)- card + ord + "parte"; e.g. dos terceras partes
  !!! also for percentage!!!
  """.


aj_-_i-nu-part_lex := non-modfied-adj-lex & a_intrans & norm-zero-arg &
  [ SYNSEM intersective_adjective_synsem & [ LOCAL.CAT [ POSTHEAD -,
                                                         HEAD.PRD non-prd ] ] ]
  """
  --- 7.3. Partitives
  c)- el sustantivo "mitad" puede dar lugar a una construcción comparativa
      e.g. la mitad (de (los) asistentes), gana la mitad (de dinero) (que su hermana)
  d)- el adjetivo medio se combina con cualquier sustantivo, incluso los sust. cardinales
      e.g. medio pollo, medio millar/centenar de personas.
  """.

; --- 7.4. Multiplicative (doble, triple, duplo, triplo, cuádruplo)
  
n_pp_pr-part-nu-mult_lex := spec-partitive-pron-lex &
  [ SYNSEM norm-basic-partitive-pron-synsem & [ LOCAL.CAT.VAL.SPR < [ OPT -,
                                                                      LOCAL.CAT.HEAD.KEYS.KEY art_def_q_rel ] >,
                                                NON-LOCAL.SLASH 0-dlist ] ]
  """
  --- 7.4. Multiplicative (doble, triple, duplo, triplo, cuádruplo)
  a)- quantitive reading (pronoun)
  e.g. comió el doble/triple (de pan) (que su hermana)
       es el doble de bueno (que yo)
  """.


aj_-_i-nu-mult_lex := non-modfied-adj-lex & a_intrans & norm-zero-arg &
  [ SYNSEM intersective_adjective_synsem & [ LOCAL [ CAT.HEAD.PRD prd,
                                                     CONT.HCONS <! !> ] ] ]
  """
  --- 7.4. Multiplicative (doble, triple, duplo, triplo, cuádruplo)
  b)- qualificative reading (adjective)
  e.g. tiene (una) doble personalidad/personalidad doble
  """.


d_-_q-nu-distr_lex := det_quant_indef &
  [ SYNSEM [ LOCAL.CAT.VAL.SPR < >,
             LKEYS.KEYREL.PRED distr_numb_q_rel ] ]
  """
  --- 7.4. Multiplicative (doble, triple, duplo, triplo, cuádruplo)
   c)- adverbial reading
   e.g. tuvo que estudiar el triple, pagó doble
  av_-_nu-mult_lex :=
   --- 7.5. Distributive
   - cardinal + 'de' + 'cada' + cardinal + N' (Zp)
   e.g. íbamos al cine tres de cada dos domingos
  """.




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- 8. Complementizers

basic-comp-lex := lex-item & 
  [ ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS -,
           VCALT -],
    INFLECTED -,
    SYNSEM [ PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             MODIFIED notmod,
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     CAT [ HEAD comp,
                           VAL.COMPS #comps ] ] ], 
    ARG-ST #comps ]. 

basic_comp_synsem := lex-synsem &
  [ LOCAL local-min &
          [ AGR.PNG.PN 3sg,
            CAT [ MC -,
                  HEAD [ INV -, 
                         AUX - ],
                  VAL [ COMPS < [ OPT -,
                                  LOCAL [ COORD -,
                                          CAT.VAL.CLTS < > ] ] >, 
                        SPR < > ] ],
            CONT [ HOOK [ LTOP #ltop,
                          INDEX #index ],
                   RELS <! #keyrel !> ] ],
    LKEYS.KEYREL #keyrel & [ LBL #ltop,
                             ARG0 #index ] ].

comp_synsem := basic_comp_synsem & 
  [ LOCAL.CAT [ HEAD [ VFORM #vform, 
                       TAM #tam, 
                       MOD < > ],
                VAL [ SUBJ < >,
                      COMPS < [ LOCAL.CAT [ HEAD [ VFORM #vform,
                                                   TAM #tam,
                                                   KEYS.KEY #ckey ],
                                            VAL.COMPS < > ] ] >,
                      CLTS < > ] ], 
    LKEYS.--COMPKEY #ckey ]. 

ques_comp_synsem := basic_comp_synsem & 
  [ LOCAL [ CAT [ HEAD.KEYS [ ALTKEY ques,
                              ALT2KEY ques ],
                  VAL.COMPS < [ LOCAL.CONT.HOOK [ INDEX #event, 
                                                  LTOP #larg ] ] > ],
            CONT [ HOOK.INDEX #event & [ SF prop-or-ques ],
                   HCONS <! qeq & [ LARG #larg,
                                    HARG #harg ] !> ] ],  
    NON-LOCAL.SLASH 0-dlist, 
    LKEYS.KEYREL [ PRED verb_aspect_rel, 
                   ARG2 #harg ] ].

s_fin_prop-or-ques_comp_synsem := comp_synsem &
  [ LOCAL [ CAT [ HEAD [ VFORM fin,
                         TAM #tam, 
                         KEYS [ KEY verb_aspect_rel,
                                ALTKEY prop,
                                ALT2KEY #alt2key & prop ] ],
                  VAL.COMPS < [ LOCAL s_or_cp_fin_local &
                                      [ CAT.HEAD +vc & [ KEYS.ALTKEY #alt2key ],
                                        CONT.HOOK.LTOP #larg ] ] > ],  
            CONT [ HOOK [ INDEX [ E #tam,
                                  SF prop-or-ques ] ],
                   HCONS <! qeq & [ LARG #larg,
                                    HARG #harg ] !> ] ], 
    LKEYS.KEYREL [ PRED verb_aspect_rel, 
                   ARG2 #harg ] ].

s_fin_ques_comp_synsem := comp_synsem & ques_comp_synsem & 
  [ LOCAL.CAT [ HEAD [ VFORM fin,
                       KEYS.KEY verb_aspect_rel ],
                VAL.COMPS < [ LOCAL v_fin_local &
                                    [ CAT.HEAD +vc ] ] > ] ]. 

vp_inf_ques_comp_synsem := ques_comp_synsem &
  [ LOCAL.CAT [ HEAD [ VFORM #vform, 
                       TAM #tam, 
                       KEYS.KEY verb_aspect_rel ],
                VAL [ SUBJ #subj,
                      COMPS < [ LOCAL vp_inf_local &
                                      [ CAT [ HEAD [ AUX -,
                                                     VFORM #vform,
                                                     TAM #tam ],
                                              VAL [ SUBJ #subj,
                                                    CLTS < > ] ] ] ] >,
                      CLTS < > ] ] ]. 



cm_s_lex := basic-comp-lex & basic-one-arg &
  [ SYNSEM s_fin_prop-or-ques_comp_synsem ]
  """
  --- 8. Complementizers
  e.g. no me gusta que a los toros te pongas la minifalda; gritó que dónde habíamos puesto el dinero
  """.


cm_s_q_lex := basic-comp-lex & basic-one-arg &
  [ SYNSEM s_fin_ques_comp_synsem ]
  """
  --- 8. Complementizers
  e.g. no sé si vendrá
  """.


cm_vp_q_lex := basic-comp-lex & basic-one-arg &
  [ SYNSEM vp_inf_ques_comp_synsem ]
  """
  --- 8. Complementizers
  e.g. no sé si ir
  """.



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- 9. Conjunctions 

; --- 9.1. Subordinating conjunctions

basic-subconj-lex :=  lex-item & 
  [ INFLECTED -,
    ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ],
    SYNSEM [ PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             MODIFIED notmod,
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     CAT [ HEAD adp,
                           VAL.COMPS #comps ] ] ],
    ARG-ST #comps ].

basic_subconj_synsem := lex-synsem &
  [ MODIFIED notmod,
    LOCAL [ CAT [ MC -,
                  HEAD [ INV -,
                         AUX -,
                         KEYS.KEY subord_rel,
                         PRD non-prd,
                         MOD < [ LOCAL scopal-mod &
				       [ CAT.HEAD verb,
					 CONT.HOOK.LTOP #modltop ] ] > ],
		  VAL.SUBJ < > ],
            CONT [ HOOK.INDEX event,
		   RELS.LIST < subord-relation &
                                [ ARG1 #main ], ... >,
                   HCONS.LIST < qeq & [ HARG #main,
                                        LARG #modltop ], ... > ] ] ].

subconj_lex_synsem := basic_subconj_synsem &
  [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CONT.HOOK.INDEX.SF #sf ] >,
                  VAL.SPR < > ],
            CONT [ HOOK [ LTOP #ltop,
                          INDEX #ind & [ SF #sf & prop-or-ques ] ],
                   RELS.LIST < [ LBL #ltop,
                                 ARG0 #ind ], ... > ] ] ].

basic_onearg_subconj_synsem := subconj_lex_synsem & 
  [ LOCAL [ CAT.VAL.COMPS < [ OPT -,
                              LOCAL local & 
                                    [ COORD -,
                                      CAT [ HEAD +vc & [ MOD < > , KEYS.KEY #ckey ],
                                            VAL [ COMPS < >,
                                                  CLTS < > ] ],
                                      CONT.HOOK.LTOP #larg ],
                              NON-LOCAL [ REL 0-dlist,
                                          QUE 0-dlist ] ] >,
            CONT [ RELS <! #keyrel & [ ARG2 #harg ] !>,
                   HCONS <! qeq, qeq & [ HARG #harg,
                                         LARG #larg ] !> ] ],
    LKEYS [ KEYREL #keyrel,
            --COMPKEY #ckey ] ].

subconj_s_synsem := basic_onearg_subconj_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT [ HEAD [ VFORM fin,
                                               TAM.MOOD ind_or_sub_mood ],
                                        VAL.SUBJ < > ] ] >,
    NON-LOCAl [ SLASH 0-dlist,
                REL 0-dlist,
                QUE 0-dlist ] ]. 

subconj_inf_ctrl_synsem := basic_onearg_subconj_synsem &
  [ LOCAL.CAT [ HEAD.MOD < [ LOCAL.CONT.HOOK.XARG #ctrl ] >,
                VAL.COMPS < [ LOCAL [ CAT [ HEAD verb & [ VFORM inf ],
                                            VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX #ctrl ] > ],
                                      CONT.HOOK.XARG #ctrl ] ] > ] ].

subconj_inf_synsem := basic_onearg_subconj_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD verb & [ VFORM inf ] ] > ].




p_cl_vm_lex := basic-subconj-lex & basic-one-arg &
  [ SYNSEM subconj_s_synsem & [ LOCAL.CAT [ HEAD.MOD < [ LOCAL.CAT.VAL.COMPS < > ] >,
                                            VAL.COMPS < [ LOCAL.CAT.HEAD verb ] > ] ] ]
  """
  Subordinating conjunctions
  e.g. aunque se disculpe, no volveré; mientras siga allí, no lo conseguirá; lo compré porque quise
  """.


p_cp_vm_lex := basic-subconj-lex & basic-one-arg &
  [ SYNSEM subconj_s_synsem & [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD comp ] > ] ]
  """
  Subordinating conjunctions
  locative prep. and 'durante' can't take cp_prop_fin or vp_inf
  e.g. con que vengan, no arreglas nada (modal); no he vuelto desde que se fueron (tmp); no cejó hasta
  que lo consiguió (tmp); lo repito para que no te olvides (purpose); lo he aprendido sin que me hayan
  ayudado (mode)
  """.


p_vp_vm_lex := basic-subconj-lex & basic-one-arg &
  [ SYNSEM subconj_inf_synsem ]
  """
  Subordinating conjunctions
  e.g. al terminar la función, nos despedimos
  """.


p_vp_ctrl-vm_lex := basic-subconj-lex & basic-one-arg &
  [ SYNSEM subconj_inf_ctrl_synsem ]
  """
  Subordinating conjunctions
  e.g. disparaban a matar (purpose), con no comer no arreglas nada (modal), no paró hasta conseguirlo
  (tmp), le llamó para quedar con él (purpose), enfermó por no comer (cause), trabaja sin cesar (mode),
  tras venderlo se arrepintió (tmp)
  """.




; --- 9.2. Coordinating Conjunctions

basic-coordconj-lex := lex-item & 
  [ INFLECTED -,
    ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ],
    CFORM string,
    SYNSEM [ PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             MODIFIED notmod,
             LOCAL [ COORD -,
                     CAT [ HEAD conj,
                           VAL.COMPS < #comps & [ OPT - ] > ] ] ],
    ARG-ST < #comps > ].

basic_coordconj_synsem := lex-synsem &
  [ MODIFIED notmod,
    LOCAL [ CAT [ HEAD.MOD < >,
                  VAL [ SUBJ < >,
                        SPR < > ] ],
            CONT.HCONS <! !> ] ].

norm_coordconj_synsem := basic_coordconj_synsem & 
  [ LOCAL [ CAT.HEAD [ LEFT < >,
                       KEYS.KEY #key ],
            CONT [ HOOK [ LTOP #ltop,
                          INDEX #index ],
                   RELS <! #keyrel !> ] ],
    LKEYS.KEYREL #keyrel & coordination-relation & 
                 [ PRED #key,
                   LBL #ltop,
                   C-ARG #index ] ].


norel_coordconj_synsem := basic_coordconj_synsem &
  [ LOCAL [ COORD-STRAT two,
            CAT.HEAD.KEYS.KEY #key,
            CONT.RELS <! !> ],
    LKEYS.KEYREL.PRED #key ]
  """
  norel_coordconj contributes no relation, used in "omnisyndeton" coord.
  """.


c_xp_comma_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LOCAL.COORD-STRAT one,
                                     LKEYS.KEYREL.PRED _comma_c_rel ] ]
  """
  -- punctuations as conjunctions
  """.


c_xp_fstop_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LOCAL.COORD-STRAT one,
                                     LKEYS.KEYREL.PRED _full-stop_c_rel ] ]
  """
  
  """.


c_xp_semi-cln_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LOCAL.COORD-STRAT one,
                                     LKEYS.KEYREL.PRED _semi-cln_c_rel ] ]
  """
  
  """.


c_xp_y_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LOCAL.COORD-STRAT one,
                                     LKEYS.KEYREL.PRED _y_c_rel ] ]
  """
  - multiple copulative coordination: 'y' (and) (e.g. Juan y Pedro lloran).
  """.


c_xp_e_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LOCAL.COORD-STRAT one,
                                     LKEYS.KEYREL.PRED _y_c_rel ] ]
  """
  
  """.


c_xp_o_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LKEYS.KEYREL.PRED _o_c_rel ] ]
  """
  - multiple disjunctive coordination: 'o' (or) (Juan o Pedro lloran).
  """.


c_xp_u_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LKEYS.KEYREL.PRED _o_c_rel ] ]
  """
  
  """.


c_xp_o-nrel_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norel_coordconj_synsem & [ LOCAL.CAT.HEAD.LEFT < _o_c_rel >,
                                      LKEYS.KEYREL.PRED _o_c_rel ] ]
  """
  - exclusive disjunction: 'o...o' (either) (e.g. o Juan o Marta traerán el regalo)
  Not with imperatives, interrogatives and exclamatives
  """.


c_xp_u-nrel_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norel_coordconj_synsem & [ LOCAL.CAT.HEAD.LEFT < _o_c_rel >,
                                      LKEYS.KEYREL.PRED _o_c_rel ] ]
  """
  
  """.


c_xp_ni_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LKEYS.KEYREL.PRED _ni_c_rel ] ]
  """
  - '(ni)...ni' (neither) (e.g. no traje el libro ni para Juan ni para Pedro)
  Can't co-occur within a prepositional complement (*traje el libro para Juan ni Pedro,
  *no traje el libro para Juan ni Pedro, *no traje el libro para ni Juan ni Pedro)
  La posibilidad de omitir el primer 'ni' depende de la posición del sintagma: en
  posición pre-verbal no es posible, en posición post-verbal sí.
  """.


c_xp_ni-nrel_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norel_coordconj_synsem & [ LOCAL.CAT.HEAD.LEFT < _ni_c_rel >,
                                      LKEYS.KEYREL.PRED _ni_c_rel ] ]
  """
  
  """.


c_xp_sea_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LOCAL.COORD-STRAT two,
                                     LKEYS.KEYREL.PRED _sea_c_rel ] ]
  """
  - 'sea...(o) sea' (be it) (e.g. lo compraremos de todos modos, sea grande (o) sea pequeño)
  Can't co-occur in argumental complements (*el monstruo era sea grande (o) sea pequeño).
  """.


c_xp_sea-nrel_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norel_coordconj_synsem & [ LOCAL.CAT.HEAD.LEFT < _sea_c_rel >,
                                      LKEYS.KEYREL.PRED _sea_c_rel ] ]
  """
  
  """.


c_xp_o-sea-nrel_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norel_coordconj_synsem & [ LOCAL.CAT.HEAD.LEFT < _sea_c_rel >,
                                      LKEYS.KEYREL.PRED _o_sea_c_rel ] ]
  """
  
  """.


c_xp_bien_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LOCAL.COORD-STRAT two,
                                     LKEYS.KEYREL.PRED _bien_c_rel ] ]
  """
  - '(o) bien...(o) bien' (either) e.g. recoge el correo (o) bien en la tarde (o) bien en la mañana
  """.


c_xp_bien-nrel_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norel_coordconj_synsem & [ LOCAL.CAT.HEAD.LEFT < _bien_c_rel >,
                                      LKEYS.KEYREL.PRED _bien_c_rel ] ]
  """
  
  """.


c_xp_o-bien_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LOCAL.COORD-STRAT two,
                                     LKEYS.KEYREL.PRED _o_bien_c_rel ] ]
  """
  
  """.


c_xp_o-bien-nrel_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norel_coordconj_synsem & [ LOCAL.CAT.HEAD.LEFT < _bien_c_rel >,
                                      LKEYS.KEYREL.PRED _o_bien_c_rel ] ]
  """
  
  """.


c_xp_o-bien-nrel-o-bien_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norel_coordconj_synsem & [ LOCAL.CAT.HEAD.LEFT < _o_bien_c_rel >,
                                      LKEYS.KEYREL.PRED _o_bien_c_rel ] ]
  """
  
  """.


c_xp_ora_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LOCAL.COORD-STRAT two,
                                     LKEYS.KEYREL.PRED _ora_c_rel ] ]
  """
  - 'ora...ora' (e.g. tomando ora la espada, ora la pluma)
  """.


c_xp_ora-nrel_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norel_coordconj_synsem & [ LOCAL.CAT.HEAD.LEFT < _ora_c_rel >,
                                      LKEYS.KEYREL.PRED _ora_c_rel ] ]
  """
  
  """.


; - 'siquiera' (e.g. siquiera venga, siquiera no venga')
;c_xp_siquiera_lex := basic-coordconj-lex & basic-one-arg &
;  [ SYNSEM norm_coordconj_synsem &
;           [ LOCAL.COORD-STRAT two,
;             LKEYS.KEYREL.PRED _siquera_c_rel ] ].
;
;c_xp_siquiera-nrel_lex := basic-coordconj-lex & basic-one-arg &
;  [ SYNSEM norel_coordconj_synsem &
;           [ LOCAL.CAT.HEAD.LEFT < _siquera_c_rel >,
;             LKEYS.KEYREL.PRED _siquera_c_rel ] ]. 


c_xp_tanto_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LKEYS.KEYREL.PRED _tanto_c_rel ] ]
  """
  - complex conjunctions (tanto...como, no solo... sino, así como) (e.g. tanto el vino como la
  cerveza/no sólo el vino, sino la cerveza,/el vino, así como la cerveza, contienen alcohol)
  May co-occur with the same categories as 'y' except with finite and non-finite main sentences
  (e.g. *tanto el padre trabaja como el hijo estudia); subordinated clauses may be coordinated
  (e.g. espero tanto que Ana estudie filología como que Rosa estudie veterinaria; espero que tanto
  Ana estudie filología como que/*que como Rosa estudie veterinaria)
  """.


c_xp_como-nrel_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norel_coordconj_synsem & [ LOCAL.CAT.HEAD.LEFT < _tanto_c_rel >,
                                      LKEYS.KEYREL.PRED _como_c_rel ] ]
  """
  
  """.


c_xp_no-sólo_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LOCAL.COORD-STRAT two,
                                     LKEYS.KEYREL.PRED _no_sólo_c_rel ] ]
  """
  
  """.


c_xp_sino-nrel_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norel_coordconj_synsem & [ LOCAL.CAT.HEAD.LEFT < _no_sólo_c_rel >,
                                      LKEYS.KEYREL.PRED _sino_c_rel ] ]
  """
  
  """.


c_xp_así-como_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LKEYS.KEYREL.PRED _así_como_c_rel ] ]
  """
  
  """.


c_xp_aunque_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem & [ LOCAL.COORD-STRAT one,
                                     LKEYS.KEYREL.PRED _aunque_c_rel ] ]
  """
  - adversative conjunctions 'pero', 'mas', 'sino' (but), 'aunque', 'siquiera' (though),
  (e.g. el miércoles iremos a ver a Pepe, pero el jueves volveremos aquí (*,pero el viernes nos vamos)).
  'aunque','siquiera', 'pero' and 'mas' do not co-occur with nouns unless the second one is negated
  (e.g. vino con mi hermano, pero/aunque/mas no con mi hermana), or the noun is modified (only with 'pero'
  (e.g. vimos conejos enormes, *aunque/pero liebres pequeñitas.)
  'sino' exige la presencia de la negación (e.g. no recogímos a Rosa sino a Elena), no puede aparecer
  como sujeto (e.g. *no Rosa sino Ana vino) a menos que haya pausa (e.g. No Rosa, sino Ana vino).
  """.


c_xp_siquiera_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem &
           [ LOCAL.COORD-STRAT one,
             LKEYS.KEYREL.PRED _siquiera_c_rel ] ].

c_xp_siquier_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem &
           [ LOCAL.COORD-STRAT one,
             LKEYS.KEYREL.PRED _siquier_c_rel ] ].

c_xp_mas_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem &
           [ LOCAL.COORD-STRAT one,
             LKEYS.KEYREL.PRED _mas_c_rel ] ].

c_xp_pero_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem &
           [ LOCAL.COORD-STRAT one,
             LKEYS.KEYREL.PRED _pero_c_rel ] ].

c_xp_empero_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem &
           [ LOCAL.COORD-STRAT one,
             LKEYS.KEYREL.PRED _empero_c_rel ] ].

c_xp_sino_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem &
           [ LOCAL.COORD-STRAT one,
             LKEYS.KEYREL.PRED _sino_c_rel ] ].

c_xp_sin-embargo_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem &
           [ LOCAL.COORD-STRAT one,
             LKEYS.KEYREL.PRED _sin_embargo_c_rel ] ].

c_xp_sino-que_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem &
           [ LOCAL.COORD-STRAT one,
             LKEYS.KEYREL.PRED _sino_que_c_rel ] ].

c_xp_eso-que_lex := basic-coordconj-lex & basic-one-arg &
  [ SYNSEM norm_coordconj_synsem &
           [ LOCAL.COORD-STRAT one,
             LKEYS.KEYREL.PRED _eso_que_c_rel ] ].

; -- Conjunciones atípicas
; - 'tras' (after) (e.g. desfilaron niño tras niño, un invitado tras 
; otro dejaron sus regalos sobre la mesa, *vinieron niño tras perro). 
; Los SSNN deben ser del mimo tipo. 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- 10. Interjecciones

basic-interj-lex := lex-item &
  [ INFLECTED -,
    ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ],
    SYNSEM [ PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             MODIFIED notmod,
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     CAT.HEAD interj & [ MOD < > ] ],
             NON-LOCAL [ SLASH 0-dlist,
                         REL 0-dlist,
                         QUE 0-dlist ],
             LKEYS.KEYREL event-relation ] ].

interj_synsem := lex-synsem &
  [ LOCAL [ COORD-STRAT zero,
            CAT [ MC na,
	          VAL [ SUBJ < >,
                        COMPS < >,
                        SPEC < >,
                        SPR < >,
                        CLTS < > ] ],
            CONT [ HOOK [ LTOP #ltop,
                          INDEX #index ],
                   RELS <! #keyrel & relation !>,
                   HCONS <! !> ] ],
    LKEYS.KEYREL #keyrel & [ LBL #ltop,
                             ARG0 #index ] ].

i_-_lex := basic-interj-lex & norm-zero-arg & 
  [ SYNSEM interj_synsem ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- 11. Punctuations

basic-punct-lex := lex-item &
  [ INFLECTED -,
    ALTS [ RCP -, 
           RFX -,
           PASS -,
           IMPERS -,
           VCALT - ],
    SYNSEM [ PUNCT [ LPUNCT no_punct,
                     RPUNCT no_punct ],
             MODIFIED notmod,
             LOCAL [ COORD -,
                     COORD-STRAT zero,
                     CAT.HEAD head-punct & 
                              [ PUNCT-MK basic_punct_mark ] ],
             NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
                         REL 0-dlist & [ LIST < > ],
                         QUE 0-dlist & [ LIST < > ] ] ] ].

punct_synsem := lex-synsem &
  [ LOCAL [ COORD-STRAT zero,
            CAT [ MC na,
	          VAL [ SUBJ < >,
                        COMPS < >,
                        SPEC < >,
                        SPR < >,
                        CLTS < > ] ],
            CONT [ RELS <! !>,
                   HCONS <! !> ] ] ].


pt_-_fstop_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK clause_punct ] ].

pt_-_3dots_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK 3dots_punct ] ].

pt_-_comma_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK comma_punct ] ].

pt_-_cln_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK cln_punct ] ].

pt_-_quots_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK quotes_punct ] ].

pt_-_hyphn_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK hyphen_punct ] ].

pt_-_lhyphn_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK lhyphen_punct ] ].

pt_-_quest-op_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK ques_op_punct ] ].

pt_-_quest-cl_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK ques_cl_punct ] ].

pt_-_excl-op_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK excl_op_punct ] ].

pt_-_excl-cl_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK excl_cl_punct ] ].

pt_-_brckt-op_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK bracket_op_punct ] ].

pt_-_brckt-cl_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK bracket_cl_punct ] ].

pt_-_fr-cl_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK frc_punct ] ].

pt_-_fr-op_lex := basic-punct-lex & 
  [ SYNSEM punct_synsem & 
           [ LOCAL.CAT.HEAD.PUNCT-MK fra_punct ] ].


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; --- Lexical types

; --- CONT feature values

norm-hook-lex := lex-item &
  [ SYNSEM [ LOCAL.CONT [ HOOK [ LTOP #ltop,
                                 INDEX #index ],
                          RELS.LIST.FIRST #keyrel ],
             LKEYS.KEYREL #keyrel & [ LBL #ltop,
                                      ARG0 #index ] ] ].

single-rel-lex := lex-item &
  [ SYNSEM.LOCAL.CONT.RELS <! relation !> ].

no-hcons-lex := lex-item & 
  [ SYNSEM.LOCAL.CONT.HCONS <! !> ].


norm-sem-lex-item := norm-hook-lex & single-rel-lex & no-hcons-lex
  """
  most lexical items contribute only one relation, and have empty HCONS values.
  """.


norm-sem-lex := norm-hook-lex & single-rel-lex
  """
  
  """.


basic-zero-arg := lex-item &
  [ ARG-ST < > ]
  """
  --- NON-LOCAL feature values and amalgamation
  basic_zero_arg lexical items have empty ARG-ST lists.  They may
  introduce a non-empty value for one of the non-local features.
  """.


zero-arg-nonslash := lex-item &
  [ SYNSEM.NON-LOCAL.SLASH 0-dlist ]
  """
  
  """.


zero-arg-nonrel := lex-item &
  [ SYNSEM.NON-LOCAL.REL 0-dlist ]
  """
  
  """.


zero-arg-nonque := lex-item &
  [ SYNSEM.NON-LOCAL.QUE 0-dlist ]
  """
  
  """.


norm-zero-arg := basic-zero-arg & zero-arg-nonslash & zero-arg-nonrel & zero-arg-nonque
  """
  Non-argument taking items which introduce no non-local values.
  """.


zero-arg-rel := basic-zero-arg & zero-arg-nonslash & zero-arg-nonque
  """
  Non-argument taking items introducing a rel value.
  """.


zero-arg-que := basic-zero-arg & zero-arg-nonslash & zero-arg-nonrel
  """
  Non-argument taking items introducing a que value.
  """.


zero-arg-slash := basic-zero-arg & zero-arg-nonrel & zero-arg-nonque
  """
  Non-argument taking items introducing a slash value,
  e.g., resumptive pronouns in French.
  """.

; Lexical threading types

basic-one-arg := lex-item &
  [ ARG-ST < [ NON-LOCAL [ SLASH #slash,
                           REL #rel,
                           QUE #que ] ] >,
    SYNSEM.NON-LOCAL [ SLASH #slash,
                       REL #rel,
                       QUE #que ] ]
"""
; These non-zero argument types only amalgamate the non-local
; feature values of their complements. They do not introduce any
; non-local values of their own, nor do they bind off any non-local
; feature values. This assumes that the bottom of most long-distance
; dependencies is handled by a rule that constrains an argument 
; (either on the ARG-ST list or a valence list) to be a synsem of 
; type gap. Elements like English tough adjectives which bind off a 
; slash value will need a new type that doesn't amalgamate that slash 
; value. Elements which both introduce REL or QUE values and take one 
; or more arguments will require appropriate new types as well, which
; amalgamate everything but add a value in addition.
""".

o_rais-one-arg := lex-item &
  [ ARG-ST < synsem >,
    SYNSEM.NON-LOCAL [ SLASH 0-dlist,
                       REL 0-dlist,
                       QUE 0-dlist ] ]
"""
; These non-zero argument types only amalgamate the non-local
; feature values of their complements. They do not introduce any
; non-local values of their own, nor do they bind off any non-local
; feature values. This assumes that the bottom of most long-distance
; dependencies is handled by a rule that constrains an argument 
; (either on the ARG-ST list or a valence list) to be a synsem of 
; type gap. Elements like English tough adjectives which bind off a 
; slash value will need a new type that doesn't amalgamate that slash 
; value. Elements which both introduce REL or QUE values and take one 
; or more arguments will require appropriate new types as well, which
; amalgamate everything but add a value in addition.
""".

basic-two-arg := lex-item &
  [ ARG-ST < [ NON-LOCAL [ SLASH [ LIST #smiddle,
                                   LAST #slast ],
                           REL [ LIST #rmiddle,
                                 LAST #rlast ],
                           QUE [ LIST #qmiddle,
                                 LAST #qlast ] ] ],
             [ NON-LOCAL [ SLASH [ LIST #sfirst,
                                   LAST #smiddle ],
                           REL [ LIST #rfirst,
                                 LAST #rmiddle ],
                           QUE [ LIST #qfirst,
                                 LAST #qmiddle ] ] ] >,
    SYNSEM.NON-LOCAL [ SLASH [ LIST #sfirst,
                               LAST #slast ],
                       REL [ LIST #rfirst,
                             LAST #rlast ],
                       QUE [ LIST #qfirst,
                             LAST #qlast ] ] ]
"""
; These non-zero argument types only amalgamate the non-local
; feature values of their complements. They do not introduce any
; non-local values of their own, nor do they bind off any non-local
; feature values. This assumes that the bottom of most long-distance
; dependencies is handled by a rule that constrains an argument 
; (either on the ARG-ST list or a valence list) to be a synsem of 
; type gap. Elements like English tough adjectives which bind off a 
; slash value will need a new type that doesn't amalgamate that slash 
; value. Elements which both introduce REL or QUE values and take one 
; or more arguments will require appropriate new types as well, which
; amalgamate everything but add a value in addition.
""".

cc-two-arg := lex-item &
  [ ARG-ST < [ NON-LOCAL [ SLASH [ LIST #smiddle,
                                   LAST #slast ],
                           REL [ LIST #rmiddle,
                                 LAST #rlast ],
                           QUE [ LIST #qmiddle,
                                 LAST #qlast ] ] ],
             [ NON-LOCAL [ SLASH [ LIST #sfirst,
                                   LAST #smiddle ],
                           REL [ LIST #rfirst,
                                 LAST #rmiddle ],
                           QUE [ LIST #qfirst,
                                 LAST #qmiddle ] ] ],... >,
    SYNSEM.NON-LOCAL [ SLASH [ LIST #sfirst,
                               LAST #slast ],
                       REL [ LIST #rfirst,
                             LAST #rlast ],
                       QUE [ LIST #qfirst,
                             LAST #qlast ] ] ]
"""
; These non-zero argument types only amalgamate the non-local
; feature values of their complements. They do not introduce any
; non-local values of their own, nor do they bind off any non-local
; feature values. This assumes that the bottom of most long-distance
; dependencies is handled by a rule that constrains an argument 
; (either on the ARG-ST list or a valence list) to be a synsem of 
; type gap. Elements like English tough adjectives which bind off a 
; slash value will need a new type that doesn't amalgamate that slash 
; value. Elements which both introduce REL or QUE values and take one 
; or more arguments will require appropriate new types as well, which
; amalgamate everything but add a value in addition.
""".

o_rais-two-arg := lex-item &
  [ ARG-ST < [ NON-LOCAL [ SLASH #slash,
                           REL #rel,
                           QUE #que ] ],
             synsem >,
    SYNSEM.NON-LOCAL [ SLASH #slash,
                       REL #rel,
                       QUE #que ] ]
"""
; These non-zero argument types only amalgamate the non-local
; feature values of their complements. They do not introduce any
; non-local values of their own, nor do they bind off any non-local
; feature values. This assumes that the bottom of most long-distance
; dependencies is handled by a rule that constrains an argument 
; (either on the ARG-ST list or a valence list) to be a synsem of 
; type gap. Elements like English tough adjectives which bind off a 
; slash value will need a new type that doesn't amalgamate that slash 
; value. Elements which both introduce REL or QUE values and take one 
; or more arguments will require appropriate new types as well, which
; amalgamate everything but add a value in addition.
""".

basic-three-arg := lex-item &
  [ ARG-ST < [ NON-LOCAL [ SLASH [ LIST #smiddle2,
                                   LAST #slast ],
                           REL [ LIST #rmiddle2,
                                 LAST #rlast ],
                           QUE [ LIST #qmiddle2,
                                 LAST #qlast ] ] ],
             [ NON-LOCAL [ SLASH [ LIST #sfirst,
                                   LAST #smiddle1 ],
                           REL [ LIST #rfirst,
                                 LAST #rmiddle1 ],
                           QUE [ LIST #qfirst,
                                 LAST #qmiddle1 ] ] ],
             [ NON-LOCAL [ SLASH [ LIST #smiddle1,
                                   LAST #smiddle2 ],
                           REL [ LIST #rmiddle1,
                                 LAST #rmiddle2 ],
                           QUE [ LIST #qmiddle1,
                                 LAST #qmiddle2 ] ] ] >,
    SYNSEM.NON-LOCAL [ SLASH [ LIST #sfirst,
                               LAST #slast ],
                       REL [ LIST #rfirst,
                             LAST #rlast ],
                       QUE [ LIST #qfirst,
                             LAST #qlast ] ] ]
"""
; These non-zero argument types only amalgamate the non-local
; feature values of their complements. They do not introduce any
; non-local values of their own, nor do they bind off any non-local
; feature values. This assumes that the bottom of most long-distance
; dependencies is handled by a rule that constrains an argument 
; (either on the ARG-ST list or a valence list) to be a synsem of 
; type gap. Elements like English tough adjectives which bind off a 
; slash value will need a new type that doesn't amalgamate that slash 
; value. Elements which both introduce REL or QUE values and take one 
; or more arguments will require appropriate new types as well, which
; amalgamate everything but add a value in addition.
""".

cc-three-arg := lex-item &
  [ ARG-ST < [ NON-LOCAL [ SLASH [ LIST #smiddle,
                                   LAST #slast ],
                           REL [ LIST #rmiddle,
                                 LAST #rlast ],
                           QUE [ LIST #qmiddle,
                                 LAST #qlast ] ] ],
             [ NON-LOCAL [ SLASH [ LIST #middle,
                                   LAST #last ],
                           REL [ LIST #middle,
                                 LAST #last ],
                           QUE [ LIST #middle,
                                 LAST #last ] ] ],
             [ NON-LOCAL [ SLASH [ LIST #sfirst,
                                   LAST #smiddle ],
                           REL [ LIST #rfirst,
                                 LAST #rmiddle ],
                           QUE [ LIST #qfirst,
                                 LAST #qmiddle ] ] ] >,
    SYNSEM.NON-LOCAL [ SLASH [ LIST #sfirst,
                               LAST #slast ],
                       REL [ LIST #rfirst,
                             LAST #rlast ],
                       QUE [ LIST #qfirst,
                             LAST #qlast ] ] ]
"""
; These non-zero argument types only amalgamate the non-local
; feature values of their complements. They do not introduce any
; non-local values of their own, nor do they bind off any non-local
; feature values. This assumes that the bottom of most long-distance
; dependencies is handled by a rule that constrains an argument 
; (either on the ARG-ST list or a valence list) to be a synsem of 
; type gap. Elements like English tough adjectives which bind off a 
; slash value will need a new type that doesn't amalgamate that slash 
; value. Elements which both introduce REL or QUE values and take one 
; or more arguments will require appropriate new types as well, which
; amalgamate everything but add a value in addition.
""".

basic-four-arg := lex-item &
  [ ARG-ST < [ NON-LOCAL [ SLASH [ LIST #smiddle3,
                                   LAST #slast ],
                           REL [ LIST #rmiddle3,
                                 LAST #rlast ],
                           QUE [ LIST #qmiddle3,
                                 LAST #qlast ] ] ],
              [ NON-LOCAL [ SLASH [ LIST #sfirst,
                                    LAST #smiddle1 ],
                            REL [ LIST #rfirst,
                                 LAST #rmiddle1 ],
                            QUE [ LIST #qfirst,
                                 LAST #qmiddle1 ] ] ],
              [ NON-LOCAL [ SLASH [ LIST #smiddle1,
                                    LAST #smiddle2 ],
                            REL [ LIST #rmiddle1,
                                  LAST #rmiddle2 ],
                            QUE [ LIST #qmiddle1,
                                  LAST #qmiddle2 ] ] ],
              [ NON-LOCAL [ SLASH [ LIST #smiddle2,
                                    LAST #smiddle3 ],
                            REL [ LIST #rmiddle2,
                                  LAST #rmiddle3 ],
                            QUE [ LIST #qmiddle2,
                                  LAST #qmiddle3 ] ] ] > ,
    SYNSEM.NON-LOCAL [ SLASH [ LIST #sfirst,
                               LAST #slast ],
                       REL [ LIST #rfirst,
                             LAST #rlast ],
                       QUE [ LIST #qfirst,
                             LAST #qlast ] ] ]
"""
; These non-zero argument types only amalgamate the non-local
; feature values of their complements. They do not introduce any
; non-local values of their own, nor do they bind off any non-local
; feature values. This assumes that the bottom of most long-distance
; dependencies is handled by a rule that constrains an argument 
; (either on the ARG-ST list or a valence list) to be a synsem of 
; type gap. Elements like English tough adjectives which bind off a 
; slash value will need a new type that doesn't amalgamate that slash 
; value. Elements which both introduce REL or QUE values and take one 
; or more arguments will require appropriate new types as well, which
; amalgamate everything but add a value in addition.
""".


; --- Subcategorization types

acc_local := local.

np_local := local &
  [ CAT [ MC na,
          HEAD +np,
          VAL [ SPR < >,
                SUBJ < >,
                COMPS < > ] ] ].

n_local := acc_local &
  [ COORD -,
    CAT [ MC na,
          HEAD noun,
          VAL [ SUBJ < >,
                COMPS < > ] ] ].

np_nom_local := np_local & 
  [ COORD -,
    CAT.HEAD noun & [ CASE nom,
                      KEYS [ KEY nom_rel,
                             ALTKEY quant_or_wh_rel ] ] ].

np_acc_local := np_local & acc_local &
  [ COORD -,
    CAT.HEAD [ CASE acc_or_obl, 
               KEYS.KEY a_sel_or_indp_rel ] ]
"""
; llevan el marcador "a": 
; - sust. individualizados (busco a María/al ayudante/ayudante), 
; - pron. tónicos referidos a personas (me miró a mí, no espero a nadie, a quién buscas),
; - sust. personificados (temo a la muerte) 
; - casos ambiguos (honra el trabajo la persona -> honra el trabajo a la persona/
; al trabajo la persona). 
; - los verbos con sujeto animado (este abogado escondió a muchos prisioneros
; esta montaña escondió muchos prisioneros) 
; los verbos ditrans no llevan el marcador (presenté mi novia a mis padres)
; clitic doubling obligatory when the DO is realized by a strong personal pron
; (a mí me golpearon/*a mí golpearon)
""". 

np_acc_unmrkd_local := np_acc_local & 
  [ COORD -,
    CAT.HEAD noun & [ CASE acc, 
                      KEYS.KEY independent_rel ] ]. 

dative_local := np_local & 
  [ COORD -,
    CAT [ MC na,
          HEAD adp & 
               [ PRD non-prd,
                 MOD < >,
                 KEYS.KEY _a_p_sel_rel ],
          VAL [ SPR <>,
                SUBJ <>,
                COMPS <> ] ],
    CONT.HOOK.INDEX ref-ind & [ SORT ani_bpart_hum_soc ] ].

mrkd_np_local := local & 
  [ COORD -,
    CAT [ MC na,
          HEAD adp & [ TAM.TENSE nontense,
                       PRD non-prd,
                       MOD < >,
                       CASE obl, 
                       KEYS.KEY selected_rel ],
          VAL [ SUBJ < >,
                COMPS < > ] ],
    CONT.HOOK.INDEX index ]. 

mrkd_or_unmrkd_cp_prop_or_ques_local := local & 
  [ COORD -,
    CAT [ HEAD +vpc & 
               [ MOD < > ],
          VAL [ COMPS < >,
                SPR < > ] ],
    CONT.HOOK.INDEX event & [ SF prop-or-ques ] ] . 

mrkd_or_unmrkd_cp_prop_fin_local := mrkd_or_unmrkd_cp_prop_or_ques_local &
  [ CAT [ HEAD.KEYS.KEY selected_or_independent_rel,
          VAL.SUBJ < > ],
    CONT.HOOK.INDEX [ SF prop,
                      E [ TENSE tense,
                          MOOD ind_or_sub_mood ] ] ]. 

mrkd_cp_semi_ques_fin_local :=  mrkd_or_unmrkd_cp_prop_or_ques_local &
  [ CAT [ HEAD adp & [ KEYS.KEY selected_rel ],
          VAL.SUBJ < > ],
    CONT.HOOK.INDEX.E [ TENSE tense,
                        MOOD ind ] ]. 

mrkd_cp_semi_ques_local :=  mrkd_or_unmrkd_cp_prop_or_ques_local &
  [ CAT.HEAD adp & [ KEYS.KEY selected_rel ] ]. 

mrkd_cp_prop_fin_local := mrkd_or_unmrkd_cp_prop_or_ques_local &
  [ CAT.HEAD adp & [ KEYS.KEY selected_rel ],
    CONT.HOOK.INDEX [ SF prop,
                      E [ TENSE tense,
                          MOOD ind_or_sub_mood ] ] ].

mrkd_cp_prop_inf_local := mrkd_or_unmrkd_cp_prop_or_ques_local &
  [ CAT.HEAD adp & [ KEYS.KEY selected_rel ],
    CONT.HOOK.INDEX [ SF prop,
                      E [ TENSE nontense,
                          ASPECT no-aspect ] ] ].


lcomp_local := intersective-mod &
  [ COORD -,
    CAT [ HEAD prep_or_modnp & 
               [ KEYS.KEY prep_mod_rel,
                 CASE none,
                 MOD < [ LOCAL.CAT.HEAD noun ] > ],
          VAL.COMPS < > ] ].

pp_local := lcomp_local & 
  [ CAT.HEAD adp & [ KEYS.KEY prep_rel ] ].

v_local := local & 
  [ COORD -,
    CAT [ HEAD +vc & [ MOD < > ],
          VAL.SPR < > ] ].

v_fin_local := v_local &
  [ CAT [ HEAD verb & [ VFORM fin ],
          VAL.COMPS < > ] ].

vp_local := v_local & 
  [ CAT.VAL [ SUBJ < synsem & 
                     [ NON-LOCAL [ SLASH 0-dlist,
                                   REL 0-dlist,
                                   QUE 0-dlist ] ] >,
              COMPS < > ] ].

vp_inf_local := vp_local &
  [ CAT.HEAD verb & 
             [ PRD non-prd,
               VFORM inf,
               TAM [ TENSE nontense,
                     ASPECT no-aspect ] ] ].

vp_ger_local := vp_local &
  [ CAT.HEAD verb & [ VFORM ger ] ].

vp_fin_local := vp_local &
  [ CAT.HEAD verb & [ VFORM fin ] ].

s_local := v_local &
  [ CAT.VAL [ SUBJ < >,
              COMPS < > ] ].

s_or_cp_fin_local := s_local & 
  [ CAT.HEAD.VFORM fin ]. 

s_fin_local := s_local &
  [ COORD -,
    CAT [ HEAD verb & [ VFORM fin ],
          VAL.CLTS < > ] ].

s_inf_local := s_local &
  [ CAT.HEAD verb & [ VFORM inf ] ].

cp_local := s_local & 
  [ CAT.HEAD comp ]. 

cp_inf_local := cp_local &
  [ CAT.HEAD.VFORM inf ].

cp_fin_local := cp_local &
  [ CAT.HEAD [ VFORM fin,
               TAM.MOOD ind_or_sub_mood ] ]. 

prd_local := local &
  [ COORD -,
    CAT [ MC na,
          HEAD.MOD < [ LOCAL intersective-mod & 
                             [ CAT.HEAD noun ] ] >,
          VAL [ SUBJ < >,
                COMPS < >,
                CLTS < > ] ] ].

mrkd_ap_local := local & 
  [ CAT [ MC na,
          HEAD adp & [ PRD prd,
                       KEYS [ KEY selected_rel,
                              ALTKEY basic_adj_rel ] ],
          VAL [ SUBJ < >,
                COMPS < >,
                SPR < > ] ],
    CONT.HOOK.INDEX index ]. 

v_cat := cat & 
  [ HEAD verb & [ MOD < > ],
    VAL [ SUBJ < synsem & 
                 [ NON-LOCAL [ SLASH 0-dlist,
                               REL 0-dlist,
                               QUE 0-dlist ] ] >,
          SPR < > ] ].

vp_cat := cat & 
  [ HEAD verb & [ MOD < > ],
    VAL [ SUBJ < synsem & 
                 [ NON-LOCAL [ SLASH 0-dlist,
                               REL 0-dlist,
                               QUE 0-dlist ] ] >,
          COMPS < >,
          SPR < > ] ].


transitive_verb_synsem := lex-synsem.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 
;;; Leaf types

v_np*-pp*_e-rfx-rcp_native_le := v_np*-pp*_e-rfx-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

v_np*-pp*_e-rfx-rcp_le := v_np*-pp*_e-rfx-rcp_lex.

v_np-np_sor-rfx_native_le := v_np-np_sor-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

v_np-np_sor-rfx_le := v_np-np_sor-rfx_lex.

n_-_c-qnt_native_le := n_-_c-qnt_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

n_-_c-qnt_le := n_-_c-qnt_lex.

n_-_pr-idf-cual_native_le := n_-_pr-idf-cual_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

n_-_pr-idf-cual_le := n_-_pr-idf-cual_lex.

aj_-_s-mismo_native_le := aj_-_s-mismo_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

aj_-_s-mismo_le := aj_-_s-mismo_lex.

p_rg_ptcl_native_le := p_rg_ptcl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

p_rg_ptcl_le := p_rg_ptcl_lex.

p_pp_ptcl_native_le := p_pp_ptcl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

p_pp_ptcl_le := p_pp_ptcl_lex.

p_ap_ptcl_native_le := p_ap_ptcl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

p_ap_ptcl_le := p_ap_ptcl_lex.

p_modnp_i-vm_native_le := p_modnp_i-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

p_modnp_i-vm_le := p_modnp_i-vm_lex.

pp_-_i-vm_native_le := pp_-_i-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

pp_-_i-vm_le := pp_-_i-vm_lex.

d_-_q-cierto_native_le := d_-_q-cierto_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

d_-_q-cierto_le := d_-_q-cierto_lex.

d_-_q-determinado_native_le := d_-_q-determinado_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

d_-_q-determinado_le := d_-_q-determinado_lex.

d_-_q-diferente_native_le := d_-_q-diferente_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

d_-_q-diferente_le := d_-_q-diferente_lex.

d_-_q-distinto_native_le := d_-_q-distinto_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

d_-_q-distinto_le := d_-_q-distinto_lex.

d_-_q-diverso_native_le := d_-_q-diverso_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

d_-_q-diverso_le := d_-_q-diverso_lex.

d_-_q-escaso_native_le := d_-_q-escaso_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

d_-_q-escaso_le := d_-_q-escaso_lex.

d_-_q-numeroso_native_le := d_-_q-numeroso_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

d_-_q-numeroso_le := d_-_q-numeroso_lex.

d_-_q-raro_native_le := d_-_q-raro_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

d_-_q-raro_le := d_-_q-raro_lex.

d_-_excl-que_native_le := d_-_excl-que_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

d_-_excl-que_le := d_-_excl-que_lex.

d_-_excl-cuanto_native_le := d_-_excl-cuanto_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

d_-_excl-cuanto_le := d_-_excl-cuanto_lex.

d_-_excl-cual_native_le := d_-_excl-cual_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

d_-_excl-cual_le := d_-_excl-cual_lex.

c_xp_sin-embargo_native_le := c_xp_sin-embargo_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

c_xp_sin-embargo_le := c_xp_sin-embargo_lex.

c_xp_eso-que_native_le := c_xp_eso-que_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  """.

c_xp_eso-que_le := c_xp_eso-que_lex.


v_-_nsbj_native_le := v_-_nsbj_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_-_nsbj_le">
  <description>Verb, no compl, no subj (weather verbs)
  <ex>Llueve.
  <todo>
  </type>
  """.


v_-_nsbj_le := v_-_nsbj_lex
  """
  
  """.


v_np_npsv-nsbj_native_le := v_np_npsv-nsbj_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_npsv-nsbj_le">
  <description>Verb, NP (don't passivize), no subj
  <ex>Hay libros.
  <todo>
  </type>
  """.


v_np_npsv-nsbj_le := v_np_npsv-nsbj_lex
  """
  
  """.


v_cp_p-ind-nsbj_native_le := v_cp_p-ind-nsbj_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_p-ind-nsbj_le">
  <description>Verb, Sent. (ind), no subj
  <ex>Resultó que Juan fue el ganador.
  <todo>
  </type>
  """.


v_cp_p-ind-nsbj_le := v_cp_p-ind-nsbj_lex
  """
  
  """.


v_cp_p-sub-nsbj_native_le := v_cp_p-sub-nsbj_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_p-sub-nsbj_le">
  <description>Verb, Sent. (subj), no subj
  <ex>Puede que mañana llueva.
  <todo>
  </type>
  """.


v_cp_p-sub-nsbj_le := v_cp_p-sub-nsbj_lex
  """
  
  """.


v_cp_p-inf-nsbj_native_le := v_cp_p-inf-nsbj_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_p-inf-nsbj_le">
  <description>Verb, VPinf, no subj
  <ex>Hay que trabajar más
  <todo>
  </type>
  """.


v_cp_p-inf-nsbj_le := v_cp_p-inf-nsbj_lex
  """
  
  """.


v_pp_e-nsbj-prn_native_le := v_pp_e-nsbj-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-nsbj-prn_le">
  <description>Verb (pron), PPsel, no subj
  <ex>Se trata de un goleador nato.
  <todo>
  </type>
  """.


v_pp_e-nsbj-prn_le := v_pp_e-nsbj-prn_lex
  """
  
  """.


v_pp_e-nsbj_native_le := v_pp_e-nsbj_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-nsbj_le">
  <description>Verb, PPsel, no subj
  <ex>basta con 100 ptas.
  <todo>
  </type>
  """.


v_pp_e-nsbj_le := v_pp_e-nsbj_lex
  """
  
  """.


v_pp_e-cp-p-nsbj_native_le := v_pp_e-cp-p-nsbj_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-cp-p-nsbj_le">
  <description>Verb, PPsel (sent), no subj
  <ex>basta con que vengas.
  <todo>
  </type>
  """.


v_pp_e-cp-p-nsbj_le := v_pp_e-cp-p-nsbj_lex
  """
  
  """.


v_pp_e-vp-nsbj_native_le := v_pp_e-vp-nsbj_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-vp-nsbj_le">
  <description>Verb, PPsel (VPinf), no subj
  <ex>basta con verte
  <todo>
  </type>
  """.


v_pp_e-vp-nsbj_le := v_pp_e-vp-nsbj_lex
  """
  
  """.


v_ppa-pp_e-nsbj_native_le := v_ppa-pp_e-nsbj_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa-pp_e-nsbj_le">
  <description>Verb, PPa and PPsel, no subj
  <ex>Me sobra con 100 ptas.
  <todo>
  </type>
  """.


v_ppa-pp_e-nsbj_le := v_ppa-pp_e-nsbj_lex
  """
  
  """.


v_ppa-pp_e-cp-p-nsbj_native_le := v_ppa-pp_e-cp-p-nsbj_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa-pp_e-cp-p-nsbj_le">
  <description>Verb, PPa and PPsel (sent), no subj
  <ex>Me basta con que vengas.
  <todo>
  </type>
  """.


v_ppa-pp_e-cp-p-nsbj_le := v_ppa-pp_e-cp-p-nsbj_lex
  """
  
  """.


v_ppa-pp_e-vp-nsbj_native_le := v_ppa-pp_e-vp-nsbj_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa-pp_e-vp-nsbj_le">
  <description>Verb, PPa and PPsel (VPinf), no subj
  <ex>Me basta con verte
  <todo>
  </type>
  """.


v_ppa-pp_e-vp-nsbj_le := v_ppa-pp_e-vp-nsbj_lex
  """
  
  """.


v_-_sbj-cp-p_native_le := v_-_sbj-cp-p_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_-_sbj-cp-p_le">
  <description>Verb, no compl, Subj Sent
  <ex>En el contrato no figura que el acuerdo es/sea irreversible.
  <todo>
  </type>
  """.


v_-_sbj-cp-p_le := v_-_sbj-cp-p_lex
  """
  
  """.


v_-_sbj-cp-p-prn_native_le := v_-_sbj-cp-p-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_-_sbj-cp-p-prn_le">
  <description>Verb (pron), no compl, Subj Sent
  <ex>De ahí se desprende que la situación es/sea imposible.
  <todo>
  </type>
  """.


v_-_sbj-cp-p-prn_le := v_-_sbj-cp-p-prn_lex
  """
  
  """.


v_ppa*_sbj-cp-p_native_le := v_ppa*_sbj-cp-p_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*_sbj-cp-p_le">
  <description>Verb, PPa (opt), Subj Sent
  <ex>(Le) ocurre que no hicieron lo que les había pedido
  <todo>
  </type>
  """.


v_ppa*_sbj-cp-p_le := v_ppa*_sbj-cp-p_lex
  """
  
  """.


v_ppa*_sbj-cp-p-cv_native_le := v_ppa*_sbj-cp-p-cv_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*_sbj-cp-p-cv_le">
  <description>Verb, PPa (opt), Subj Sent/VPinf
  <ex>No (me) consta que estuviese aquí.
  <todo>
  </type>
  """.


v_ppa*_sbj-cp-p-cv_le := v_ppa*_sbj-cp-p-cv_lex
  """
  
  """.


v_ppa*_sbj-cp-p-sub-cv_native_le := v_ppa*_sbj-cp-p-sub-cv_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*_sbj-cp-p-sub-cv_le">
  <description>Verb, PPa (opt), Subj Sent subj/VPinf
  <ex>(Me) basta que vengas
  <todo>
  </type>
  """.


v_ppa*_sbj-cp-p-sub-cv_le := v_ppa*_sbj-cp-p-sub-cv_lex
  """
  
  """.


v_ppa*_sbj-cp-p-sub_native_le := v_ppa*_sbj-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*_sbj-cp-p-sub_le">
  <description>Verb, PPa (opt), Subj Sent subj/VPinf
  <ex>No (me) gusta que a los toros te pongas la minifalda.
  <todo>
  </type>
  """.


v_ppa*_sbj-cp-p-sub_le := v_ppa*_sbj-cp-p-sub_lex
  """
  
  """.


v_ppa*_sbj-cp-p-sub-prn_native_le := v_ppa*_sbj-cp-p-sub-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*_sbj-cp-p-sub-prn_le">
  <description>Verb (pron), PPa (opt), Subj Sent subj/VPinf
  <ex>se le antojó que vinieran.
  <todo>
  </type>
  """.


v_ppa*_sbj-cp-p-sub-prn_le := v_ppa*_sbj-cp-p-sub-prn_lex
  """
  
  """.


v_pp_e-sbj-cp-p-sub_native_le := v_pp_e-sbj-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-sbj-cp-p-sub_le">
  <description>Verb, PPsel, Subj Sent subj/VPinf
  <ex>(el) que las clases sean malas repercute en los alumnos
  <todo>
  </type>
  """.


v_pp_e-sbj-cp-p-sub_le := v_pp_e-sbj-cp-p-sub_lex
  """
  
  """.


v_pp_e-sbj-cp-p-sub-prn_native_le := v_pp_e-sbj-cp-p-sub-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-sbj-cp-p-sub-prn_le">
  <description>Verb (pron), PPsel, Subj Sent subj/VPinf
  <ex>(el) que las clases sean malas se traduce en un mal resultado
  <todo>
  </type>
  """.


v_pp_e-sbj-cp-p-sub-prn_le := v_pp_e-sbj-cp-p-sub-prn_lex
  """
  
  """.


v_ppa*-pp_e-sbj-cp-p-sub_native_le := v_ppa*-pp_e-sbj-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-pp_e-sbj-cp-p-sub_le">
  <description>Verb, PPa, PPsel, Subj Sent subj/VPinf
  <ex>de nada /le) sirve luchar que luchen/luchar
  <todo>
  </type>
  """.


v_ppa*-pp_e-sbj-cp-p-sub_le := v_ppa*-pp_e-sbj-cp-p-sub_lex
  """
  
  """.


v_np_sbj-cp-p-sub_native_le := v_np_sbj-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_sbj-cp-p-sub_le">
  <description>Verb, NP, Subj Sent subj/VPinf
  <ex>que el poder político se descomponga no significa necesariamente una decadencia.
  <todo>
  </type>
  """.


v_np_sbj-cp-p-sub_le := v_np_sbj-cp-p-sub_lex
  """
  
  """.


v_np_sbj-cp-p-sub-idm_native_le := v_np_sbj-cp-p-sub-idm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_sbj-cp-p-sub-idm_le">
  <description>Verb, NP, Subj Sent subj/VPinf (idioms)
  <ex>Vale la pega que vengan/pagar tanto
  <todo>
  </type>
  """.


v_np_sbj-cp-p-sub-idm_le := v_np_sbj-cp-p-sub-idm_lex
  """
  
  """.


v_np-pp_e-sbj-cp-p-sub_native_le := v_np-pp_e-sbj-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-sbj-cp-p_-suble">
  <description>Verb, NP and PPsel, Subj Sent sub/VPinf
  <ex>que su partido haya perdido las elecciones lo apartará del poder
  <todo>
  </type>
  """.


v_np-pp_e-sbj-cp-p-sub_le := v_np-pp_e-sbj-cp-p-sub_lex
  """
  
  """.


v_np-ppa*_sbj-cp-p-sub_native_le := v_np-ppa*_sbj-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-ppa*_sbj-cp-p-sub_le">
  <description>Verb, NP and PPa (opt), Subj Sent subj/VPinf
  <ex>que haya dicho esto le acarrea le acarrea muchos problemas (a María).
  <todo>
  </type>
  """.


v_np-ppa*_sbj-cp-p-sub_le := v_np-ppa*_sbj-cp-p-sub_lex
  """
  
  """.


v_cp_p-sbj-cp-p-sub_native_le := v_cp_p-sbj-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_p-sbj-cp-p-sub_le">
  <description>Verb, Sent/VPinf, Subj Sent subj/VPinf
  <ex>que te haya aprobado no significa que no tengas que venir a clase
  <todo>
  </type>
  """.


v_cp_p-sbj-cp-p-sub_le := v_cp_p-sbj-cp-p-sub_lex.


v_ppa*-cp_p-sbj-cp-p-sub_native_le := v_ppa*-cp_p-sbj-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-cp_p-sbj-cp-p-sub_le">
  <description>Verb, PPa (opt) and Sent/VPinf, Subj Sent subj/VPinf
  <ex>oír música no (te) impide que trabajes
  <todo>
  </type>
  """.


v_ppa*-cp_p-sbj-cp-p-sub_le := v_ppa*-cp_p-sbj-cp-p-sub_lex
  """
  
  """.


v_ap_sbj-vp-inf-ser_native_le := v_ap_sbj-vp-inf-ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ap_sbj-vp-inf-ser_le">
  <description> Verb (ser), AP, Subj VPinf
  <ex>es imposible vivir en el centro
  <todo>
  </type>
  """.


v_ap_sbj-vp-inf-ser_le := v_ap_sbj-vp-inf-ser_lex
  """
  
  """.


v_pp_e-sbj-vp-inf-ser_native_le := v_pp_e-sbj-vp-inf-ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-sbj-vp-inf-ser_le">
  <description>Verb (ser), PPsel, Subj VPinf
  <ex>rectificar es de sabios
  <todo>
  </type>
  """.


v_pp_e-sbj-vp-inf-ser_le := v_pp_e-sbj-vp-inf-ser_lex
  """
  
  """.


v_np_npsv-sbj-vp-inf-ser_native_le := v_np_npsv-sbj-vp-inf-ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_npsv-sbj-vp-inf-ser_le">
  <description>Verb (ser), NP, Subj VPinf
  <ex>regalar detalles es una cursilería
  <todo>
  </type>
  """.


v_np_npsv-sbj-vp-inf-ser_le := v_np_npsv-sbj-vp-inf-ser_lex
  """
  
  """.


v_vp_sbj-vp-inf-ser_native_le := v_vp_sbj-vp-inf-ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_sbj-vp-inf-ser_le">
  <description>>Verb (ser), VPinf, Subj VPinf
  <ex>Tolerar es simplemente reconocer que el otro existe.
  <todo>
  </type>
  """.


v_vp_sbj-vp-inf-ser_le := v_vp_sbj-vp-inf-ser_lex
  """
  
  """.


v_ap_sbj-cp-p-ser_native_le := v_ap_sbj-cp-p-ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ap_sbj-cp-p-ser_le">
  <description>Verb (ser), AP, Subj Sent
  <ex>es imposible que no venga
  <todo>
  </type>
  """.


v_ap_sbj-cp-p-ser_le := v_ap_sbj-cp-p-ser_lex
  """
  
  """.


v_np_sbj-cp-p-ser_native_le := v_np_sbj-cp-p-ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_sbj-cp-p-ser_le">
  <description>Verb (ser), NP, Subj Sent
  <ex>
  <todo>
  </type>
  """.


v_np_sbj-cp-p-ser_le := v_np_sbj-cp-p-ser_lex
  """
  
  """.


v_ppart_sbj-vp-inf-estar_native_le := v_ppart_sbj-vp-inf-estar_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppart_sbj-vp-inf-estar_le">
  <description>Verb (estar), ppart, Subj VPinf
  <ex>está prohibido fumar aqui.
  <todo>
  </type>
  """.


v_ppart_sbj-vp-inf-estar_le := v_ppart_sbj-vp-inf-estar_lex
  """
  
  """.


v_ap_sbj-cp-p-estar_native_le := v_ap_sbj-cp-p-estar_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ap_sbj-cp-p-estar_le">
  <description>Verb (estar), AP, Subj Sent
  <ex>no está claro que ha ocurrido
  <todo>
  </type>
  """.


v_ap_sbj-cp-p-estar_le := v_ap_sbj-cp-p-estar_lex
  """
  
  """.


v_adv_sbj-cp-p-estar_native_le := v_adv_sbj-cp-p-estar_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_adv_sbj-cp-p-estar_le">
  <description>Verb (estar), ADV, Subj Sent
  <ex>está bien que Guillermo lo haga
  <todo>
  </type>
  """.


v_adv_sbj-cp-p-estar_le := v_adv_sbj-cp-p-estar_lex
  """
  
  """.


v_-_psv_native_le := v_-_psv_lex & native_le
  """
   This is a native lexical entry type, for words that are in the lexicon.
  
   <type val="v_-_psv_le">
   <description>Verb, no compl, (unacc, may appear in APC)
   <ex>floreció el rosal.
  <todo>
   </type>
  """.


v_-_psv_le := v_-_psv_lex
  """
  
  """.


v_-_psv-prn_native_le := v_-_psv-prn_lex & native_le
  """
   This is a native lexical entry type, for words that are in the lexicon.
  
   <type val="v_-_psv-prn_le">
   <description>Verb (pron), no compl, (unacc, may appear in APC)
   <ex>el jersey se encogió.
  <todo>
   </type>
  """.


v_-_psv-prn_le := v_-_psv-prn_lex
  """
  
  """.


v_pp_loc_native_le := v_pp_loc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_loc_le">
  <description>Verb, PPloc (unacc, don't appear in APC)
  <ex>vive
  <todo>
  </type>
  """.


v_pp_loc_le := v_pp_loc_lex
  """
  
  """.


v_pp*_loc_native_le := v_pp*_loc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp*_loc_le">
  <description>Verb, PPloc (opt) (unacc, don't appear in APC)
  <ex>permaneció (en la ciudad).
  <todo>
  </type>
  """.


v_pp*_loc_le := v_pp*_loc_lex
  """
  
  """.


v_pp*_loc-psv_native_le := v_pp*_loc-psv_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp*_loc-psv_le">
  <description>Verb, PPloc (opt) (unacc, may appear in APC)
  <ex>aterrizó (en el aeropuerto de Barcelona).
  <todo>
  </type>
  """.


v_pp*_loc-psv_le := v_pp*_loc-psv_lex
  """
  
  """.


v_pp_loc-prn_native_le := v_pp_loc-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_loc-prn_le">
  <description>Verb (pron), PPloc (unacc, don't appear in APC)
  <ex>se alojó en mi casa.
  <todo>
  </type>
  """.


v_pp_loc-prn_le := v_pp_loc-prn_lex
  """
  
  """.


v_pp*_loc-prn_native_le := v_pp*_loc-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp*_loc-prn_le">
  <description>Verb (pron), PPloc (opt) (unacc, don't appear in APC)
  <ex>se presentó (en casa).
  <todo>
  </type>
  """.


v_pp*_loc-prn_le := v_pp*_loc-prn_lex
  """
  
  """.


v_pp*_loc-psv-prn_native_le := v_pp*_loc-psv-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp*_loc-psv-prn_le">
  <description>Verb (pron), PPloc (opt) (unacc, may appear in APC)
  <ex>se atrincheraron (en un bar).
  <todo>
  </type>
  """.


v_pp*_loc-psv-prn_le := v_pp*_loc-psv-prn_lex
  """
  
  """.


v_pp_dir_native_le := v_pp_dir_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_dir_le">
  <description>Verb, PPdir (unacc, don't appear in APC)
  <ex>Dolly se vuelve huracán y enfila hacia Texas.
  <todo>
  </type>
  """.


v_pp_dir_le := v_pp_dir_lex
  """
  
  """.


v_pp*_dir_native_le := v_pp*_dir_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp*_dir_le">
  <description>Verb, PPdir (opt) (unacc, don't appear in APC)
  <ex>acudieron (a la reunión).
  <todo>
  </type>
  """.


v_pp*_dir_le := v_pp*_dir_lex
  """
  
  """.


v_pp*_dir-psv_native_le := v_pp*_dir-psv_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp*_dir-psv_le">
  <description>Verb, PPdir (opt) (unacc, may appear in APC)
  <ex>partieron (hacia Nueva York).
  <todo>
  </type>
  """.


v_pp*_dir-psv_le := v_pp*_dir-psv_lex
  """
  
  """.


v_pp*_dir-prn_native_le := v_pp*_dir-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp*_dir-prn_le">
  <description>Verb (pron), PPdir (opt) (unacc, don't appear in APC)
  <ex>se extiende (hacia el sur).
  <todo>
  </type>
  """.


v_pp*_dir-prn_le := v_pp*_dir-prn_lex
  """
  
  """.


v_pp_dir-prn_native_le := v_pp_dir-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_dir-prn_le">
  <description>Verb (pron), PPdir (unacc, don't appear in APC)
  <ex>me dirigí al norte
  <todo>
  </type>
  """.


v_pp_dir-prn_le := v_pp_dir-prn_lex
  """
  
  """.


v_pp*_dir-psv-prn_native_le := v_pp*_dir-psv-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp*_dir-psv-prn_le">
  <description>Verb (pron), PPdir (opt) (unacc, may appear in APC)
  <ex>se deslizó (hacia el otro lado).
  <todo>
  </type>
  """.


v_pp*_dir-psv-prn_le := v_pp*_dir-psv-prn_lex
  """
  
  """.


v_-_native_le := v_-_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_-_le">
  <description>Verb, no compl
  <ex>esquía muy bien.
  <todo>
  </type>
  """.


v_-_le := v_-_lex
  """
  
  """.


v_-_prn_native_le := v_-_prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_-_prn_le">
  <description>Verb (pron), no compl
  <ex>se suicidó.
  <todo>
  </type>
  """.


v_-_prn_le := v_-_prn_lex
  """
  
  """.


v_pp_e_native_le := v_pp_e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e_le">
  <description>Verb, PPsel
  <ex>sucumbió a la tentación.
  <todo>
  </type>
  """.


v_pp_e_le := v_pp_e_lex
  """
  
  """.


v_pp*_e_native_le := v_pp*_e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp*_e_le">
  <description>Verb, PPsel (opt)
  <ex>desertó (del ejercito).
  <todo>
  </type>
  """.


v_pp*_e_le := v_pp*_e_lex
  """
  
  """.


v_pp_e-prn_native_le := v_pp_e-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-prn_le">
  <description>Verb (pron), PPsel
  <ex>se encapricho de/con aquella muchacha.
  <todo>
  </type>
  """.


v_pp_e-prn_le := v_pp_e-prn_lex
  """
  
  """.


v_pp*_e-prn_native_le := v_pp*_e-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp*_e-prn_le">
  <description>Verb (pron), PPsel (opt)
  <ex>no supo adaptarse (a la nueva situación)
  <todo>
  </type>
  """.


v_pp*_e-prn_le := v_pp*_e-prn_lex
  """
  
  """.


v_pp_e-idm_native_le := v_pp_e-idm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-idm_le">
  <description>Verb, PPsel, idiom
  <ex>entrar en vigor
  <todo>
  </type>
  """.


v_pp_e-idm_le := v_pp_e-idm_lex
  """
  
  """.


v_pp_e-prn-idm_native_le := v_pp_e-prn-idm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-prn-idm_le">
  <description>Verb (pron), PPsel, idiom
  <ex>encogerse de hombros
  <todo>
  </type>
  """.


v_pp_e-prn-idm_le := v_pp_e-prn-idm_lex
  """
  
  """.


v_pp_e-vp-sc_native_le := v_pp_e-vp-sc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-vp-sc_le">
  <description>Verb, PPsel (VPinf)
  <ex>aprendió a jugar a tenis
  <todo>
  </type>
  """.


v_pp_e-vp-sc_le := v_pp_e-vp-sc_lex
  """
  
  """.


v_pp_e-vp-sc-prn_native_le := v_pp_e-vp-sc-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-vp-sc-prn_le">
  <description>Verb (pron), PPsel (VPinf)
  <ex>se comprometió a hacerlo.
  <todo>
  </type>
  """.


v_pp_e-vp-sc-prn_le := v_pp_e-vp-sc-prn_lex
  """
  
  """.


v_pp_e-cp-p_native_le := v_pp_e-cp-p_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-cp-p_le">
  <description>Verb, PPsel (Sent ind/subj)
  <ex>confío en que vengas/vendrás.
  <todo>
  </type>
  """.


v_pp_e-cp-p_le := v_pp_e-cp-p_lex
  """
  
  """.


v_pp_e-cp-p-prn_native_le := v_pp_e-cp-p-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-cp-p-prn_le">
  <description>Verb (pron), PPsel (Sent ind/subj)
  <ex>se asustó de que lloviera tanto
  <todo>
  </type>
  """.


v_pp_e-cp-p-prn_le := v_pp_e-cp-p-prn_lex
  """
  
  """.


v_pp*_e-cp-p_le := v_pp*_e-cp-p_lex
  """
  <type val="v_pp*_e-cp-p_le">
  <description>Verb, PPsel (opt, Sent ind/subj)
  <ex>sueño con que vengas/irás
  <todo>
  </type>
  """.


v_pp*_e-cp-p-prn_le := v_pp*_e-cp-p-prn_lex
  """
  <type val="v_pp*_e-cp-p-prn_le">
  <description>Verb (pron), PPsel (opt, Sent ind/subj)
  <ex>se queja de que no tomes/tomarás nuevas iniciativas
  <todo>
  </type>
  """.


v_pp_e*-cp-p_native_le := v_pp_e*-cp-p_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e*-cp-p_le">
  <description>Verb, PPsel (Sent ind/subj), opt prep
  <ex>sueño (con) que vendrán
  <todo>
  </type>
  """.


v_pp_e*-cp-p_le := v_pp_e*-cp-p_lex
  """
  
  """.


v_pp_e*-cp-p-prn_native_le := v_pp_e*-cp-p-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e*-cp-p-prn_le">
  <description>Verb (pron), PPsel (Sent ind/subj), opt prep
  <ex>se enteró (de) que vendrán
  <todo>
  </type>
  """.


v_pp_e*-cp-p-prn_le := v_pp_e*-cp-p-prn_lex
  """
  
  """.


v_pp_e-cp-p-ind_native_le := v_pp_e-cp-p-ind_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-cp-p-ind_le">
  <description>Verb, PPsel (Sent ind)
  <ex>alardea de que es el mejor
  <todo>
  </type>
  """.


v_pp_e-cp-p-ind_le := v_pp_e-cp-p-ind_lex
  """
  
  """.


v_pp_e-cp-p-ind-prn_native_le := v_pp_e-cp-p-ind-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-cp-p-ind-prn_le">
  <description>Verb (pron), PPsel (Sent ind)
  <ex>el candidato se conforta con que hizo todo lo posible para obtener el puesto
  <todo>
  </type>
  """.


v_pp_e-cp-p-ind-prn_le := v_pp_e-cp-p-ind-prn_lex
  """
  
  """.


v_pp_e-cp-p-sub_native_le := v_pp_e-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-cp-p-sub_le">
  <description>Verb, PPsel (Sent subj)
  <ex>esperó a que llegase
  <todo>
  </type>
  """.


v_pp_e-cp-p-sub_le := v_pp_e-cp-p-sub_lex
  """
  
  """.


v_pp_e-cp-p-sub-prn_native_le := v_pp_e-cp-p-sub-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-cp-p-sub-prn_le">
  <description>Verb (pron), PPsel (Sent subj)
  <ex>se esfuerza por que todo salga bien
  <todo>
  </type>
  """.


v_pp_e-cp-p-sub-prn_le := v_pp_e-cp-p-sub-prn_lex
  """
  
  """.


v_pp*_e-cp-p-sub-prn_le := v_pp*_e-cp-p-sub-prn_lex
  """
  <type val="v_pp*_e-cp-p-sub-prn_le">
  <description>Verb (pron), PPsel (opt, Sent subj)
  <ex>se contenta con que vengas.
  <todo>
  </type>
  """.


v_pp_e*-cp-p-sub-prn_native_le := v_pp_e*-cp-p-sub-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e*-cp-p-sub-prn_le">
  <description>Verb (pron), PPsel (Sent subj), opt prep
  <ex>
  <todo>
  </type>
  """.


v_pp_e*-cp-p-sub-prn_le := v_pp_e*-cp-p-sub-prn_lex
  """
  
  """.


v_pp_e-cp-q_native_le := v_pp_e-cp-q_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-cp-q_le">
  <description>Verb, PPsel (Ques)
  <ex>depende de cómo lo hagas
  <todo>
  </type>
  """.


v_pp_e-cp-q_le := v_pp_e-cp-q_lex
  """
  
  """.


v_pp_e-cp-q-prn_native_le := v_pp_e-cp-q-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-cp-q-prn_le">
  <description>Verb (pron), PPsel (Ques)
  <ex>se interesa por cómo lo hacen
  <todo>
  </type>
  """.


v_pp_e-cp-q-prn_le := v_pp_e-cp-q-prn_lex
  """
  
  """.


v_ppa_native_le := v_ppa_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa_le">
  <description>Verb, PPa
  <ex>le consume la duda.
  <todo>
  </type>
  """.


v_ppa_le := v_ppa_lex
  """
  
  """.


v_ppa*_native_le := v_ppa*_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*_le">
  <description>Verb, PPa (opt)
  <ex>(me) gustan (las acelgas).
  <todo>
  </type>
  """.


v_ppa*_le := v_ppa*_lex
  """
  
  """.


v_ppa_prn_native_le := v_ppa_prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa_prn_le">
  <description>Verb (pron), PPa
  <ex>se le acercó.
  <todo>
  </type>
  """.


v_ppa_prn_le := v_ppa_prn_lex
  """
  
  """.


v_ppa*_prn_native_le := v_ppa*_prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*_prn_le">
  <description>Verb (pron), PPa (opt)
  <ex>se le indigestó la comida.
  <todo>
  </type>
  """.


v_ppa*_prn_le := v_ppa*_prn_lex
  """
  
  """.


v_ppa-pp*_e_native_le := v_ppa-pp*_e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa-pp*_e_le">
  <description>Verb, PPa and PPsel (opt)
  <ex>le sucedió (en el trono)
  <todo>
  </type>
  """.


v_ppa-pp*_e_le := v_ppa-pp*_e_lex
  """
  
  """.


v_ppa*-pp_e_native_le := v_ppa*-pp_e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-pp_e_le">
  <description>Verb, PPa (opt) and PPsel
  <ex>(le) preguntó por tí
  <todo>
  </type>
  """.


v_ppa*-pp_e_le := v_ppa*-pp_e_lex
  """
  
  """.


v_ppa*-pp*_e_native_le := v_ppa*-pp*_e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-pp*_e_le">
  <description>Verb, PPa (opt) and PPsel (opt)
  <ex>(le) hablé (de tí)
  <todo>
  </type>
  """.


v_ppa*-pp*_e_le := v_ppa*-pp*_e_lex
  """
  
  """.


v_ppa-pp_e-idm_native_le := v_ppa-pp_e-idm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa-pp_e-idm_le">
  <description>Verb, PPa and PPsel (idiom)
  <ex>le echaba en falta
  <todo>
  </type>
  """.


v_ppa-pp_e-idm_le := v_ppa-pp_e-idm_lex
  """
  
  """.


v_pp-pp_e-e-prn-idm_native_le := v_pp-pp_e-e-prn-idm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp-pp_e-e-prn-idm_le">
  <description>Verb, PPsel and PPsel (idiom)
  <ex>ponerse en contacto con
  <todo>
  </type>
  """.


v_pp-pp_e-e-prn-idm_le := v_pp-pp_e-e-prn-idm_lex
  """
  
  """.


v_vp_inf-ssr_native_le := v_vp_inf-ssr_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_inf-ssr_le">
  <description>Verb, VPinf (subj-subj-raising)
  <ex>deberían hacerlo
  <todo>
  </type>
  """.


v_vp_inf-ssr_le := v_vp_inf-ssr_lex
  """
  
  """.


v_pp_e-vp-inf-ssr_native_le := v_pp_e-vp-inf-ssr_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-vp-inf-ssr_le">
  <description>Verb, PPsel (VPinf, subj-subj-raising)
  <ex>deberías de hacerlo
  <todo>
  </type>
  """.


v_pp_e-vp-inf-ssr_le := v_pp_e-vp-inf-ssr_lex
  """
  
  """.


v_pp_e-vp-inf-ssr-prn_native_le := v_pp_e-vp-inf-ssr-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-vp-inf-ssr-prn_le">
  <description>Verb (pron), PPsel (VPinf, subj-subj raising)
  <ex>se echó a llorar
  <todo>
  </type>
  """.


v_pp_e-vp-inf-ssr-prn_le := v_pp_e-vp-inf-ssr-prn_lex
  """
  
  """.


v_vp_ger-ssr_native_le := v_vp_ger-ssr_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_ger-ssr_le">
  <description>Verb, VPger (subj-subj raising)
  <ex>anda cantando
  <todo>
  </type>
  """.


v_vp_ger-ssr_le := v_vp_ger-ssr_lex
  """
  
  """.


v_vp_ger-ssr-prn_le := v_vp_ger-ssr-prn_lex
  """
  <type val="v_vp_ger-ssr-prn_le">
  <description>Verb (pron), VPger (subj-subj raising)
  <ex>se quedó llorando
  <todo>
  </type>
  """.


v_adv_native_le := v_adv_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_adv_le">
  <description>Verb, ADV
  <ex>haces bien/mal
  <todo>
  </type>
  """.


v_adv_le := v_adv_lex
  """
  
  """.


v_adv_prn_native_le := v_adv_prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_adv_prn_le">
  <description>Verb (pron), ADV
  <ex>el niño se porta bien
  <todo>
  </type>
  """.


v_adv_prn_le := v_adv_prn_lex
  """
  
  """.


v_adv*_prn_native_le := v_adv*_prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_adv*_prn_le">
  <description>Verb (pron), ADV (opt)
  <ex>se conserva (muy bien)
  <todo>
  </type>
  """.


v_adv*_prn_le := v_adv*_prn_lex
  """
  
  """.


v_adv-ppa*_native_le := v_adv-ppa*_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_adv-ppa*_le">
  <description>Verb, ADV and PPa (opt)
  <ex>(le) sentó bien
  <todo>
  </type>
  """.


v_adv-ppa*_le := v_adv-ppa*_lex
  """
  
  """.


v_modnp-ppa*_idm_native_le := v_modnp-ppa*_idm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_modnp-ppa*_idm_le">
  <description>Verb, MODNP and PPa (opt), idiom
  <ex>me da igual
  <todo>
  </type>
  """.


v_modnp-ppa*_idm_le := v_modnp-ppa*_idm_lex
  """
  
  """.


v_adv-pp_e-prn-idm_native_le := v_adv-pp_e-prn-idm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val=" v_adv-pp_e-prn-idm_le">
  <description>Verb, ADV and PPe
  <ex>llevarse bien/mal con
  <todo>
  </type>
  """.


v_adv-pp_e-prn-idm_le := v_adv-pp_e-prn-idm_lex
  """
  
  """.


v_np_npsv_native_le := v_np_npsv_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_npsv_le">
  <description>Verb, NP (don't passivize)
  <ex>la reunión duró tres horas
  <todo>
  </type>
  """.


v_np_npsv_le := v_np_npsv_lex
  """
  
  """.


v_np*_npsv_native_le := v_np*_npsv_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*_npsv_le">
  <description>Verb, NP (opt, don't passivize)
  <ex>adelgazó (3 kg)
  <todo>
  </type>
  """.


v_np*_npsv_le := v_np*_npsv_lex
  """
  
  """.


v_np_npsv-prn_native_le := v_np_npsv-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_npsv-prn_le">
  <description>Verb (pron), NP (don't passivize)
  <ex>
  <todo>
  </type>
  """.


v_np_npsv-prn_le := v_np_npsv-prn_lex
  """
  
  """.


v_np*_npsv-prn_native_le := v_np*_npsv-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*_npsv-prn_le">
  <description>Verb (pron), NP (opt, don't passivize)
  <ex>
  <todo>
  </type>
  """.


v_np*_npsv-prn_le := v_np*_npsv-prn_lex
  """
  
  """.


v_np_npsv-id_native_le := v_np_npsv-id_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_npsv-id_le">
  <description>Verb, NP (id, don't passivive)
  <ex>devenir
  <todo>
  </type>
  """.


v_np_npsv-id_le := v_np_npsv-id_lex
  """
  
  """.


v_np_npsv-id-ser_native_le := v_np_npsv-id-ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_npsv-id-ser_le">
  <description>Verb (ser), NP (id, don't passivive)
  <ex>este chico es mi novio
  <todo>
  </type>
  """.


v_np_npsv-id-ser_le := v_np_npsv-id-ser_lex
  """
  
  """.


v_np_npsv-id-prn_native_le := v_np_npsv-id-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_npsv-id-prn_le">
  <description>Verb (pron), NP (id, don't passivive)
  <ex>me llamo Montse
  <todo>
  </type>
  """.


v_np_npsv-id-prn_le := v_np_npsv-id-prn_lex
  """
  
  """.


v_np_native_le := v_np_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_le">
  <description>Verb, NP
  <ex>pintó la casa
  <todo>
  </type>
  """.


v_np_le := v_np_lex
  """
  
  """.


v_np*_native_le := v_np*_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*_le">
  <description>Verb, NP (opt)
  <ex>comeremos (sopa)
  <todo>
  </type>
  """.


v_np*_le := v_np*_lex
  """
  
  """.


v_np_rfx_native_le := v_np_rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_rfx_le">
  <description>Verb, NP (rfx)
  <ex>secó los pantalones
  <todo>
  </type>
  """.


v_np_rfx_le := v_np_rfx_lex
  """
  
  """.


v_np*_rfx_native_le := v_np*_rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*_rfx_le">
  <description>Verb, NP (opt, rfx)
  <ex>Juan se curó
  <todo>
  </type>
  """.


v_np*_rfx_le := v_np*_rfx_lex
  """
  
  """.


v_np_rcp_native_le := v_np_rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_rcp_le">
  <description>Verb, NP (rcp)
  <ex>se aman
  <todo>
  </type>
  """.


v_np_rcp_le := v_np_rcp_lex
  """
  
  """.


v_np*_rcp_native_le := v_np*_rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*_rcp_le">
  <description>Verb, NP (opt, rcp)
  <ex>(se) insultan
  <todo>
  </type>
  """.


v_np*_rcp_le := v_np*_rcp_lex
  """
  
  """.


v_np_rfx-rcp_native_le := v_np_rfx-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_rfx-rcp_le">
  <description>Verb, NP (rfx, rcp)
  <ex>se contradicen
  <todo>
  </type>
  """.


v_np_rfx-rcp_le := v_np_rfx-rcp_lex
  """
  
  """.


v_np*_rfx-rcp_native_le := v_np*_rfx-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*_rfx-rcp_le">
  <description>Verb, NP (opt, rfx, rcp)
  <ex>engaño a su hermano
  <todo>
  </type>
  """.


v_np*_rfx-rcp_le := v_np*_rfx-rcp_lex
  """
  
  """.


v_np_prn_native_le := v_np_prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_prn_le">
  <description>Verb (pron), NP
  <ex>el alumno se saltó la clase
  <todo>
  </type>
  """.


v_np_prn_le := v_np_prn_lex
  """
  
  """.


v_np*_prn_native_le := v_np*_prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*_prn_le">
  <description>Verb (pron), NP (opt)
  <ex>María se peina el pelo
  <todo>
  </type>
  """.


v_np*_prn_le := v_np*_prn_lex
  """
  
  """.


v_np_npsv-idm_native_le := v_np_npsv-idm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np_npsv-idm_le">
  <description>Verb (pron), NP, idiom
  <ex>tirar la toalla
  <todo>
  </type>
  """.


v_np_npsv-idm_le := v_np_npsv-idm_lex
  """
  
  """.


v_np-pp*_npsv-e_native_le := v_np-pp*_npsv-e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_npsv-e_le">
  <description>Verb, NP (don't passivize) and PPsel (opt)
  <ex>dista 3km de la capital
  <todo>
  </type>
  """.


v_np-pp*_npsv-e_le := v_np-pp*_npsv-e_lex
  """
  
  """.


v_np-pp_e_native_le := v_np-pp_e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e_le">
  <description>Verb, NP and PPsel
  <ex>lo arrancó de la pared
  <todo>
  </type>
  """.


v_np-pp_e_le := v_np-pp_e_lex
  """
  
  """.


v_np*-pp_e_native_le := v_np*-pp_e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e_le">
  <description>Verb, NP (opt) and PPsel
  <ex>he roto (las relaciones) con mi novio
  <todo>
  </type>
  """.


v_np*-pp_e_le := v_np*-pp_e_lex
  """
  
  """.


v_np-pp*_e_native_le := v_np-pp*_e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_e_le">
  <description>Verb, NP and PPsel (opt)
  <ex>incorporaremos todos los nombres (a la lista)
  <todo>
  </type>
  """.


v_np-pp*_e_le := v_np-pp*_e_lex
  """
  
  """.


v_np*-pp*_e_native_le := v_np*-pp*_e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp*_e_le">
  <description>Verb, NP (opt) and PPsel (opt)
  <ex>he invertido (tres millones) (en bolsa)
  <todo>
  </type>
  """.


v_np*-pp*_e_le := v_np*-pp*_e_lex
  """
  
  """.


v_np*-pp_e-prn_native_le := v_np*-pp_e-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-prn_le">
  <description>Verb (pron), NP (opt) and PPsel
  <ex>se turna (el coche) con su hermana
  <todo>
  </type>
  """.


v_np*-pp_e-prn_le := v_np*-pp_e-prn_lex
  """
  
  """.


v_np-pp_e-rcp_native_le := v_np-pp_e-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-rcp_le">
  <description>Verb, NP and PPsel (rcp)
  <ex>se atraen
  <todo>
  </type>
  """.


v_np-pp_e-rcp_le := v_np-pp_e-rcp_lex
  """
  
  """.


v_np*-pp_e-rcp_native_le := v_np*-pp_e-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-rcp_le">
  <description>Verb, NP (opt) and PPsel (rcp)
  <ex>amenazr
  <todo>
  </type>
  """.


v_np*-pp_e-rcp_le := v_np*-pp_e-rcp_lex
  """
  
  """.


v_np-pp*_e-rcp_native_le := v_np-pp*_e-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_e-rcp_le">
  <description>Verb, NP and PPsel (opt) (rcp)
  <ex>recubrir
  <todo>
  </type>
  """.


v_np-pp*_e-rcp_le := v_np-pp*_e-rcp_lex
  """
  
  """.


v_np*-pp*_e-rcp_native_le := v_np*-pp*_e-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp*_e-rcp_le">
  <description>Verb, NP (opt) and PPsel (opt) (rcp)
  <ex>invitar
  <todo>
  </type>
  """.


v_np*-pp*_e-rcp_le := v_np*-pp*_e-rcp_lex
  """
  
  """.


v_np-pp_e-rfx_native_le := v_np-pp_e-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-rfx_le">
  <description>Verb, NP and PPsel, (rfx)
  <ex>me acostumbré a la buena vida
  <todo>
  </type>
  """.


v_np-pp_e-rfx_le := v_np-pp_e-rfx_lex
  """
  
  """.


v_np*-pp_e-rfx_native_le := v_np*-pp_e-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-rfx_le">
  <description>Verb,  NP (opt) and PPsel, (rfx)
  <ex>prevenir de
  <todo>
  </type>
  """.


v_np*-pp_e-rfx_le := v_np*-pp_e-rfx_lex
  """
  
  """.


v_np-pp*_e-rfx_native_le := v_np-pp*_e-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_e-rfx_le">
  <description>Verb, NP and PPsel (opt), (rfx)
  <ex>convencer de
  <todo>
  </type>
  """.


v_np-pp*_e-rfx_le := v_np-pp*_e-rfx_lex
  """
  
  """.


v_np*-pp*_e-rfx_native_le := v_np*-pp*_e-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp*_e-rfx_le">
  <description>Verb, NP (opt), and PPsel (opt), (rfx)
  <ex> comparar a
  <todo>
  </type>
  """.


v_np*-pp*_e-rfx_le := v_np*-pp*_e-rfx_lex
  """
  
  """.


v_np-pp_e-rfx-rcp_native_le := v_np-pp_e-rfx-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-rfx-rcp_le">
  <description>Verb, NP and PPsel, (rfx, rcp)
  <ex> informar de
  <todo>
  </type>
  """.


v_np-pp_e-rfx-rcp_le := v_np-pp_e-rfx-rcp_lex
  """
  
  """.


v_np-pp*_e-rfx-rcp_native_le := v_np-pp*_e-rfx-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_e-rfx-rcp_le">
  <description>Verb, NP and PPsel (opt), (rfx, rcp)
  <ex> atar a
  <todo>
  </type>
  """.


v_np-pp*_e-rfx-rcp_le := v_np-pp*_e-rfx-rcp_lex
  """
  
  """.


v_np-pp_e-idm_native_le := v_np-pp_e-idm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-idm_le">
  <description>Verb, NP and PPsel (idiom)
  <ex>dar de alta
  <todo>
  </type>
  """.


v_np-pp_e-idm_le := v_np-pp_e-idm_lex
  """
  
  """.


v_np-pp*_e-npsv-prn-idm_native_le := v_np-pp*_e-npsv-prn-idm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_e-npsv-prn-idm_le">
  <description>Ver (pron)b, NP and PPsel (idiom)
  <ex>darse cuenta
  <todo>
  </type>
  """.


v_np-pp*_e-npsv-prn-idm_le := v_np-pp*_e-npsv-prn-idm_lex
  """
  
  """.


v_np-pp_e-cp-p_native_le := v_np-pp_e-cp-p_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-cp-p_le">
  <description>Verb, NP and PPsel (Sent ind/subj)
  <ex>reducen el problema a que los muchachos lloren/lloran
  <todo>
  </type>
  """.


v_np-pp_e-cp-p_le := v_np-pp_e-cp-p_lex
  """
  
  """.


v_np-pp_e-cp-p-rfx_native_le := v_np-pp_e-cp-p-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-cp-p-rfx_le">
  <description>Verb, Verb, NP and PPsel (Sent ind/subj), (rfx)
  <ex>habrá que acostumbrar a esos niños a que su padre llegue/llega siempre tarde a casa
  <todo>
  </type>
  """.


v_np-pp_e-cp-p-rfx_le := v_np-pp_e-cp-p-rfx_lex
  """
  
  """.


v_np*-pp_e*-cp-p_native_le := v_np*-pp_e*-cp-p_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e*-cp-p_le">
  <description>Verb, NP (opt) and PPsel (Sent ind/subj, opt marker)
  <ex>
  <todo>
  </type>
  """.


v_np*-pp_e*-cp-p_le := v_np*-pp_e*-cp-p_lex
  """
  
  """.


v_np-pp_e*-cp-p-rfx-rcp_native_le := v_np-pp_e*-cp-p-rfx-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e*-cp-p-rfx-rcp_le">
  <description>Verb, NP (opt) and PPsel (Sent ind/subj, opt marker)
  <ex>
  <todo>
  </type>
  """.


v_np-pp_e*-cp-p-rfx-rcp_le := v_np-pp_e*-cp-p-rfx-rcp_lex
  """
  
  """.


v_np-pp_e-cp-p-ind-rfx_native_le := v_np-pp_e-cp-p-ind-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-cp-p-ind-rfx_le">
  <description>Verb, NP and PPsel (Sent ind), (rfx)
  <ex>basó su defensa/se basó en que no tenía testigos
  <todo>
  </type>
  """.


v_np-pp_e-cp-p-ind-rfx_le := v_np-pp_e-cp-p-ind-rfx_lex
  """
  
  """.


v_np-pp_npsv-e-cp-p-ind_native_le := v_np-pp_npsv-e-cp-p-ind_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_npsv-e-cp-p-ind_le">
  <description>Verb, Verb, NP (don't passivize) and PPsel (Sent ind)
  <ex>apostó conmigo una cena a que entraba/*entrara en la sala sin invitación.
  <todo>
  </type>
  """.


v_np-pp_npsv-e-cp-p-ind_le := v_np-pp_npsv-e-cp-p-ind_lex
  """
  
  """.


v_np*-pp_e*-cp-p-ind_native_le := v_np*-pp_e*-cp-p-ind_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e*-cp-p-ind_le">
  <description>Verb, Verb, NP (opt) and PPsel (Sent ind, opt marker)
  <ex>(los) avisó (de) que llegarán mañana
  <todo>
  </type>
  """.


v_np*-pp_e*-cp-p-ind_le := v_np*-pp_e*-cp-p-ind_lex
  """
  
  """.


v_np-pp_npsv-e-cp-p-sub_native_le := v_np-pp_npsv-e-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_npsv-e-cp-p-sub_le">
  <description>Verb, NP (don't passivize) and PPsel (Sent subj)
  <ex>(las) apremia a que vengan
  <todo>
  </type>
  """.


v_np-pp_npsv-e-cp-p-sub_le := v_np-pp_npsv-e-cp-p-sub_lex
  """
  
  """.


v_np*-pp_npsv-e-cp-p-sub_native_le := v_np*-pp_npsv-e-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_npsv-e-cp-p-sub_le">
  <description>Verb, NP (opt, don't passivize) and PPsel (Sent subj)
  <ex>(las) apremia a que vengan
  <todo>
  </type>
  """.


v_np*-pp_npsv-e-cp-p-sub_le := v_np*-pp_npsv-e-cp-p-sub_lex
  """
  
  """.


v_np-pp_e-cp-p-sub_native_le := v_np-pp_e-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-cp-p-sub_le">
  <description>Verb, NP and PPsel (Sent subj)
  <ex>
  <todo>
  </type>
  """.


v_np-pp_e-cp-p-sub_le := v_np-pp_e-cp-p-sub_lex
  """
  
  """.


v_np*-pp_e-cp-p-sub_native_le := v_np*-pp_e-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-cp-p-sub_le">
  <description>Verb, NP (opt) and PPsel (Sent subj)
  <ex>(los) alentó a que participaran
  <todo>
  </type>
  """.


v_np*-pp_e-cp-p-sub_le := v_np*-pp_e-cp-p-sub_lex
  """
  
  """.


v_np-pp_e-cp-p-sub-rfx_native_le := v_np-pp_e-cp-p-sub-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-cp-p-sub-rfx_le">
  <description>Verb, NP and PPsel (Sent subj), (rfx)
  <ex>
  <todo>
  </type>
  """.


v_np-pp_e-cp-p-sub-rfx_le := v_np-pp_e-cp-p-sub-rfx_lex
  """
  
  """.


v_np*-pp_e-cp-p-sub-rfx_native_le := v_np*-pp_e-cp-p-sub-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-cp-p-sub-rfx_le">
  <description>Verb, NP (opt) and PPsel (Sent subj), (rfx)
  <ex>
  <todo>
  </type>
  """.


v_np*-pp_e-cp-p-sub-rfx_le := v_np*-pp_e-cp-p-sub-rfx_lex
  """
  
  """.


v_np-pp_e-cp-p-sub-rcp_native_le := v_np-pp_e-cp-p-sub-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-cp-p-sub-rcp_le">
  <description>Verb, NP and PPsel (Sent subj), (rcp)
  <ex>
  <todo>
  </type>
  """.


v_np-pp_e-cp-p-sub-rcp_le := v_np-pp_e-cp-p-sub-rcp_lex
  """
  
  """.


v_np*-pp_e-cp-p-sub-rcp_native_le := v_np*-pp_e-cp-p-sub-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-cp-p-sub-rcp_le">
  <description>Verb, NP (opt) and PPsel (Sent subj), (rcp)
  <ex>
  <todo>
  </type>
  """.


v_np*-pp_e-cp-p-sub-rcp_le := v_np*-pp_e-cp-p-sub-rcp_lex
  """
  
  """.


v_np-pp_e-cp-p-sub-rfx-rcp_native_le := v_np-pp_e-cp-p-sub-rfx-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-cp-p-sub-rfx-rcp_le">
  <description>Verb, NP and PPsel (Sent subj), (rfx, rcp)
  <ex>
  <todo>
  </type>
  """.


v_np-pp_e-cp-p-sub-rfx-rcp_le := v_np-pp_e-cp-p-sub-rfx-rcp_lex
  """
  
  """.


v_np*-pp_e-cp-p-sub-rfx-rcp_native_le := v_np*-pp_e-cp-p-sub-rfx-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-cp-p-sub-rfx-rcp_le">
  <description>Verb, NP (opt) and PPsel (Sent subj), (rfx, rcp)
  <ex>
  <todo>
  </type>
  """.


v_np*-pp_e-cp-p-sub-rfx-rcp_le := v_np*-pp_e-cp-p-sub-rfx-rcp_lex
  """
  
  """.


v_np*-pp_e*-cp-p-sub_native_le := v_np*-pp_e*-cp-p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e*-cp-p-sub_le">
  <description>Verb, NP (opt) and PPsel (Sent subj, opt marker)
  <ex>(la) advertí (de) que vendrían
  <todo>
  </type>
  """.


v_np*-pp_e*-cp-p-sub_le := v_np*-pp_e*-cp-p-sub_lex
  """
  
  """.


v_np*-pp_e*-cp-p-sub-rfx_native_le := v_np*-pp_e*-cp-p-sub-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e*-cp-p-sub-rfx_le">
  <description>Verb, NP (opt) and PPsel (Sent subj, opt marker), (rfx)
  <ex>(nos) convenció (de) que vendiesemos la casa
  <todo>
  </type>
  """.


v_np*-pp_e*-cp-p-sub-rfx_le := v_np*-pp_e*-cp-p-sub-rfx_lex
  """
  
  """.


v_np*-pp_e-cp-p-sub-mv_native_le := v_np*-pp_e-cp-p-sub-mv_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-cp-p-sub-mv_le">
  <description>Verb, NP (opt) and PPsel (Sent subj) (verbs of movement that may also take VPinf subject control (e.g. la amenazó con ir a la policía) and object control in the sub. clause (e.g. envía las camisas a planchar a madrid))
  <ex>(la) arrastra a pelear
  <todo>
  </type>
  """.


v_np*-pp_e-cp-p-sub-mv_le := v_np*-pp_e-cp-p-sub-mv_lex
  """
  
  """.


v_np*-pp_e-cp-p-sub-mv-rfx_native_le := v_np*-pp_e-cp-p-sub-mv-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-cp-p-sub-mv-rfx_le">
  <description>Verb, NP (opt) and PPsel (Sent subj), (rfx) (verbs of movement that may also take VPinf subject control (e.g. la amenazó con ir a la policía) and object control in the sub. clause (e.g. envía las camisas a planchar a madrid))
  <ex>se/nos encaminó a luchar
  <todo>
  </type>
  """.


v_np*-pp_e-cp-p-sub-mv-rfx_le := v_np*-pp_e-cp-p-sub-mv-rfx_lex
  """
  
  """.


v_np-pp_e-vp-inf-sc_native_le := v_np-pp_e-vp-inf-sc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-vp-inf-sc_le">
  <description>Verb, NP (don't passivize) and PPsel (Sent VPinf sbj-ctrl)
  <ex>
  <todo>
  </type>
  """.


v_np-pp_e-vp-inf-sc_le := v_np-pp_e-vp-inf-sc_lex
  """
  
  """.


v_np*-pp_e-vp-inf-sc_native_le := v_np*-pp_e-vp-inf-sc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-vp-inf-sc_le">
  <description>Verb, NP (opt) and PPsel (Sent VPinf sbj-ctrl)
  <ex>(la) amenazó con ir a la policía
  <todo>
  </type>
  """.


v_np*-pp_e-vp-inf-sc_le := v_np*-pp_e-vp-inf-sc_lex
  """
  
  """.


v_np-pp_e-vp-inf-oc_native_le := v_np-pp_e-vp-inf-oc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-vp-inf-oc_le">
  <description>Verb, NP and PPsel (Sent VPinf obj-ctrl)
  <ex>la culparon de causar el accidente
  <todo>
  </type>
  """.


v_np-pp_e-vp-inf-oc_le := v_np-pp_e-vp-inf-oc_lex
  """
  
  """.


v_np*-pp_e-vp-inf-oc_native_le := v_np*-pp_e-vp-inf-oc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-vp-inf-oc_le">
  <description>Verb, NP (opt) and PPsel (Sent VPinf obj-ctrl)
  <ex>
  <todo>
  </type>
  """.


v_np*-pp_e-vp-inf-oc_le := v_np*-pp_e-vp-inf-oc_lex
  """
  
  """.


v_np*-pp_e-vp-inf-oc-rfx_native_le := v_np*-pp_e-vp-inf-oc-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-vp-inf-oc-rfx_le">
  <description>Verb, NP (opt) and PPsel (Sent VPinf obj-ctrl), (rfx)
  <ex>
  <todo>
  </type>
  """.


v_np*-pp_e-vp-inf-oc-rfx_le := v_np*-pp_e-vp-inf-oc-rfx_lex
  """
  
  """.


v_np-pp_e-vp-inf-oc-rcp_native_le := v_np-pp_e-vp-inf-oc-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-vp-inf-oc-rcp_le">
  <description>Verb, NP and PPsel (Sent VPinf obj-ctrl), (rcp)
  <ex>
  <todo>
  </type>
  """.


v_np-pp_e-vp-inf-oc-rcp_le := v_np-pp_e-vp-inf-oc-rcp_lex
  """
  
  """.


v_np*-pp_e-vp-inf-oc-rcp_native_le := v_np*-pp_e-vp-inf-oc-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_e-vp-inf-oc-rcp_le">
  <description>Verb, NP (opt) and PPsel (Sent VPinf obj-ctrl), (rcp)
  <ex>
  <todo>
  </type>
  """.


v_np*-pp_e-vp-inf-oc-rcp_le := v_np*-pp_e-vp-inf-oc-rcp_lex
  """
  
  """.


v_np-pp_loc_native_le := v_np-pp_loc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_loc_le">
  <description>Verb, NP and PPloc
  <ex>pon los libros en el cajón
  <todo>
  </type>
  """.


v_np-pp_loc_le := v_np-pp_loc_lex
  """
  
  """.


v_np*-pp_loc_native_le := v_np*-pp_loc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_loc_le">
  <description>Verb, NP (opt) and PPloc
  <ex>
  <todo>
  </type>
  """.


v_np*-pp_loc_le := v_np*-pp_loc_lex
  """
  
  """.


v_np-pp*_loc_native_le := v_np-pp*_loc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_loc_le">
  <description>Verb, NP and PPloc (opt)
  <ex>colgó el cuadro (en la pared)
  <todo>
  </type>
  """.


v_np-pp*_loc_le := v_np-pp*_loc_lex
  """
  
  """.


v_np-pp*_loc-prn_native_le := v_np-pp*_loc-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_loc-prn_le">
  <description>Verb (pron), NP and PPloc
  <ex>se la dejó (en el despacho)
  <todo>
  </type>
  """.


v_np-pp*_loc-prn_le := v_np-pp*_loc-prn_lex
  """
  
  """.


v_np-pp_dir_native_le := v_np-pp_dir_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_dir_le">
  <description>Verb, NP and PPdir
  <ex>
  <todo>
  </type>
  """.


v_np-pp_dir_le := v_np-pp_dir_lex
  """
  
  """.


v_np*-pp_dir_native_le := v_np*-pp_dir_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp_dir_le">
  <description>Verb, NP (opt) and PPdir
  <ex>apuntó (el arma) a la mujer
  <todo>
  </type>
  """.


v_np*-pp_dir_le := v_np*-pp_dir_lex
  """
  
  """.


v_np-pp*_dir_native_le := v_np-pp*_dir_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_dir_le">
  <description>Verb, NP and PPdir (opt)
  <ex>deportar
  <todo>
  </type>
  """.


v_np-pp*_dir_le := v_np-pp*_dir_lex
  """
  
  """.


v_np*-pp*_dir-rcp_native_le := v_np*-pp*_dir-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-pp*_dir-rcp_le">
  <description>Verb, NP (opt) and PPdir (opt)
  <ex>
  <todo>
  </type>
  """.


v_np*-pp*_dir-rcp_le := v_np*-pp*_dir-rcp_lex
  """
  
  """.


v_np-pp*_dir-prn_native_le := v_np-pp*_dir-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_dir-prn_le">
  <description>Verb (pron), NP and PPdir (opt)
  <ex>se lo llevó al cine
  <todo>
  </type>
  """.


v_np-pp*_dir-prn_le := v_np-pp*_dir-prn_lex
  """
  
  """.


v_np-pp*_loc-rfx_native_le := v_np-pp*_loc-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_loc-rfx_le">
  <description>Verb, NP and PPloc (opt), rfx
  <ex>el niño se sentó en la trona
  <todo>
  </type>
  """.


v_np-pp*_loc-rfx_le := v_np-pp*_loc-rfx_lex
  """
  
  """.


v_np-pp*_dir-rfx_native_le := v_np-pp*_dir-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_dir-rfx_le">
  <description>Verb, NP and PPdir (opt), rfx
  <ex>
  <todo>
  </type>
  """.


v_np-pp*_dir-rfx_le := v_np-pp*_dir-rfx_lex
  """
  
  """.


v_np-pp*_loc-rfx-rcp_native_le := v_np-pp*_loc-rfx-rcp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_loc-rfx-rcp_le">
  <description>Verb, NP and PPdir (opt), rfx, rcp
  <ex>
  <todo>
  </type>
  """.


v_np-pp*_loc-rfx-rcp_le := v_np-pp*_loc-rfx-rcp_lex
  """
  
  """.


v_np-np_id_native_le := v_np-np_id_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-np_id_le">
  <description>Verb, NP and NP (id)
  <ex>lo tituló...
  <todo>
  </type>
  """.


v_np-np_id_le := v_np-np_id_lex
  """
  
  """.


v_np-ppa*_npsv_native_le := v_np-ppa*_npsv_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-ppa*_npsv_le">
  <description>Verb, NP and PPa (don't passivize)
  <ex>(le) costó 300 pesetas
  <todo>
  </type>
  """.


v_np-ppa*_npsv_le := v_np-ppa*_npsv_lex
  """
  
  """.


v_np-ppa_native_le := v_np-ppa_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-ppa_le">
  <description>Verb, NP and PPa
  <ex>¿me pasas la sal?
  <todo>
  </type>
  """.


v_np-ppa_le := v_np-ppa_lex
  """
  
  """.


v_np-ppa*_native_le := v_np-ppa*_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-ppa*_le">
  <description>Verb, NP and PPa (opt)
  <ex>(me) agradeció la propuesta
  <todo>
  </type>
  """.


v_np-ppa*_le := v_np-ppa*_lex
  """
  
  """.


v_np*-ppa_native_le := v_np*-ppa_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-ppa_le">
  <description>Verb, NP (opt) and PPa
  <ex>le disparó (un tiro)
  <todo>
  </type>
  """.


v_np*-ppa_le := v_np*-ppa_lex
  """
  
  """.


v_np*-ppa*_native_le := v_np*-ppa*_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np*-ppa*_le">
  <description>Verb, NP (opt) and PPa (opt)
  <ex>(le) robó (el bolso)
  <todo>
  </type>
  """.


v_np*-ppa*_le := v_np*-ppa*_lex
  """
  
  """.


v_np-ppa_rfx_native_le := v_np-ppa_rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-ppa_rfx_le">
  <description>Verb, NP and PPa, rfx
  <ex>
  <todo>
  </type>
  """.


v_np-ppa_rfx_le := v_np-ppa_rfx_lex
  """
  
  """.


v_np-ppa*_rfx_native_le := v_np-ppa*_rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-ppa*_rfx_le">
  <description>Verb, NP and PPa (opt), rfx
  <ex>encomendar
  <todo>
  </type>
  """.


v_np-ppa*_rfx_le := v_np-ppa*_rfx_lex
  """
  
  """.


v_np-ppa*_idm_native_le := v_np-ppa*_idm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-ppa*_idm_le">
  <description>Verb, NP and PPa (opt), idiom
  <ex>hacer falta
  <todo>
  </type>
  """.


v_np-ppa*_idm_le := v_np-ppa*_idm_lex
  """
  
  """.


v_vp_inf-sc_native_le := v_vp_inf-sc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_inf-sc_le">
  <description>Verb, VPinf (sbj_ctrl)
  <ex>¿has intentado hacerlo (tú)?
  <todo>
  </type>
  """.


v_vp_inf-sc_le := v_vp_inf-sc_lex
  """
  
  """.


v_vp_inf-oc-prn_native_le := v_vp_inf-oc-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_inf-oc-prn_le">
  <description>Verb (pron), VPinf (obj_ctrl)
  <ex>se dejó querer
  <todo>
  </type>
  """.


v_vp_inf-oc-prn_le := v_vp_inf-oc-prn_lex
  """
  
  """.


v_vp_inf-ser_native_le := v_vp_inf-ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_inf-ser_le">
  <description>Verb (ser), VPinf (no_ctrl)
  <ex>El error fue haberlo comprado en rebajas.
  <todo>
  </type>
  """.


v_vp_inf-ser_le := v_vp_inf-ser_lex
  """
  
  """.


v_cp_p-ser_native_le := v_cp_p-ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_p-ser_le">
  <description>Verb (ser), Sent
  <ex>El error fue que vinieran
  <todo>
  </type>
  """.


v_cp_p-ser_le := v_cp_p-ser_lex
  """
  
  """.


v_cp_p_native_le := v_cp_p_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_p_le">
  <description>Verb, Sent
  <ex>no entiende que la quiero/quisiera
  <todo>
  </type>
  """.


v_cp_p_le := v_cp_p_lex
  """
  
  """.


v_cp_p-ind_native_le := v_cp_p-ind_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_p-ind_le">
  <description>Verb, Sent (ind)
  <ex>¿Crees que aceptará?
  <todo>
  </type>
  """.


v_cp_p-ind_le := v_cp_p-ind_lex
  """
  
  """.


v_cp_p-ind-prn_native_le := v_cp_p-ind-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_p-ind-prn_le">
  <description>Verb (pron), Sent. (ind)
  <ex>se figura que vendrá
  <todo>
  </type>
  """.


v_cp_p-ind-prn_le := v_cp_p-ind-prn_lex
  """
  
  """.


v_cp_p-sub_native_le := v_cp_p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_p-sub_le">
  <description>Verb, Sent. (subj)
  <ex>dudo que venga
  <todo>
  </type>
  """.


v_cp_p-sub_le := v_cp_p-sub_lex
  """
  
  """.


v_cp_p-sub-optcm_native_le := v_cp_p-sub-optcm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_p-sub-optcm_le">
  <description>Verb, Sent. (subj, opt. complementizer)
  <ex>(siento (que) no hayáis recibido el paquete
  <todo>
  </type>
  """.


v_cp_p-sub-optcm_le := v_cp_p-sub-optcm_lex
  """
  
  """.


v_cp_q-optcm_native_le := v_cp_q-optcm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_q-optcm_le">
  <description>Verb, Ques (opt. complementizer)
  <ex>La maestra inquirió (que) por qué había estado ausente tantos días
  <todo>
  </type>
  """.


v_cp_q-optcm_le := v_cp_q-optcm_lex
  """
  
  """.


v_cp_q-optcm-prn_native_le := v_cp_q-optcm-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_q-optcm-prn_le">
  <description>Verb (pron), Ques (opt. complementizer)
  <ex>se preguntó (que) dónde había ido.
  <todo>
  </type>
  """.


v_cp_q-optcm-prn_le := v_cp_q-optcm-prn_lex
  """
  
  """.


v_cp_q-cm_native_le := v_cp_q-cm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_q-cm_le">
  <description>Verb, Ques (oblig. complementizer)
  <ex>gritó que dónde habíamos puesto el dinero
  <todo>
  </type>
  """.


v_cp_q-cm_le := v_cp_q-cm_lex
  """
  
  """.


v_cp_q_native_le := v_cp_q_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_cp_q_le">
  <description>Verb, Ques (no complementizer)
  <ex>dijo quién ganaría
  <todo>
  </type>
  """.


v_cp_q_le := v_cp_q_lex
  """
  
  """.


v_ppa*-cp_p_native_le := v_ppa*-cp_p_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-cp_p_le">
  <description>Verb, PPa and Sent (ind/sub)
  <ex>
  <todo>
  </type>
  """.


v_ppa*-cp_p_le := v_ppa*-cp_p_lex
  """
  
  """.


v_ppa*-cp_p-ind_native_le := v_ppa*-cp_p-ind_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-cp_p-ind_le">
  <description>Verb, PPa and Sent (ind)
  <ex>(le) prometí que lo harían
  <todo>
  </type>
  """.


v_ppa*-cp_p-ind_le := v_ppa*-cp_p-ind_lex
  """
  
  """.


v_ppa*-cp_p-ind-optcm_native_le := v_ppa*-cp_p-ind-optcm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-cp_p-ind-optcm_le">
  <description>Verb, Verb, PPa and Sent (ind, opt. complementizer)
  <ex>
  <todo>
  </type>
  """.


v_ppa*-cp_p-ind-optcm_le := v_ppa*-cp_p-ind-optcm_lex
  """
  
  """.


v_ppa*-cp_p-sub_native_le := v_ppa*-cp_p-sub_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-cp_p-sub_le">
  <description>Verb, PPa and Sent (sub)
  <ex>le ordené que volviese temprano
  <todo>
  </type>
  """.


v_ppa*-cp_p-sub_le := v_ppa*-cp_p-sub_lex
  """
  
  """.


v_ppa*-cp_p-sub-optcm_native_le := v_ppa*-cp_p-sub-optcm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-cp_p-sub-optcm_le">
  <description>Verb, PPa and Sent (sub, opt complementizer)
  <ex>te ruego (que) me envíes
  <todo>
  </type>
  """.


v_ppa*-cp_p-sub-optcm_le := v_ppa*-cp_p-sub-optcm_lex
  """
  
  """.


v_ppa*-cp_q-optcm_native_le := v_ppa*-cp_q-optcm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-cp_q-optcm_le">
  <description>Verb, PPa and Ques (opt. complementizer)
  <ex>(me) preguntó (que) cómo lo habían hecho
  <todo>
  </type>
  """.


v_ppa*-cp_q-optcm_le := v_ppa*-cp_q-optcm_lex
  """
  
  """.


v_ppa*-cp_q-cm_native_le := v_ppa*-cp_q-cm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-cp_q-cm_le">
  <description>Verb, PPa and Ques (oblig. complementizer)
  <ex>(me) chillar que dónde lo podía
  <todo>
  </type>
  """.


v_ppa*-cp_q-cm_le := v_ppa*-cp_q-cm_lex
  """
  
  """.


v_ppa*-cp_q_native_le := v_ppa*-cp_q_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ppa*-cp_q_le">
  <description>Verb, PPa and Ques (no complementizer)
  <ex>(me) declaró cómo lo había hecho
  <todo>
  </type>
  """.


v_ppa*-cp_q_le := v_ppa*-cp_q_lex
  """
  
  """.


v_np-vp_inf-osr_native_le := v_np-vp_inf-osr_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-vp_inf-osr_le">
  <description>Verb, NP and VPinf (object to subject raising, perception verbs)
  <ex>casi te oí decir
  <todo>
  </type>
  """.


v_np-vp_inf-osr_le := v_np-vp_inf-osr_lex
  """
  
  """.


v_np-vp_ger-osr_native_le := v_np-vp_ger-osr_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-vp_ger-osr_le">
  <description>Verb, NP and VPger (object to subject raising, perception verbs)
  <ex>la sorprendí robando
  <todo>
  </type>
  """.


v_np-vp_ger-osr_le := v_np-vp_ger-osr_lex
  """
  
  """.


v_pp_e-sym_native_le := v_pp_e-sym_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-sym_le">
  <description>Verb, PPsel / plural subject (symmetric)
  <ex>A conversa con B/A y B conversan
  <todo>
  </type>
  """.


v_pp_e-sym_le := v_pp_e-sym_lex
  """
  
  """.


v_pp*_e-sym_native_le := v_pp*_e-sym_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp*_e-sym_le">
  <description>Verb, PPsel (opt) / plural subject (symmetric)
  <ex>A colaboró (con B)/A y B colaboran
  <todo>
  </type>
  """.


v_pp*_e-sym_le := v_pp*_e-sym_lex
  """
  
  """.


v_pp_e-sym-prn_native_le := v_pp_e-sym-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-sym-prn_le">
  <description>Verb (pron), PPsel / plural subject (symmetric)
  <ex>A se pelea con B / A y B se pelean
  <todo>
  </type>
  """.


v_pp_e-sym-prn_le := v_pp_e-sym-prn_lex
  """
  
  """.


v_pp-pp_e-e-cp-p-sym_native_le := v_pp-pp_e-e-cp-p-sym_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp-pp_e-e-cp-p-sym_le">
  <description>Verb, PPsel and PPsel (Sent/VPinf sbj_ctrl) /plural subject and PPsel (Sent/VPinf sbj_ctrl)
  <ex>quedé con ella en ir al cine / quedamos en ir al cine
  <todo>
  </type>
  """.


v_pp-pp_e-e-cp-p-sym_le := v_pp-pp_e-e-cp-p-sym_lex
  """
  
  """.


v_pp-cp_e-p-sym_native_le := v_pp-cp_e-p-sym_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp-cp_e-p-sym_le">
  <description>Verb, PPsel and Sent/VPinf (sbj_ctrl) /plural subject and Sent/VPinf (sbj_ctrl)
  <ex>A acordó con B no hablar/que no hablarían; A y B acordaron no hablar/que no hablarían)
  <todo>
  </type>
  """.


v_pp-cp_e-p-sym_le := v_pp-cp_e-p-sym_lex
  """
  
  """.


v_np-pp*_e-sym-sbj-pl_native_le := v_np-pp*_e-sym-sbj-pl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_e-sym-sbj-pl_le">
  <description>Verb, NP and PPsel (opt) / plural Subj and DO
  <ex>Ambos grupos comparten un fondo genético común.
  <todo>
  </type>
  """.


v_np-pp*_e-sym-sbj-pl_le := v_np-pp*_e-sym-sbj-pl_lex
  """
  
  """.


v_np-pp_e-sym_native_le := v_np-pp_e-sym_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_e-sym_le">
  <description>Verb, NP and PPsel / plural NP
  <ex>confrontará la docencia a/con la investigación/confrontará la docencia y la investigación)
  <todo>
  </type>
  """.


v_np-pp_e-sym_le := v_np-pp_e-sym_lex
  """
  
  """.


v_np-pp*_e-sym_native_le := v_np-pp*_e-sym_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_e-sym_le">
  <description>Verb, NP and PPsel (opt) / plural NP
  <ex>compatibilizará la docencia xon la investigación/compatibilizará la docencia y la investigación)
  <todo>
  </type>
  """.


v_np-pp*_e-sym_le := v_np-pp*_e-sym_lex
  """
  
  """.


v_ap_seq_native_le := v_ap_seq_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ap_seq_le">
  <description>Verb, AP (predicative)
  <ex>el anciano cayó enfermo
  <todo>
  </type>
  """.


v_ap_seq_le := v_ap_seq_lex
  """
  
  """.


v_pp_seq_native_le := v_pp_seq_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_seq_le">
  <description>Verb, PP (predicative)
  <ex>trabaja de/como camarera
  <todo>
  </type>
  """.


v_pp_seq_le := v_pp_seq_lex
  """
  
  """.


v_pp_aj-seq_native_le := v_pp_aj-seq_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_aj-seq_le">
  <description>Verb, PP (Prep+AP) (predicative)
  <ex>alardea de listo
  <todo>
  </type>
  """.


v_pp_aj-seq_le := v_pp_aj-seq_lex
  """
  
  """.


v_pp_vp-inf-seq_native_le := v_pp_vp-inf-seq_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_vp-inf-seq_le">
  <description>Verb, PP (Prep+AP) (predicative)
  <ex>alardea de listo
  <todo>
  </type>
  """.


v_pp_vp-inf-seq_le := v_pp_vp-inf-seq_lex
  """
  
  """.


v_ap_seq-prn_native_le := v_ap_seq-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ap_seq-prn_le">
  <description>Verb (pron), AP (predicative)
  <ex>se cree muy listo
  <todo>
  </type>
  """.


v_ap_seq-prn_le := v_ap_seq-prn_lex
  """
  
  """.


v_ap*_seq-prn_native_le := v_ap*_seq-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ap*_seq-prn_le">
  <description>Verb (pron), AP (predicative,opt)
  <ex>se mostró muy crítico
  <todo>
  </type>
  """.


v_ap*_seq-prn_le := v_ap*_seq-prn_lex
  """
  
  """.


v_pp_seq-prn_native_le := v_pp_seq-prn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_seq-prn_le">
  <description>Verb (pron), PP (predicative)
  <ex>se perfila como campeón
  <todo>
  </type>
  """.


v_pp_seq-prn_le := v_pp_seq-prn_lex
  """
  
  """.


v_ap-ppa*_seq_native_le := v_ap-ppa*_seq_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ap-ppa*_seq_le">
  <description>Verb, AP and PPa (predicative)
  <ex>(le) resultaba incómodo
  <todo>
  </type>
  """.


v_ap-ppa*_seq_le := v_ap-ppa*_seq_lex
  """
  
  """.


v_np-ppa*_seq_native_le := v_np-ppa*_seq_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-ppa*_seq_le">
  <description>Verb, NP and PPa (predicative)
  <ex>(me) parece un bombazo
  <todo>
  </type>
  """.


v_np-ppa*_seq_le := v_np-ppa*_seq_lex
  """
  
  """.


v_np-ap_sor_native_le := v_np-ap_sor_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-ap_sor_le">
  <description>Verb, NP and AP (predicative)
  <ex>lo dejaron KO
  <todo>
  </type>
  """.


v_np-ap_sor_le := v_np-ap_sor_lex
  """
  
  """.


v_np-ap_sor-rfx_native_le := v_np-ap_sor-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-ap_sor-rfx_le">
  <description>Verb, NP and AP, rfx, (predicative)
  <ex>lo declararon culpable
  <todo>
  </type>
  """.


v_np-ap_sor-rfx_le := v_np-ap_sor-rfx_lex
  """
  
  """.


v_np-pp_sor_native_le := v_np-pp_sor_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_sor_le">
  <description>Verb, NP and PP (predicative)
  <ex>¿me tomas por tonto?
  <todo>
  </type>
  """.


v_np-pp_sor_le := v_np-pp_sor_lex
  """
  
  """.


v_np-pp_sor-rfx_native_le := v_np-pp_sor-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_sor-rfx_le">
  <description>Verb, NP and PP (predicative), rfx
  <ex>lo proclamaron como...
  <todo>
  </type>
  """.


v_np-pp_sor-rfx_le := v_np-pp_sor-rfx_lex
  """
  
  """.


v_np-pp*_oeq-rfx_native_le := v_np-pp*_oeq-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp*_oeq-rfx_le">
  <description>Verb, NP and PP (opt), (predicative), rfx
  <ex>se disfrazó (de pirata)
  <todo>
  </type>
  """.


v_np-pp*_oeq-rfx_le := v_np-pp*_oeq-rfx_lex
  """
  
  """.


v_np-pp_aj-oeq_native_le := v_np-pp_aj-oeq_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_aj-oeq_le">
  <description>Verb, NP and PP adj, (predicative), rfx
  <ex>un libro que no vaciló en calificar de importante
  <todo>
  </type>
  """.


v_np-pp_aj-oeq_le := v_np-pp_aj-oeq_lex
  """
  
  """.


v_np-pp_aj-oeq-rfx_native_le := v_np-pp_aj-oeq-rfx_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_np-pp_aj-oeq-rfx_le">
  <description>Verb, NP and PP adj, (predicative), rfx
  <ex>un libro que no vaciló en calificar de importante
  <todo>
  </type>
  """.


v_np-pp_aj-oeq-rfx_le := v_np-pp_aj-oeq-rfx_lex
  """
  
  """.


v_ap_ser_native_le := v_ap_ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ap_ser_le">
  <description>Verb (ser), AP
  <ex>Juan es feo
  <todo>
  </type>
  """.


v_ap_ser_le := v_ap_ser_lex
  """
  
  """.


v_pp_ser_native_le := v_pp_ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_ser_le">
  <description>Verb (ser), PP
  <ex>Juan es de esta ciudad
  <todo>
  </type>
  """.


v_pp_ser_le := v_pp_ser_lex
  """
  
  """.


v_modnp_ser_native_le := v_modnp_ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_modnp_ser_le">
  <description>Verb (ser), temporal NP
  <ex>la reunión fue la semana pasada
  <todo>
  </type>
  """.


v_modnp_ser_le := v_modnp_ser_lex
  """
  
  """.


v_pp_e-vp-inf-ser_native_le := v_pp_e-vp-inf-ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-vp-inf-ser_le">
  <description>Verb (ser), PPsel (VPinf)
  <ex>Es como pulsar una tecla de un simple vistazo.
  <todo>
  </type>
  """.


v_pp_e-vp-inf-ser_le := v_pp_e-vp-inf-ser_lex
  """
  
  """.


v_vp_ppart-ser_native_le := v_vp_ppart-ser_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_ppart-ser_le">
  <description>Verb (ser), VPppart
  <ex>fue atacado
  <todo>
  </type>
  """.


v_vp_ppart-ser_le := v_vp_ppart-ser_lex
  """
  
  """.


v_vp_ppart-estar_native_le := v_vp_ppart-estar_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_ppart-ser_le">
  <description>Verb (estar), VPppart
  <ex>está muerto
  <todo>
  </type>
  """.


v_vp_ppart-estar_le := v_vp_ppart-estar_lex
  """
  
  """.


v_ap_estar_native_le := v_ap_estar_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_ap_estar_le">
  <description>Verb (estar), AP
  <ex>Juan está guapo
  <todo>
  </type>
  """.


v_ap_estar_le := v_ap_estar_lex
  """
  
  """.


v_pp_estar_native_le := v_pp_estar_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_estar_le">
  <description>Verb (estar), PP
  <ex>Juan está en la ciudad
  <todo>
  </type>
  """.


v_pp_estar_le := v_pp_estar_lex
  """
  
  """.


v_adv_estar_native_le := v_adv_estar_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_adv_estar_le">
  <description>Verb (estar), ADV
  <ex>¿Dónde/cómo está Juan?
  <todo>
  </type>
  """.


v_adv_estar_le := v_adv_estar_lex
  """
  
  """.


v_modnp_estar_native_le := v_modnp_estar_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_modnp_estar_le">
  <description>Verb (estar), MODNP
  <ex>Ahí está Juan
  <todo>
  </type>
  """.


v_modnp_estar_le := v_modnp_estar_lex
  """
  
  """.


v_pp_e-vp-inf-estar_native_le := v_pp_e-vp-inf-estar_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_pp_e-vp-inf-estar_le">
  <description>Verb (estar), PPsel (VPinf)
  <ex>todo está por organizar
  <todo>
  </type>
  """.


v_pp_e-vp-inf-estar_le := v_pp_e-vp-inf-estar_lex
  """
  
  """.


v_vp_ger-estar_native_le := v_vp_ger-estar_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_ger-estar_le">
  <description>Verb (estar), VPger
  <ex>Juan está cantando
  <todo>
  </type>
  """.


v_vp_ger-estar_le := v_vp_ger-estar_lex
  """
  
  """.


v_vp_ger-nsbj-estar_native_le := v_vp_ger-nsbj-estar_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_ger-nsbj-estar_le">
  <description>Verb (estar), VPger, no subj
  <ex>está lloviendo
  <todo>
  </type>
  """.


v_vp_ger-nsbj-estar_le := v_vp_ger-nsbj-estar_lex
  """
  
  """.


v_vp_part-haber_native_le := v_vp_part-haber_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_part-haber_le">
  <description>Verb (haber), VP
  <ex>ha llorado
  <todo>
  </type>
  """.


v_vp_part-haber_le := v_vp_part-haber_lex
  """
  
  """.


v_vp_ppart-haber_native_le := v_vp_ppart-haber_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_ppart-haber_le">
  <description>Verb (haber), VP passive
  <ex>ha sido visto
  <todo>
  </type>
  """.


v_vp_ppart-haber_le := v_vp_ppart-haber_lex
  """
  
  """.


v_vp_part-nsbj-haber_native_le := v_vp_part-nsbj-haber_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="v_vp_part-nsbj-haber_le">
  <description>Verb (haber), VP, no subj
  <ex>ha llovido
  <todo>
  </type>
  """.


v_vp_part-nsbj-haber_le := v_vp_part-nsbj-haber_lex
  """
  
  """.


n_-_c_native_le := n_-_c_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_c_le">
  <description> Noun, no compl, count
  <ex>el/cualquier niño.
  <todo>
  """.


n_-_c_le := n_-_c_lex
  """
  
  """.


n_-_c-pl_native_le := n_-_c-pl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_c-pl_le">
  <description> Noun, no compl, count, plural
  <ex>las/*la comillas
  <todo>
  """.


n_-_c-pl_le := n_-_c-pl_lex
  """
  
  """.


n_-_m_native_le := n_-_m_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_m_le">
  <description> Noun, no compl, mass
  <ex>tiene (bastante/un poco de/*cualquier) acidez.
  <todo>
  """.


n_-_m_le := n_-_m_lex
  """
  
  """.


n_-_m-pl_native_le := n_-_m-pl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_m-pl_le">
  <description> Noun, no compl, mass, plural
  <ex>tiene pocos/un poco de/*tres celos
  <todo>
  """.


n_-_m-pl_le := n_-_m-pl_lex
  """
  
  """.


n_-_mc_native_le := n_-_mc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_mc_le">
  <description> Noun, no compl, mass-count
  <ex> bebió (cualquier/un/un poco de/una copa de) vino
  <todo>
  """.


n_-_mc_le := n_-_mc_lex
  """
  
  """.


n_-_nc_native_le := n_-_nc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_nc_le">
  <description> Noun, no compl, uncount
  <ex>*un poco de/bastante abogacía
  <todo>
  """.


n_-_nc_le := n_-_nc_lex
  """
  
  """.


n_-_col_native_le := n_-_col_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_col_le">
  <description> Noun, no compl, collective
  <ex> ejército, manada
  <todo>
  """.


n_-_col_le := n_-_col_lex
  """
  
  """.


n_-_c-tmp_native_le := n_-_c-tmp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_c-tmp_le">
  <description> Noun, no compl, count, temporal
  <ex>lo vieron ese lunes.
  <todo>
  """.


n_-_c-tmp_le := n_-_c-tmp_lex
  """
  
  """.


n_pp_c_native_le := n_pp_c_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_c_le">
  <description> Noun, PPde, count
  <ex>los amigos de Peter
  <todo>
  """.


n_pp_c_le := n_pp_c_lex
  """
  
  """.


n_pp_m_native_le := n_pp_m_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_m_le">
  <description> Noun, PPde, mass
  <ex>la lentitud del juicio
  <todo>
  """.


n_pp_m_le := n_pp_m_lex
  """
  
  """.


n_pp_mc_native_le := n_pp_mc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_mc_le">
  <description> Noun, PPde, mass-count
  <ex>
  <todo>
  """.


n_pp_mc_le := n_pp_mc_lex
  """
  
  """.


n_pp_nc_native_le := n_pp_nc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_nc_le">
  <description> Noun, PPde, uncount
  <ex>la belleza del cuadro
  <todo>
  """.


n_pp_nc_le := n_pp_nc_lex
  """
  
  """.


n_pp-pp_de-mc_native_le := n_pp-pp_de-mc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp-pp_de-mc_le">
  <description> Noun, PP comp de, PPcomp, mass-count
  <ex>la adicción de Juan a los caramelos de menta
  <todo>
  """.


n_pp-pp_de-mc_le := n_pp-pp_de-mc_lex
  """
  
  """.


n_pp-pp_de-de-mc_native_le := n_pp-pp_de-de-mc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp-pp_de-de-mc_le">
  <description> Noun, PPde, PPde, mass-count
  <ex>l descubrimiento de un científico francés del virus
  <todo>
  """.


n_pp-pp_de-de-mc_le := n_pp-pp_de-de-mc_lex
  """
  
  """.


n_cp_p-mc_native_le := n_cp_p-mc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_cp_p-mc_le">
  <description>Noun, PPde (Sent), mass-count
  <ex>no hay duda de que vendrá
  <todo>
  """.


n_cp_p-mc_le := n_cp_p-mc_lex
  """
  
  """.


n_cp_p-c_native_le := n_cp_p-c_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_cp_p-c_le">
  <description>Noun, PPde (Sent), count
  <ex>una ventaja ((de) que no llueva es que no hay ocasión de perder el paraguas)
  <todo>
  """.


n_cp_p-c_le := n_cp_p-c_lex
  """
  
  """.


n_cp*_p-c_native_le := n_cp*_p-c_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_cp*_p-c_le">
  <description>Noun, PPde (Sent, opt), count
  <ex>
  <todo>
  """.


n_cp*_p-c_le := n_cp*_p-c_lex
  """
  
  """.


n_cp_q-c_native_le := n_cp_q-c_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_cp_q-c_le">
  <description>Noun, PPde (Quest), count
  <ex>la incógnita (de cómo se ha utilizado el dinero público)
  <todo>
  """.


n_cp_q-c_le := n_cp_q-c_lex
  """
  
  """.


n_pp-cp_p-mc_native_le := n_pp-cp_p-mc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp-cp_p-mc_le">
  <description>Noun, PPde, PPsel (Sent/VPinf), mass-count
  <ex>el interés (de la empresa) (en/por que lleguen a un acuerdo/llegar a un acuerdo)
  <todo>
  """.


n_pp-cp_p-mc_le := n_pp-cp_p-mc_lex
  """
  
  """.


n_pp-vp_mc_native_le := n_pp-vp_mc_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp-vp_mc_le">
  <description>Noun, PPde, PPsel (VPinf), mass-count
  <ex>la estupidez (de Juan) (de votar a Ernesto).
  <todo>
  """.


n_pp-vp_mc_le := n_pp-vp_mc_lex
  """
  
  """.


n_pp_part_native_le := n_pp_part_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_part_le">
  <description>Noun, PPde, partitive
  <ex>la mayoría de senadores votaron/votó en contra
  <todo>
  """.


n_pp_part_le := n_pp_part_lex
  """
  
  """.


n_pp_part-nu_native_le := n_pp_part-nu_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_part-nu_le">
  <description>Noun, PPde, partitive-numeral
  <ex>dos terceras partes
  <todo>
  """.


n_pp_part-nu_le := n_pp_part-nu_lex
  """
  
  """.


n_pp_grp_native_le := n_pp_grp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_grp_le">
  <description>Noun, PPde, group
  <ex>un grupo minoritario de senadores votaron en contra
  <todo>
  """.


n_pp_grp_le := n_pp_grp_lex
  """
  
  """.


n_pp_psd-part_native_le := n_pp_psd-part_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_psd-part_le">
  <description>Noun, PPde, pseudo-partitive
  <ex>un montón (de libros)
  <todo>
  """.


n_pp_psd-part_le := n_pp_psd-part_lex
  """
  
  """.


n_pp_psd-part-nu-card_native_le := n_pp_psd-part-nu-card_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_psd-part-nu-card_le">
  <description>Noun, PPde, pseudo-partitive, numeral
  <ex>compró tres docenas de huevos
  <todo>
  """.


n_pp_psd-part-nu-card_le := n_pp_psd-part-nu-card_lex
  """
  
  """.


n_pp_c-tmp_native_le := n_pp_c-tmp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_c-tmp_le">
  <description>Noun, PPde, temporal measure
  <ex>después de años de disgustos se divorciaron
  <todo>
  """.


n_pp_c-tmp_le := n_pp_c-tmp_lex
  """
  
  """.


n_-_pn_native_le := n_-_pn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pn_le">
  <description>Proper Noun
  <ex>
  <todo>
  """.


foreign_le := n_-_pn_lex
  """
  Assume for now that it is useful to treat foreign words/fragments as named entities.
  """.


n_-_pn_le := n_-_pn_lex
  """
  
  """.


n_-_pr-pers-n_native_le := n_-_pr-pers-n_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-pers-n_le">
  <description>Pronoun, pers, nominative ("yo", "tú")
  <ex> tú y yo iremos por ahí.
  <todo>
  """.


n_-_pr-pers-n_le := n_-_pr-pers-n_lex
  """
  
  """.


n_-_pr-pers-no-sg_native_le := n_-_pr-pers-no-sg_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-pers-no-sg_le">
  <description>Pronoun, pers, sing, nominative and oblique ("él", "usted", "vos")
  <ex>nosotros confiamos en él.
  <todo>
  """.


n_-_pr-pers-no-sg_le := n_-_pr-pers-no-sg_lex
  """
  
  """.


n_-_pr-pers-no-pl_native_le := n_-_pr-pers-no-pl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-pers-no-pl_le">
  <description>Pronoun, pers, plural nominative and oblique ("nosotros", "vosotros", "ellos", "ustedes")
  <ex>nosotros confiamos en todos ellos.
  <todo>
  """.


n_-_pr-pers-no-pl_le := n_-_pr-pers-no-pl_lex
  """
  
  """.


n_-_pr-pers-o_native_le := n_-_pr-pers-o_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-pers-o_le">
  <description>Pronoun, pers, oblique ("mí", "tí", "sí")
  <ex>confía en mí.
  <todo>
  """.


n_-_pr-pers-o_le := n_-_pr-pers-o_lex
  """
  
  """.


n_-_pr-pers-lo_native_le := n_-_pr-pers-lo_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-pers-lo_le">
  <description>Pronoun, pers, accusative ("lo", "la", "los", "las")
  <ex>lo veremos
  <todo>
  """.


n_-_pr-pers-lo_le := n_-_pr-pers-lo_lex
  """
  
  """.


n_-_pr-pers-le_native_le := n_-_pr-pers-le_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-pers-le_le">
  <description>Pronoun, pers, dative ("le", "les")
  <ex>le compró un regalo
  <todo>
  """.


n_-_pr-pers-le_le := n_-_pr-pers-le_lex
  """
  
  """.


n_-_pr-pers-me_native_le := n_-_pr-pers-me_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-pers-me_le">
  <description>Pronoun, pers, accusative/dative ("me")
  <ex>me lo dió
  <ex>me vieron
  <todo>
  """.


n_-_pr-pers-me_le := n_-_pr-pers-me_lex
  """
  
  """.


n_-_pr-pers-te_native_le := n_-_pr-pers-te_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-pers-te_le">
  <description>Pronoun, personal, accusative/dative ("te")
  <ex>te lo dió
  <ex>te veremos mañana
  <todo>
  """.


n_-_pr-pers-te_le := n_-_pr-pers-te_lex
  """
  
  """.


n_-_pr-pers-nos_native_le := n_-_pr-pers-nos_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-pers-nos_le">
  <description>Pronoun, pers, accusative/dative ("nos")
  <ex>nos lo dió
  <ex>nos veremos mañana
  <todo>
  """.


n_-_pr-pers-nos_le := n_-_pr-pers-nos_lex
  """
  
  """.


n_-_pr-pers-os_native_le := n_-_pr-pers-os_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-pers-os_le">
  <description>Pronoun, pers, accusative/dative ("os")
  <ex>os lo dije
  <ex>os veremos mañana
  <todo>
  """.


n_-_pr-pers-os_le := n_-_pr-pers-os_lex
  """
  
  """.


n_-_pr-pers-se_native_le := n_-_pr-pers-se_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-pers-se_le">
  <description>Pronoun, pers, dative ("se")
  <ex>se la compró
  <todo>
  """.


n_-_pr-pers-se_le := n_-_pr-pers-se_lex
  """
  
  """.


n_-_pr-impers-se_native_le := n_-_pr-impers-se_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-impers-se_le">
  <description>Pronoun, pers, impers ("se")
  <ex>se vende pan
  <todo>
  """.


n_-_pr-impers-se_le := n_-_pr-impers-se_lex
  """
  
  """.


n_-_pr-df-ambos_native_le := n_-_pr-df-ambos_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-df-ambos_le">
  <description>Pronoun, def ("ambos")
  <ex>
  <todo>
  """.


n_-_pr-df-ambos_le := n_-_pr-df-ambos_lex
  """
  
  """.


n_-_pr-df-tal_native_le := n_-_pr-df-tal_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-df-tal_le">
  <description>Pronoun, def ("tal")
  <ex>
  <todo>
  """.


n_-_pr-df-tal_le := n_-_pr-df-tal_lex
  """
  
  """.


n_-_pr-dem-este_native_le := n_-_pr-dem-este_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-dem-este_le">
  <description>Pronoun, demons ("este")
  <ex>
  <todo>
  """.


n_-_pr-dem-este_le := n_-_pr-dem-este_lex
  """
  
  """.


n_-_pr-dem-ese_native_le := n_-_pr-dem-ese_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-dem-ese_le">
  <description>Pronoun, demons ("ese")
  <ex>
  <todo>
  """.


n_-_pr-dem-ese_le := n_-_pr-dem-ese_lex
  """
  
  """.


n_-_pr-dem-aquel_native_le := n_-_pr-dem-aquel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-dem-aquel_le">
  <description>Pronoun, demons ("aquel")
  <ex>
  <todo>
  """.


n_-_pr-dem-aquel_le := n_-_pr-dem-aquel_lex
  """
  
  """.


n_-_pr-dem-ello_native_le := n_-_pr-dem-ello_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-dem-ello_le">
  <description>Pronoun, demons ("ello")
  <ex>
  <todo>
  """.


n_-_pr-dem-ello_le := n_-_pr-dem-ello_lex
  """
  
  """.


n_-_pr-idf-alguien_native_le := n_-_pr-idf-alguien_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-idf-alguien_le">
  <description>Pronoun, indef ("alguien")
  <ex>alguien llamó
  <todo>
  """.


n_-_pr-idf-alguien_le := n_-_pr-idf-alguien_lex
  """
  
  """.


n_-_pr-idf-nadie_native_le := n_-_pr-idf-nadie_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-idf-nadie_le">
  <description>Pronoun, indef ("nadie")
  <ex>(casi) nadie vino
  <todo>
  """.


n_-_pr-idf-nadie_le := n_-_pr-idf-nadie_lex
  """
  
  """.


n_-_pr-idf-todo_native_le := n_-_pr-idf-todo_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-idf-todo_le">
  <description>Pronoun, indef ("todos")
  <ex>(casi) todos fueron
  <todo>
  """.


n_-_pr-idf-todo_le := n_-_pr-idf-todo_lex
  """
  
  """.


n_-_pr-idf-demas_native_le := n_-_pr-idf-demas_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-idf-demas_le">
  <description>Pronoun, indef ("demás")
  <ex>vinieron Pedro, Juan y (los) demás
  <todo>
  """.


n_-_pr-idf-demas_le := n_-_pr-idf-demas_lex
  """
  
  """.


n_pp_pr-part-algo_native_le := n_pp_pr-part-algo_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-algo_le">
  <description>Pronoun, part ("algo")
  <ex>he comido algo (de sopa)
  <todo>
  """.


n_pp_pr-part-algo_le := n_pp_pr-part-algo_lex
  """
  
  """.


n_pp_pr-part-nada_native_le := n_pp_pr-part-nada_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-nada_le">
  <description>Pronoun, part ("nada")
  <ex>no he comido (casi) nada (de sopa)
  <todo>
  """.


n_pp_pr-part-nada_le := n_pp_pr-part-nada_lex
  """
  
  """.


n_pp_pr-part-un-poco_native_le := n_pp_pr-part-un-poco_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-un-poco_le">
  <description>Pronoun, part ("poco")
  <ex>he comido un poco de sopa
  <todo>
  """.


n_pp_pr-part-un-poco_le := n_pp_pr-part-un-poco_lex
  """
  
  """.


n_pp_pr-part-alguno_native_le := n_pp_pr-part-alguno_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-alguno_le">
  <description>Pronoun, part ("alguno")
  <ex>alguno de los chicos
  <todo>
  """.


n_pp_pr-part-alguno_le := n_pp_pr-part-alguno_lex
  """
  
  """.


n_pp_pr-part-bastante_native_le := n_pp_pr-part-bastante_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-bastante_le">
  <description>Pronoun, part ("bastante")
  <ex>bastantes de los chicos
  <todo>
  """.


n_pp_pr-part-bastante_le := n_pp_pr-part-bastante_lex
  """
  
  """.


n_pp_pr-part-cualquiera_native_le := n_pp_pr-part-cualquiera_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-cualquiera_le">
  <description>Pronoun, part ("cualquiera")
  <ex>cualquiera de los chicos
  <todo>
  """.


n_pp_pr-part-cualquiera_le := n_pp_pr-part-cualquiera_lex
  """
  
  """.


n_pp_pr-part-demasiado_native_le := n_pp_pr-part-demasiado_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-demasiado_le">
  <description>Pronoun, part ("demasiado")
  <ex>demasiados de los chicos
  <todo>
  """.


n_pp_pr-part-demasiado_le := n_pp_pr-part-demasiado_lex
  """
  
  """.


n_pp_pr-part-mucho_native_le := n_pp_pr-part-mucho_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-mucho_le">
  <description>Pronoun, part ("mucho")
  <ex>muchos de los chicos
  <todo>
  """.


n_pp_pr-part-mucho_le := n_pp_pr-part-mucho_lex
  """
  
  """.


n_pp_pr-part-otro_native_le := n_pp_pr-part-otro_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-otro_le">
  <description>Pronoun, part ("otro")
  <ex>otros de los chicos
  <todo>
  """.


n_pp_pr-part-otro_le := n_pp_pr-part-otro_lex
  """
  
  """.


n_pp_pr-part-poco_native_le := n_pp_pr-part-poco_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-poco_le">
  <description>Pronoun, part ("pocos")
  <ex>pocos de los chicos
  <todo>
  """.


n_pp_pr-part-poco_le := n_pp_pr-part-poco_lex
  """
  
  """.


n_pp_pr-part-quienquiera_native_le := n_pp_pr-part-quienquiera_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-quienquiera_le">
  <description>Pronoun, part ("quienquiera")
  <ex>quienesquiera de los chicos
  <todo>
  """.


n_pp_pr-part-quienquiera_le := n_pp_pr-part-quienquiera_lex
  """
  
  """.


n_pp_pr-part-varios_native_le := n_pp_pr-part-varios_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-varios_le">
  <description>Pronoun, part ("varios")
  <ex>varios de los chicos
  <todo>
  """.


n_pp_pr-part-varios_le := n_pp_pr-part-varios_lex
  """
  
  """.


n_pp_pr-part-ninguno_native_le := n_pp_pr-part-ninguno_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-ninguno_le">
  <description>Pronoun, part ("ninguno")
  <ex>(casi) ninguno de los chicos
  <todo>
  """.


n_pp_pr-part-ninguno_le := n_pp_pr-part-ninguno_lex
  """
  
  """.


n_pp_pr-part-uno_native_le := n_pp_pr-part-uno_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-uno_le">
  <description>Pronoun, part ("uno")
  <ex>(cada) uno (de los chicos)
  <todo>
  """.


n_pp_pr-part-uno_le := n_pp_pr-part-uno_lex
  """
  
  """.


n_pp_pr-part-cuantos_native_le := n_pp_pr-part-cuantos_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-cuantos_le">
  <description>Pronoun, part ("cuantos")
  <ex>unos cuantos (de los chicos)
  <todo>
  """.


n_pp_pr-part-cuantos_le := n_pp_pr-part-cuantos_lex
  """
  
  """.


n_-_pr-rel-que_native_le := n_-_pr-rel-que_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-rel-que_le">
  <description>Pronoun, rel ("que")
  <ex>el escritor que premiaron anoche vendrá a nuestra tertulia
  <todo>
  """.


n_-_pr-rel-que_le := n_-_pr-rel-que_lex
  """
  
  """.


n_-_pr-rel-quien_native_le := n_-_pr-rel-quien_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-rel-quien_le">
  <description>Pronoun, rel ("quien")
  <ex>los congresistas, quienes llegaron anoche, fueron alojados provisionalmente
  <todo>
  """.


n_-_pr-rel-quien_le := n_-_pr-rel-quien_lex
  """
  
  """.


n_-_pr-rel-cual_native_le := n_-_pr-rel-cual_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-rel-cual_le">
  <description>Pronoun, rel ("cual")
  <ex>la columna de humo que causó la explosión, el cual se propagó a otros edificios
  <todo>
  """.


n_-_pr-rel-cual_le := n_-_pr-rel-cual_lex
  """
  
  """.


n_-_pr-frel-que_native_le := n_-_pr-free-rel-que_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-frel-que_le">
  <description>Pronoun, free rel., ("que")
  <ex>los que llegaron anoche fueron alojados provisionalmente
  <todo>
  """.


n_-_pr-frel-que_le := n_-_pr-free-rel-que_lex
  """
  
  """.


n_-_pr-frel-quien_native_le := n_-_pr-free-rel-quien_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-frel-quien_le">
  <description>Pronoun, free rel. ("quien")
  <ex>quienes llegaron anoche fueron alojados provisionalmente
  <todo>
  """.


n_-_pr-frel-quien_le := n_-_pr-free-rel-quien_lex
  """
  
  """.


n_-_pr-wh-que_native_le := n_-_pr-wh-que_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_-_pr-wh_que_le">
  <description>Pronoun, int ("qué")
  <ex>¿qué le has comprado?
  <todo>
  """.


n_-_pr-wh-que_le := n_-_pr-wh-que_lex
  """
  
  """.


n_pp_pr-wh-quien_native_le := n_pp_pr-wh-quien_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-wh_que_le">
  <description>Pronoun, int ("quién")
  <ex>¿quién de tus amigos es diputado?
  <todo>
  """.


n_pp_pr-wh-quien_le := n_pp_pr-wh-quien_lex
  """
  
  """.


n_pp_pr-wh-cual_native_le := n_pp_pr-wh-cual_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-wh-cual_le">
  <description>Pronoun, int ("cuál")
  <ex>¿cuál de tus amigos es diputado?
  <todo>
  """.


n_pp_pr-wh-cual_le := n_pp_pr-wh-cual_lex
  """
  
  """.


n_pp_pr-wh-cuanto_native_le := n_pp_pr-wh-cuanto_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-wh-cuanto_le">
  <description>Pronoun, int ("cuánto")
  <ex>¿cuántos de tus amigos es diputado?
  <todo>
  """.


n_pp_pr-wh-cuanto_le := n_pp_pr-wh-cuanto_lex
  """
  
  """.


n_pp_pr-part-nu-card_native_le := n_pp_pr-part-nu-card_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_nu-card_le">
  <description>Pronoun, part, card. num
  <ex>dame dos (de esos libros)
  <todo>
  """.


n_pp_pr-part-nu-card_le := n_pp_pr-part-nu-card_lex
  """
  
  """.


n_pp_pr-psd-part-nu-card_native_le := n_pp_pr-psd-part-nu-card_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-psd-part-nu-card_le">
  <description>Pronoun, pseudo-part, card. num
  <ex>compró tres docenas (de huevos)
  <todo>
  """.


n_pp_pr-psd-part-nu-card_le := n_pp_pr-psd-part-nu-card_lex
  """
  
  """.


n_pp_pr-part-nu-mult_native_le := n_pp_pr-part-nu-mult_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="n_pp_pr-part-nu-mult_le">
  <description>Pronoun, part, multipl. num
  <ex>comió el doble/triple (de pan) (que su hermana)
  <todo>
  """.


n_pp_pr-part-nu-mult_le := n_pp_pr-part-nu-mult_lex
  """
  
  """.


av_-_s_native_le := av_-_s_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_s_le">
  <description>Adverb, scopal, focus
  <ex>especialmente bajo la escalera/aquí/estos muchachos
  <todo>
  """.


av_-_s_le := av_-_s_lex
  """
  
  """.


av_-_s-spd_native_le := av_-_s-spd_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_s-spd_le">
  <description>Adverb, scopal, focus
  <ex>especialmente bajo la escalera/aquí/estos muchachos
  <todo>
  """.


av_-_s-spd_le := av_-_s-spd_lex
  """
  
  """.


av_-_s-psth_native_le := av_-_s-psth_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_s-psth_le">
  <description>Adverb,
  <ex> mañana/en la mesa mismo
  <todo>
  """.


av_-_s-psth_le := av_-_s-psth_lex
  """
  
  """.


av_-_s-psth-n_native_le := av_-_s-psth-n_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_s-psth-n_le">
  <description>Adverb,
  <ex>usted mismo
  <todo>
  """.


av_-_s-psth-n_le := av_-_s-psth-n_lex
  """
  
  """.


av_-_s-vm_native_le := av_-_s-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_s-vm_le">
  <description>Adverb, scopal, S
  <ex>
  <todo>
  """.


av_-_s-vm_le := av_-_s-vm_lex
  """
  
  """.


av_-_s-vm-spd_native_le := av_-_s-vm-spd_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_s-vm-spd_le">
  <description>Adverb, scopal, S
  <ex>
  <todo>
  """.


av_-_s-vm-spd_le := av_-_s-vm-spd_lex
  """
  
  """.


av_-_s-xm_native_le := av_-_s-xm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_s-xm_le">
  <description>Adverb, scopal, S
  <ex>
  <todo>
  """.


av_-_s-xm_le := av_-_s-xm_lex
  """
  
  """.


av_-_s-xm-spd_native_le := av_-_s-xm-spd_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_s-xm-spd_le">
  <description>Adverb, scopal, X
  <ex>
  <todo>
  """.


av_-_s-xm-spd_le := av_-_s-xm-spd_lex
  """
  
  """.


av_-_i-vm_native_le := av_-_i-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_i-vm_le">
  <description>Adverb, intersec, V mod
  <ex>sencillamente, simplemente, solamente
  <todo>
  """.


av_-_i-vm_le := av_-_i-vm_lex
  """
  
  """.


av_-_i-sm_native_le := av_-_i-sm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_i-sm_le">
  <description>Adverb, intersec, S mod
  <ex>sencillamente, simplemente, solamente
  <todo>
  """.


av_-_i-sm_le := av_-_i-sm_lex
  """
  
  """.


av_-_i-vm-spd_native_le := av_-_i-vm-spd_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_i-vm-spd_le">
  <description>Adverb, intersec, Vmod
  <ex>le ha influido muy negativamente
  <todo>
  """.


av_-_i-vm-spd_le := av_-_i-vm-spd_lex
  """
  
  """.


av_-_i-vm-ppart_native_le := av_-_i-vm-ppart_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_i-vm-ppart_le">
  <description>Adverb, intersec, V (ppart) mod
  <ex>recien llegados
  <todo>
  """.


av_-_i-vm-ppart_le := av_-_i-vm-ppart_lex
  """
  
  """.


av_-_dg-qnt_native_le := av_-_dg-qnt_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_dg-qnt_le">
  <description>Adverb, degree quant.
  <ex>mucho, bien, algo, bastante, demasiado, super, nada, medio,...
  <todo>
  """.


av_-_dg-qnt_le := av_-_dg-qnt_lex
  """
  
  """.


av_-_dg-muy-and-casi_native_le := av_-_dg-muy-and-casi_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_dg-muy-and-casi_le">
  <description>Adverb, degree ("muy")
  <ex>casi todos los chicos lloran
  <todo>
  """.


av_-_dg-muy-and-casi_le := av_-_dg-muy-and-casi_lex
  """
  
  """.


av_-_dg-casi_native_le := av_-_dg-casi_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_dg-casi_le">
  <description>Adverb, degree ("casi")
  <ex>casi nadie
  <todo>
  """.


av_-_dg-casi_le := av_-_dg-casi_lex
  """
  
  """.


av_-_dg_native_le := av_-_dg_lex & native_le
  """
   This is a native lexical entry type, for words that are in the lexicon.
  
   <type val="av_-_dg-un-tanto_le">
   <description>Adverb, degree ("un tanto")
   <ex>
   <todo>
  av_-_dg-un-tanto_le := av_-_dg-un-tanto_lex.
   <type val="av_-_dg_le">
   <description>Adverb, degree, (ending in '-mente')
   <ex>
   <todo>
  """.


av_-_dg_le := av_-_dg_lex
  """
  
  """.


av_-_dg-cmp_native_le := av_-_dg-cmp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_dg-cmp_le">
  <description>Adverb, degree compar
  <ex>más/menos guapo que
  <todo>
  """.


av_-_dg-cmp_le := av_-_dg-cmp_lex
  """
  
  """.


av_-_dg-cmp-eq_native_le := av_-_dg-cmp-eq_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_dg-cmp-eq_le">
  <description>Adverb, degree compar, equal
  <ex>tan guapo como
  <todo>
  """.


av_-_dg-cmp-eq_le := av_-_dg-cmp-eq_lex
  """
  
  """.


av_-_dg-sup_native_le := av_-_dg-sup_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_dg-sup_le">
  <description>Adverb, degree superl
  <ex>la más/menos guapa de
  <todo>
  """.


av_-_dg-sup_le := av_-_dg-sup_lex
  """
  
  """.


av_-_pr-poco_native_le := av_-_pr-poco_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_pr-poco_le">
  <description>Adverb, quant. pron., ("poco")
  <ex>el muchacho corrió un poco
  <todo>
  """.


av_-_pr-poco_le := av_-_pr-poco_lex
  """
  
  """.


av_-_pr-un-poco_native_le := av_-_pr-un-poco_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_pr-un-poco_le">
  <description>Adverb, quant. pron., ("un poco")
  <ex>el muchacho corrió un poco
  <todo>
  """.


av_-_pr-un-poco_le := av_-_pr-un-poco_lex
  """
  
  """.


av_-_pr-nada_native_le := av_-_pr-nada_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_pr-nada_le">
  <description>Adverb, quant. pron., ("nada")
  <ex>el muchacho no corrió nada
  <todo>
  """.


av_-_pr-nada_le := av_-_pr-nada_lex
  """
  
  """.


av_-_pr-menos_native_le := av_-_pr-menos_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_pr-menos_le">
  <description>Adverb, quant. pron., ("menos")
  <ex>el muchacho corrió mucho menos
  <todo>
  """.


av_-_pr-menos_le := av_-_pr-menos_lex
  """
  
  """.


av_-_pr-más_native_le := av_-_pr-más_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_pr-más_le">
  <description>Adverb, quant. pron., ("más")
  <ex>el muchacho corrió mucho más
  <todo>
  """.


av_-_pr-más_le := av_-_pr-más_lex
  """
  
  """.


av_-_pr-mucho_native_le := av_-_pr-mucho_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_pr-mucho_le">
  <description>Adverb, quant. pron., ("mucho")
  <ex>el muchacho corrió mucho
  <todo>
  """.


av_-_pr-mucho_le := av_-_pr-mucho_lex
  """
  
  """.


av_-_pr-bastante_native_le := av_-_pr-bastante_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_pr-bastante_le">
  <description>Adverb, quant. pron., ("bastante")
  <ex>el muchacho corrió bastante
  <todo>
  """.


av_-_pr-bastante_le := av_-_pr-bastante_lex
  """
  
  """.


av_-_pr-demasiado_native_le := av_-_pr-demasiado_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_pr-demasiado_le">
  <description>Adverb, quant. pron., ("demasiado")
  <ex>el muchacho corrió demasiado.
  <todo>
  """.


av_-_pr-demasiado_le := av_-_pr-demasiado_lex
  """
  
  """.


av_-_pr-tanto_native_le := av_-_pr-tanto_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_pr-tanto_le">
  <description>Adverb, quant. pron., ("tanto")
  <ex>el muchacho corrió tanto
  <todo>
  """.


av_-_pr-tanto_le := av_-_pr-tanto_lex
  """
  
  """.


av_-_pr-algo_native_le := av_-_pr-algo_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_pr-algo_le">
  <description>Adverb, quant. pron., ("algo")
  <ex>el muchacho corrió algo
  <todo>
  """.


av_-_pr-algo_le := av_-_pr-algo_lex
  """
  
  """.


av_-_pr-mea_native_le := av_-_pr-mea_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_pr-mea_le">
  <description>Adverb, quant. pron., measure
  <ex>las ventas aumentaron el 20%
  <todo>
  """.


av_-_pr-mea_le := av_-_pr-mea_lex
  """
  
  """.


av_-_deic-place_native_le := av_-_deic-place_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_deic-place_le">
  <description>Adverb, deictic, place
  <ex>aquí, allí, ahí, acá, allá, acullá, aquende, allende
  <todo>
  """.


av_-_deic-place_le := av_-_deic-place_lex
  """
  
  """.


av_-_deic-tmp_native_le := av_-_deic-tmp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_deic-tmp_le">
  <description>Adverb, deictic, temp
  <ex>ahora, entonces, hoy, ayer, anteayer, mañana, anoche, anteanoche, anteayer, anteanteayer, ...
  <todo>
  """.


av_-_deic-tmp_le := av_-_deic-tmp_lex
  """
  
  """.


av_-_deic-mann_native_le := av_-_deic-mann_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_deic-mann_le">
  <description>Adverb, deictic, mann
  <ex>así
  <todo>
  """.


av_-_deic-mann_le := av_-_deic-mann_lex
  """
  
  """.


av_-_rel-place_native_le := av_-_rel-place_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_rel-place_le">
  <description>Adverb, rel., place ("donde", "adonde")
  <ex>la casa donde vivía
  <todo>
  """.


av_-_rel-place_le := av_-_rel-place_lex
  """
  
  """.


av_-_rel-tmp_native_le := av_-_rel-tmp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_rel-tmp_le">
  <description>Adverb, rel., temp ("cuando")
  <ex>recuerdo el día cuando dimitió
  <todo>
  """.


av_-_rel-tmp_le := av_-_rel-tmp_lex
  """
  
  """.


av_-_rel-mann_native_le := av_-_rel-mann_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_rel-mann_le">
  <description>Adverb, rel., mann ("como")
  <ex>lo hice distretamente/con precaución, como me había recomendado
  <todo>
  """.


av_-_rel-mann_le := av_-_rel-mann_lex
  """
  
  """.


av_-_frel-place_native_le := av_-_free-rel-place_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_frel-place_le">
  <description>Adverb, free rel., place ("donde")
  <ex>donde vive tu hermano es demasiado lejos para ir de vacaciones
  <todo>
  """.


av_-_frel-place_le := av_-_free-rel-place_lex
  """
  
  """.


av_-_frel-tmp_native_le := av_-_free-rel-tmp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_frel-tmp_le">
  <description>Adverb, free rel., temp. ("cuando")
  <ex>la ví cuando salía del metro
  <todo>
  """.


av_-_frel-tmp_le := av_-_free-rel-tmp_lex
  """
  
  """.


av_-_frel-mann_native_le := av_-_free-rel-mann_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_frel-mann_le">
  <description>Adverb, free rel., mann ("como")
  <ex>los niños dejaron la sala como ya os podéis imaginar
  <todo>
  """.


av_-_frel-mann_le := av_-_free-rel-mann_lex
  """
  
  """.


av_-_wh-place_native_le := av_-_wh-place_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_wh-place_le">
  <description>Adverb, int., place ("dónde", "adónde")
  <ex>
  <todo>
  """.


av_-_wh-place_le := av_-_wh-place_lex
  """
  
  """.


av_-_wh-tmp_native_le := av_-_wh-tmp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_wh-tmp_le">
  <description>Adverb, int., temp ("cuándo")
  <ex>
  <todo>
  """.


av_-_wh-tmp_le := av_-_wh-tmp_lex
  """
  
  """.


av_-_wh-mann_native_le := av_-_wh-mann_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_wh-mann_le">
  <description>Adverb, int., mann ("cómo")
  <ex>
  <todo>
  """.


av_-_wh-mann_le := av_-_wh-mann_lex
  """
  
  """.


av_-_wh-caus_native_le := av_-_wh-caus_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="av_-_wh-mann_le">
  <description>Adverb, int., cause ("por qué")
  <ex>
  <todo>
  """.


av_-_wh-caus_le := av_-_wh-caus_lex
  """
  
  """.


aj_-_s-nprd_native_le := aj_-_s-nprd_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_s-nprd_le">
  <description>(Adv. aspec.) Adjective, scopal, no comp, non-spr, non-prd
  <ex>periódicas revisiones
  <todo>
  """.


aj_-_s-nprd_le := aj_-_s-nprd_lex
  """
  
  """.


aj_-_s-nprd-prh_native_le := aj_-_s-nprd-prh_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_s-nprd-prh_le">
  <description>(Adv. int.) Adjective, scopal, no comp, non-spr, non-prd, pre-noun
  <ex>el presunto asesino
  <todo>
  """.


aj_-_s-nprd-prh_le := aj_-_s-nprd-prh_lex
  """
  
  """.


aj_-_i-nspd_native_le := aj_-_i-nspd_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_i-nspd_le">
  <description>(Rel.) Adjective, inters, no comp, non-spr, ser
  <ex>la revista muy* mensual
  <todo>
  """.


aj_-_i-nspd_le := aj_-_i-nspd_lex
  """
  
  """.


aj_-_i-nprd_native_le := aj_-_i-nprd_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_i-nprd_le">
  <description>(Rel.) Adjective, inters, no comp, non-prd
  <ex>una actuación muy policial
  <todo>
  """.


aj_-_i-nprd_le := aj_-_i-nprd_lex
  """
  
  """.


aj_-_i-nprd-cualquiera_native_le := aj_-_i-nprd-cualquiera_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_i-nprd-cualquiera_le">
  <description>(Rel.) Adjective, inters, no comp, non-prd (only for "cualquiera")
  <ex>un hombre cualquiera
  <todo>
  """.


aj_-_i-nprd-cualquiera_le := aj_-_i-nprd-cualquiera_lex
  """
  
  """.


aj_pp_i-nprd_native_le := aj_pp_i-nprd_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_pp_i-nprd_le">
  <description>(Rel.) Adjective, inters, PPsel, non-prd
  <ex>consistente en tres pasos
  <todo>
  """.


aj_pp_i-nprd_le := aj_pp_i-nprd_lex
  """
  
  """.


aj_cp_p-i-nprd_native_le := aj_cp_p-i-nprd_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_cp_p-i-nprd_le">
  <description>(Rel.) Adjective, inters, PPsel (Sent), non-prd
  <ex>consistente en estar alerta/que estén alerta
  <todo>
  """.


aj_cp_p-i-nprd_le := aj_cp_p-i-nprd_lex
  """
  
  """.


aj_cp_q-i-nprd_native_le := aj_cp_q-i-nprd_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_cp_q-i-nprd_le">
  <description>(Rel.) Adjective, inters, PPsel (Ques), non-prd
  <ex>consistente en cómo se ha ejercido...
  <todo>
  """.


aj_cp_q-i-nprd_le := aj_cp_q-i-nprd_lex
  """
  
  """.


aj_-_s_native_le := aj_-_s_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_s_le">
  <description>(Qual.) Adjective, scopal, no comp, ser/estar
  <ex>ésto es/está alto
  <todo>
  """.


aj_-_s_le := aj_-_s_lex
  """
  
  """.


aj_-_i_native_le := aj_-_i_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_i_le">
  <description>(Qual.) Adjective, inters, no comp, ser/estar
  <ex>el cielo es/está azul
  <todo>
  """.


aj_-_i_le := aj_-_i_lex
  """
  
  """.


aj_-_i-psth_native_le := aj_-_i-psth_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_i-psth_le">
  <description>(Qual.) Adjective, inters, no comp, ser/estar, post-noun
  <ex>
  <todo>
  """.


aj_-_i-psth_le := aj_-_i-psth_lex
  """
  
  """.


aj_-_i-e_native_le := aj_-_i-e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_i-e_le">
  <description>(Qual.) Adjective, inters, no comp, estar
  <ex>está seco
  <todo>
  """.


aj_-_i-e_le := aj_-_i-e_lex
  """
  
  """.


aj_pp_i_native_le := aj_pp_i_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_pp_i_le">
  <description>(Qual.) Adjective, inters, PPsel, ser/estar
  <ex>es/está muy atento con sus compañeros
  <todo>
  """.


aj_pp_i_le := aj_pp_i_lex
  """
  
  """.


aj_pp*_i_native_le := aj_pp*_i_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_pp*_i_le">
  <description>(Qual.) Adjective, inters, PPsel (opt), ser/estar
  <ex>es/está muy vulnerable (a todo)
  <todo>
  """.


aj_pp*_i_le := aj_pp*_i_lex
  """
  
  """.


aj_pp_i-e_native_le := aj_pp_i-e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_pp_i-e_le">
  <description>(Qual.) Adjective, inters, PPsel, estar
  <ex>está atento a las notícias
  <todo>
  """.


aj_pp_i-e_le := aj_pp_i-e_lex
  """
  
  """.


aj_pp*_i-e_native_le := aj_pp*_i-e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_pp*_i-e_le">
  <description>(Qual.) Adjective, inters, PPsel (opt), estar
  <ex>estoy harto (de tí)
  <todo>
  """.


aj_pp*_i-e_le := aj_pp*_i-e_lex
  """
  
  """.


aj_cp_p-i-s_native_le := aj_cp_p-i-s_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_cp_p-i-s_le">
  <description>(Qual.) Adjective, inters, PPsel (Sent/VPinf), ser
  <ex>es partidaria (de) que legalizen la droga/de legalizar la droga
  <todo>
  """.


aj_cp_p-i-s_le := aj_cp_p-i-s_lex
  """
  
  """.


aj_cp_p-i-e_native_le := aj_cp_p-i-e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_cp_p-i-e_le">
  <description>(Qual.) Adjective, inters, PPsel (Sent/VPinf), estar
  <ex>estoy segura (de) que vendrá/de cambiarlo
  <todo>
  """.


aj_cp_p-i-e_le := aj_cp_p-i-e_lex
  """
  
  """.


aj_q_i-s_native_le := aj_q_i-s_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_q_i-s_le">
  <description>(Qual.) Adjective, inters, PPsel (Ques), ser
  <ex>es muy revelador de cómo actuan
  <todo>
  """.


aj_q_i-s_le := aj_q_i-s_lex
  """
  
  """.


aj_q_i-e_native_le := aj_q_i-e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_q_i-e_le">
  <description>(Qual.) Adjective, inters, PPsel (Ques), estar
  <ex>no estoy muy seguro de cuándo/de si vendrá
  <todo>
  """.


aj_q_i-e_le := aj_q_i-e_lex
  """
  
  """.


aj_vp_sr-i-s_native_le := aj_vp_sr-i-s_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_vp_sr-i-s_le">
  <description>(Qual.) Adjective, inters, PPsel (VPinf, sbj-raising), ser
  <ex>soy muy libre de pensarlo
  <todo>
  """.


aj_vp_sr-i-s_le := aj_vp_sr-i-s_lex
  """
  
  """.


aj_vp_sc-i-s_native_le := aj_vp_sc-i-s_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_vp_sc-i-s_le">
  <description>(Qual.) Adjective, inters, PPsel (VPinf, sbj-ctrl), ser
  <ex>es aficionado a jugar a tenis
  <todo>
  """.


aj_vp_sc-i-s_le := aj_vp_sc-i-s_lex
  """
  
  """.


aj_vp_sc-i-e_native_le := aj_vp_sc-i-e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_vp_sc-i-e_le">
  <description>(Qual.) Adjective, inters, PPsel (VPinf, sbj-ctrl), estar
  <ex>no estoy seguro de poder hacerlo
  <todo>
  """.


aj_vp_sc-i-e_le := aj_vp_sc-i-e_lex
  """
  
  """.


aj_vp_or-i-s_native_le := aj_vp_or-i-s_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_vp_or-i-s_le">
  <description>(Qual.) Adjective, inters, PPsel (VPinf, obj-raising), ser
  <ex>el violín es muy difícil de tocar
  <todo>
  """.


aj_vp_or-i-s_le := aj_vp_or-i-s_lex
  """
  
  """.


aj_vp_oc-i-s_le := aj_vp_oc-i-s_lex
  """
  <type val="aj_vp_oc-i-s_le">
  <description>(Qual.) Adjective, inters, PPsel (VPinf, obj-ctrl), estar
  <ex>está pendiente de firmar
  <todo>
  """.


aj_pp_i-cmp_native_le := aj_pp_i-cmp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_pp_i-cmp_le">
  <description>Adjective, Comparative,
  <ex>A es mejor que B
  <todo>
  """.


aj_pp_i-cmp_le := aj_pp_i-cmp_lex
  """
  
  """.


aj_pp_i-cmp-altp_native_le := aj_pp_i-cmp-altp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_pp_i-cmp-altp_le">
  <description>Adjective, Comparative
  <ex>A es anterior a/que B.
  <todo>
  """.


aj_pp_i-cmp-altp_le := aj_pp_i-cmp-altp_lex
  """
  
  """.


aj_pp_i-cmp-mas_native_le := aj_pp_i-cmp-mas_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_pp_i-cmp-mas_le">
  <description>
  <ex>más de tres niños
  <todo>
  """.


aj_pp_i-cmp-mas_le := aj_pp_i-cmp-mas_lex
  """
  
  """.


aj_pp_i-cmp-menos_native_le := aj_pp_i-cmp-menos_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_pp_i-cmp-menos_le">
  <description>
  <ex>menos de tres niños
  <todo>
  """.


aj_pp_i-cmp-menos_le := aj_pp_i-cmp-menos_lex
  """
  
  """.


aj_pp_i-sup_native_le := aj_pp_i-sup_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_pp_i-sup_le">
  <description>Adjective, Superlative
  <ex>A es el mejor.
  <todo>
  """.


aj_pp_i-sup_le := aj_pp_i-sup_lex
  """
  
  """.


aj_-_i-poss_native_le := aj_-_i-poss_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_i-poss_le">
  <description>Adjective, possessives
  <ex>la canción tuya me gustó
  <todo>
  """.


aj_-_i-poss_le := aj_-_i-poss_lex
  """
  
  """.


aj_-_i-nu-ord_native_le := aj_-_i-nu-ord_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_i-nu-ord_le">
  <description>Adjective, ordinal num
  <ex>los primeros pasos
  <todo>
  """.


aj_-_i-nu-ord_le := aj_-_i-nu-ord_lex
  """
  
  """.


aj_-_i-nu-ord-ms_native_le := aj_-_i-nu-ord-ms_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_i-nu-ord-ms_le">
  <description>Adjective, ordinal num, masc sing
  <ex>el primer paso
  <todo>
  """.


aj_-_i-nu-ord-ms_le := aj_-_i-nu-ord-ms_lex
  """
  
  """.


aj_-_i-nu-part_native_le := aj_-_i-nu-part_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_i-nu-part_le">
  <description>Adjective, partitive num
  <ex>
  <todo>
  """.


aj_-_i-nu-part_le := aj_-_i-nu-part_lex
  """
  
  """.


aj_-_i-nu-mult_native_le := aj_-_i-nu-mult_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="aj_-_i-nu_mult_le">
  <description>Adjective, multiplicative num
  <ex>tiene (una) doble personalidad
  <todo>
  """.


aj_-_i-nu-mult_le := aj_-_i-nu-mult_lex
  """
  
  """.


p_np_ptcl_native_le := p_np_ptcl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_ptcl_le">
  <description>Preposition, NP, sem empty
  <ex>cumple con su deber
  <todo>
  """.


p_np_ptcl_le := p_np_ptcl_lex
  """
  
  """.


p_nb_ptcl_native_le := p_nb_ptcl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_nb_ptcl_le">
  <description>Preposition, Nbar, sem empty
  <ex>
  <todo>
  """.


p_nb_ptcl_le := p_nb_ptcl_lex
  """
  
  """.


p_np_ptcl-spd_le := p_np_ptcl-spd_lex
  """
  <type val="p_np_ptcl-spd_le">
  <description>Preposition, NP, sem empty, spr (de)
  <ex>más de tres niños
  <todo>
  """.


p_cp_ptcl_native_le := p_cp_ptcl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_cp_ptcl_le">
  <description>Preposition, Sfin, sem empty
  <ex>esperó a que llegase
  <todo>
  """.


p_cp_ptcl_le := p_cp_ptcl_lex
  """
  
  """.


p_vp_ptcl_native_le := p_vp_ptcl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_vp_ptcl_le">
  <description>Preposition, VPinf, sem empty
  <ex>confío en ganar
  <todo>
  """.


p_vp_ptcl_le := p_vp_ptcl_lex
  """
  
  """.


p_nb_i-nm_native_le := p_nb_i-nm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_nb_i-nm_le">
  <description>Prep, Nbar, N mod
  <ex>
  <todo>
  """.


p_nb_i-nm_le := p_nb_i-nm_lex
  """
  
  """.


p_np_i-nm_native_le := p_np_i-nm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-nm_le">
  <description>Preposition, NP, N mod
  <ex>
  <todo>
  """.


p_np_i-nm_le := p_np_i-nm_lex
  """
  
  """.


p_np_i-pn-nm_native_le := p_np_i-pn-nm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-pn-nm_le">
  <description>Preposition, NE, N mod
  <ex>
  <todo>
  """.


p_np_i-pn-nm_le := p_np_i-pn-nm_lex
  """
  
  """.


p_np_i-tmp-nm_native_le := p_np_i-tmp-nm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-tmp-nm_le">
  <description>Preposition, temp NP, N mod
  <ex>el concierto del otro día
  <todo>
  """.


p_np_i-tmp-nm_le := p_np_i-tmp-nm_lex
  """
  
  """.


p_vp_i-ctrl-nm_native_le := p_vp_i-ctrl-nm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_vp_i-ctrl-nm_le">
  <description>Preposition, VPinf ctrl, N mod
  <ex>pan por cocer
  <todo>
  """.


p_vp_i-ctrl-nm_le := p_vp_i-ctrl-nm_lex
  """
  
  """.


p_vp_i-nm_native_le := p_vp_i-nm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_vp_i-nm_le">
  <description>Preposition, VPinf, N mod
  <ex>pan por cocer
  <todo>
  """.


p_vp_i-nm_le := p_vp_i-nm_lex
  """
  
  """.


p_pp_i-nm_native_le := p_pp_i-nm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_pp_i-nm_le">
  <description>Preposition, PP, N mod
  <ex>el libro de sobre la mesa
  <todo>
  """.


p_pp_i-nm_le := p_pp_i-nm_lex
  """
  
  """.


p_adv_i-nm_native_le := p_adv_i-nm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_adv_i-nm_le">
  <description>Preposition, ADV, N mod
  <ex>las ganas de siempre
  <todo>
  """.


p_adv_i-nm_le := p_adv_i-nm_lex
  """
  
  """.


pp_-_i-nm_native_le := pp_-_i-nm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pp_-_i-nm_le">
  <description>PP, N mod
  <ex>un nombre así
  <todo>
  """.


pp_-_i-nm_le := pp_-_i-nm_lex
  """
  
  """.


pp_-_i-nm-tmp_native_le := pp_-_i-nm-tmp_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pp_-_i-nm-tmp_le">
  <description>PP, Ntemp mod
  <ex>nueve horas después
  <todo>
  """.


pp_-_i-nm-tmp_le := pp_-_i-nm-tmp_lex
  """
  
  """.


p_ap_i-nm_native_le := p_ap_i-nm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_ap_i-nm_le">
  <description>Preposition, AP, V mod
  <ex>
  <todo>
  """.


p_ap_i-nm_le := p_ap_i-nm_lex
  """
  
  """.


p_nb_i-vm_native_le := p_nb_i-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_nb_i-vm_le">
  <description>Preposition, Nbar, V mod
  <ex>
  <todo>
  """.


p_nb_i-vm_le := p_nb_i-vm_lex
  """
  
  """.


p_np_i-vm_native_le := p_np_i-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-vm_le">
  <description>Preposition, NP, V mod
  <ex>
  <todo>
  """.


p_np_i-vm_le := p_np_i-vm_lex
  """
  
  """.


p_np_i-pn-vm_native_le := p_np_i-pn-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-pn-vm_le">
  <description>Preposition, NE, V mod
  <ex>
  <todo>
  """.


p_np_i-pn-vm_le := p_np_i-pn-vm_lex
  """
  
  """.


p_np_i-tmp-vm_native_le := p_np_i-tmp-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-tmp-vm_le">
  <description>Preposition, temp NP, V mod
  <ex>te espero a las cinco
  <todo>
  """.


p_np_i-tmp-vm_le := p_np_i-tmp-vm_lex
  """
  
  """.


p_np_i-tmp-durante-vm_native_le := p_np_i-tmp-durante-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-tmp-durante-vm_le">
  <description>Preposition, temp NP, V mod (only for "durante")
  <ex>
  <todo>
  """.


p_np_i-tmp-durante-vm_le := p_np_i-tmp-durante-vm_lex
  """
  
  """.


p_np-pp_i-vm_native_le := p_np-pp_i-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np-pp_i-vm_le">
  <description>Preposition, NP and PP, V mod
  <ex>Juan vive a 3km de Madrid
  <todo>
  """.


p_np-pp_i-vm_le := p_np-pp_i-vm_lex
  """
  
  """.


p_ap_i-vm_native_le := p_ap_i-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_ap_i-vm_le">
  <description>Preposition, AP, V mod
  <ex>lloró por tonto
  <todo>
  """.


p_ap_i-vm_le := p_ap_i-vm_lex
  """
  
  """.


p_adv_i-vm_native_le := p_adv_i-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_adv_i-vm_le">
  <description>Preposition, ADV, V mod
  <ex>mira hacia atrás
  <todo>
  """.


p_adv_i-vm_le := p_adv_i-vm_lex
  """
  
  """.


p_pp_i-vm_native_le := p_pp_i-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_pp_i-vm_le">
  <description>Preposition, PP, V mod
  <ex>se lanzó desde sobre el tejado
  <todo>
  """.


p_pp_i-vm_le := p_pp_i-vm_lex
  """
  
  """.


p_pp_i-e-vm_native_le := p_pp_i-e-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_pp_i-e-vm_le">
  <description>Preposition, PP (empty sem), V mod
  <ex>vengo a por agua
  <todo>
  """.


p_pp_i-e-vm_le := p_pp_i-e-vm_lex
  """
  
  """.


p_cl_vm_native_le := p_cl_vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_cl_vm_le">
  <description>Preposition, Sent, V mod
  <ex>aunque se disculpe, no volveré
  <todo>
  """.


p_cl_vm_le := p_cl_vm_lex
  """
  
  """.


p_cp_vm_native_le := p_cp_vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_cp_vm_le">
  <description>Preposition, Sent subord (complementizer), V mod
  <ex>con que vengan, no arreglas nada
  <todo>
  """.


p_cp_vm_le := p_cp_vm_lex
  """
  
  """.


p_vp_vm_native_le := p_vp_vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_vp_vm_le">
  <description>Preposition, VPinf, V mod
  <ex>al terminar la función, nos despedimos
  <todo>
  """.


p_vp_vm_le := p_vp_vm_lex
  """
  
  """.


p_vp_ctrl-vm_native_le := p_vp_ctrl-vm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_vp_ctrl-vm_le">
  <description>Preposition, VPinf (control), V mod
  <ex>disparaban a matar
  <todo>
  """.


p_vp_ctrl-vm_le := p_vp_ctrl-vm_lex
  """
  
  """.


p_np_i-am_native_le := p_np_i-am_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-am_le">
  <description>Preposition, NP, A mod
  <ex>irritante al máximo
  <todo>
  """.


p_np_i-am_le := p_np_i-am_lex
  """
  
  """.


p_np_i-tmp-am_native_le := p_np_i-tmp-am_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-tmp-am_le">
  <description>Preposition, NP, A mod
  <ex>irritante al máximo
  <todo>
  """.


p_np_i-tmp-am_le := p_np_i-tmp-am_lex
  """
  
  """.


p_nb_i-am_native_le := p_nb_i-am_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_nb_i-am_le">
  <description>Preposition, Nbar, A mod
  <ex>
  <todo>
  """.


p_nb_i-am_le := p_nb_i-am_lex
  """
  
  """.


p_np_i-pn-am_native_le := p_np_i-pn-am_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-np-am_le">
  <description>Preposition, Nbar, A mod
  <ex>
  <todo>
  """.


p_np_i-pn-am_le := p_np_i-pn-am_lex
  """
  
  """.


p_vp_i-ctrl-am_native_le := p_vp_i-ctrl-am_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_vp_i-ctrl-am_le">
  <description>Preposition, VPinf (ctrl), A mod
  <ex>llenas a reventar
  <todo>
  """.


p_vp_i-ctrl-am_le := p_vp_i-ctrl-am_lex
  """
  
  """.


p_np_i-num_native_le := p_np_i-num_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-num_le">
  <description>Preposition, NP, A mod
  <ex>irritante al máximo
  <todo>
  """.


p_np_i-num_le := p_np_i-num_lex
  """
  
  """.


p_np_i-pm_native_le := p_np_i-pm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-pm_le">
  <description>Preposition, NP, P mod
  <ex>a 20 metros sobre el nivel del mar
  <todo>
  """.


p_np_i-pm_le := p_np_i-pm_lex
  """
  
  """.


p_np_i-orig-pm_native_le := p_np_i-orig-pm_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="p_np_i-orig-pm_le">
  <description>Preposition (orig), NP, P mod
  <ex>corrió de un extremo al otro
  <todo>
  """.


p_np_i-orig-pm_le := p_np_i-orig-pm_lex
  """
  
  """.


d_-_art-d_native_le := d_-_art-d_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_art-d_le">
  <description>Determiner, def article
  <ex>los muchachos
  <todo>
  """.


d_-_art-d_le := d_-_art-d_lex
  """
  
  """.


d_-_art-i_native_le := d_-_art-i_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_art-i_le">
  <description>Determiner, indef article
  <ex>un muchacho
  <todo>
  """.


d_-_art-i_le := d_-_art-i_lex
  """
  
  """.


d_-_poss-mi_native_le := d_-_poss-mi_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_poss-mi_le">
  <description>Determiner, poss, ("mi")
  <ex>mis amigos.
  <todo>
  """.


d_-_poss-mi_le := d_-_poss-mi_lex
  """
  
  """.


d_-_poss-tu_native_le := d_-_poss-tu_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_poss-tu_le">
  <description>Determiner, poss, ("tu")
  <ex>tus amigos.
  <todo>
  """.


d_-_poss-tu_le := d_-_poss-tu_lex
  """
  
  """.


d_-_poss-su_native_le := d_-_poss-su_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_poss-su_le">
  <description>Determiner, poss, ("su")
  <ex>sus amigos.
  <todo>
  """.


d_-_poss-su_le := d_-_poss-su_lex
  """
  
  """.


d_-_poss-nuestro_native_le := d_-_poss-nuestro_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_poss-nuestro_le">
  <description>Determiner, poss, ("nuestro")
  <ex>nuestros amigos.
  <todo>
  """.


d_-_poss-nuestro_le := d_-_poss-nuestro_lex
  """
  
  """.


d_-_poss-vuestro_native_le := d_-_poss-vuestro_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_poss-vuestro_le">
  <description>Determiner, poss, ("vuestro")
  <ex>vuestros amigos
  <todo>
  """.


d_-_poss-vuestro_le := d_-_poss-vuestro_lex
  """
  
  """.


d_-_dem-este_native_le := d_-_dem-este_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_dem-este_le">
  <description>Determiner, demons, ("este")
  <ex>este libro
  <todo>
  """.


d_-_dem-este_le := d_-_dem-este_lex
  """
  
  """.


d_-_dem-ese_native_le := d_-_dem-ese_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_dem-ese_le">
  <description>Determiner, demons, ("este")
  <ex>ese libro
  <todo>
  """.


d_-_dem-ese_le := d_-_dem-ese_lex
  """
  
  """.


d_-_dem-aquel_native_le := d_-_dem-aquel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_dem-aquel_le">
  <description>Determiner, demons, ("aquel")
  <ex>aquel libro.
  <todo>
  """.


d_-_dem-aquel_le := d_-_dem-aquel_lex
  """
  
  """.


d_-_tal_native_le := d_-_tal_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_tal_le">
  <description>Determiner ("tal")
  <ex>tal ocasión
  <todo>
  """.


d_-_tal_le := d_-_tal_lex
  """
  
  """.


d_-_semejante_native_le := d_-_semejante_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_semejante_le">
  <description>Determiner ("semejante")
  <ex>semenjante persona
  <todo>
  """.


d_-_semejante_le := d_-_semejante_lex
  """
  
  """.


d_-_q-cualquier_native_le := d_-_q-cualquier_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-cualquier_le">
  <description>Determiner, quant., ("cualquier")
  <ex>cualquier muchacho
  <todo>
  """.


d_-_q-cualquier_le := d_-_q-cualquier_lex
  """
  
  """.


d_-_q-ambos_native_le := d_-_q-ambos_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-ambos_le">
  <description>Determiner, quant., ("ambos")
  <ex>ambos muchachos.
  <todo>
  """.


d_-_q-ambos_le := d_-_q-ambos_lex
  """
  
  """.


d_-_q-sendos_native_le := d_-_q-sendos_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-sendos_le">
  <description>Determiner, quant., ("sendos")
  <ex>sendos muchachos.
  <todo>
  """.


d_-_q-sendos_le := d_-_q-sendos_lex
  """
  
  """.


d_-_q-cada_native_le := d_-_q-cada_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-cada_le">
  <description>Determiner, quant., ("cada")
  <ex>cada muchacho.
  <todo>
  """.


d_-_q-cada_le := d_-_q-cada_lex
  """
  
  """.


d_-_q-todo_native_le := d_-_q-todo_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-todo_le">
  <description>Determiner, quant., ("todo")
  <ex>todos los muchachos.
  <todo>
  """.


d_-_q-todo_le := d_-_q-todo_lex
  """
  
  """.


d_-_q-prn-todo_native_le := d_-_q-prn-todo_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-prn-todo_le">
  <description>Determiner, quant., ("todo")
  <ex>todos esto
  <todo>
  """.


d_-_q-prn-todo_le := d_-_q-prn-todo_lex
  """
  
  """.


d_-_q-algun_native_le := d_-_q-algun_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-algun_le">
  <description>Determiner, quant., ("algún")
  <ex>algún muchacho.
  <todo>
  """.


d_-_q-algun_le := d_-_q-algun_lex
  """
  
  """.


d_-_q-ningun_native_le := d_-_q-ningun_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-ningun_le">
  <description>Determiner, quant., ("ningún")
  <ex>ningún muchacho.
  <todo>
  """.


d_-_q-ningun_le := d_-_q-ningun_lex
  """
  
  """.


d_-_q-cuantos_native_le := d_-_q-cuantos_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-cuantos_le">
  <description>Determiner, quant., "((unos) cuantos")
  <ex>unos cuantos muchachos.
  <todo>
  """.


d_-_q-cuantos_le := d_-_q-cuantos_lex
  """
  
  """.


d_-_q-todo-sg_native_le := d_-_q-todo-sg_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-todo-sg_le">
  <description>Determiner, quant., ("todo", sing)
  <ex>toda persona ajena a la empresa
  <todo>
  """.


d_-_q-todo-sg_le := d_-_q-todo-sg_lex
  """
  
  """.


d_-_q-otro_native_le := d_-_q-otro_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-otro_le">
  <description>Determiner, quant., ("otro")
  <ex>el otro muchacho.
  <todo>
  """.


d_-_q-otro_le := d_-_q-otro_lex
  """
  
  """.


d_-_q-mucho_native_le := d_-_q-mucho_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-mucho_le">
  <description>Determiner, quant., ("mucho")
  <ex>muchos otros muchachos.
  <todo>
  """.


d_-_q-mucho_le := d_-_q-mucho_lex
  """
  
  """.


d_-_q-poco_native_le := d_-_q-poco_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-poco_le">
  <description>Determiner, quant., ("poco")
  <ex>pocos muchachos.
  <todo>
  """.


d_-_q-poco_le := d_-_q-poco_lex
  """
  
  """.


d_-_q-bastante_native_le := d_-_q-bastante_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-bastante_le">
  <description>Determiner, quant., ("bastante")
  <ex>bastantes muchachos.
  <todo>
  """.


d_-_q-bastante_le := d_-_q-bastante_lex
  """
  
  """.


d_-_q-demasiado_native_le := d_-_q-demasiado_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-demasiado_le">
  <description>Determiner, quant., ("demasiado")
  <ex>he comido demasiada sopa.
  <todo>
  """.


d_-_q-demasiado_le := d_-_q-demasiado_lex
  """
  
  """.


d_-_q-varios_native_le := d_-_q-varios_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-varios_le">
  <description>Determiner, quant., ("varios")
  <ex>varios muchachos.
  <todo>
  """.


d_-_q-varios_le := d_-_q-varios_lex
  """
  
  """.


d_-_q-multiples_native_le := d_-_q-multiples_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-multiples_le">
  <description>Determiner, quant., ("múltiples")
  <ex>varios muchachos.
  <todo>
  """.


d_-_q-multiples_le := d_-_q-multiples_lex
  """
  
  """.


d_-_q-demas_native_le := d_-_q-demas_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-demas_le">
  <description>Determiner, quant., ("demás")
  <ex>vinieron mi padre, mi madre y demás familia.
  <todo>
  """.


d_-_q-demas_le := d_-_q-demas_lex
  """
  
  """.


d_pp_cmp-mas_native_le := d_pp_cmp-mas_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_pp_cmp-mas_le">
  <description>Determiner, compar, ("más")
  <ex>más niños que niñas
  <todo>
  """.


d_pp_cmp-mas_le := d_pp_cmp-mas_lex
  """
  
  """.


d_pp_cmp-menos_native_le := d_pp_cmp-menos_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_pp_cmp-menos_le">
  <description>Determiner, compar, ("menos")
  <ex>menos niños que niñas
  <todo>
  """.


d_pp_cmp-menos_le := d_pp_cmp-menos_lex
  """
  
  """.


d_pp_cmp-tanto_native_le := d_pp_cmp-tanto_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_pp_cmp-tanto_le">
  <description>Determiner, compar ("tanto")
  <ex>tantos niños como niñas
  <todo>
  """.


d_pp_cmp-tanto_le := d_pp_cmp-tanto_lex
  """
  
  """.


d_-_rel-poss_native_le := d_-_rel-poss_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_pp_cmp-mas-de_le">
  <description>Determiner, compar ("más de")
  <ex>más de tres niños
  <todo>
  d_pp_cmp-mas-de_le := d_pp_cmp-mas-de_lex.
  <type val="d_pp_cmp-menos-de_le">
  <description>Determiner, compar ("menos de")
  <ex>menos de tres niños
  <todo>
  d_pp_cmp-menos-de_le := d_pp_cmp-menos-de_lex.
  <type val="d_-_rel-poss_le">
  <description>Determiner, rel ("cuyo")
  <ex>
  <todo>
  """.


d_-_rel-poss_le := d_-_rel-poss_lex
  """
  
  """.


d_-_wh-que_native_le := d_-_wh-que_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_wh-que_le">
  <description>Determiner, int ("qué")
  <ex>
  <todo>
  """.


d_-_wh-que_le := d_-_wh-que_lex
  """
  
  """.


d_-_wh-cual_le := d_-_wh-cual_lex
  """
  <type val="d_-_wh-cual_le">
  <description>Determiner, int ("cuál")
  <ex>
  <todo>
  """.


d_-_wh-cuanto_native_le := d_-_wh-cuanto_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_wh-cuanto_le">
  <description>Determiner, int ("cuánto")
  <ex>
  <todo>
  """.


d_-_wh-cuanto_le := d_-_wh-cuanto_lex
  """
  
  """.


d_-_q-nu-card_native_le := d_-_q-nu-card_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-nu-card_le">
  <description>Determiner, card num
  <ex>los tres hermanos
  <todo>
  """.


d_-_q-nu-card_le := d_-_q-nu-card_lex
  """
  
  """.


d_-_q-nu-distr_native_le := d_-_q-nu-distr_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="d_-_q-nu-distr_le">
  <description>Determiner, distr num
  <ex>íbamos al cine tres de cada dos domingos
  <todo>
  """.


d_-_q-nu-distr_le := d_-_q-nu-distr_lex
  """
  
  """.


cm_s_native_le := cm_s_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="cm_s_le">
  <description>Complementizer, Sent/Ques ("que")
  <ex>no me gusta que a los toros te pongas la minifalda.
  <ex>gritó que dónde habíamos puesto el dinero.
  <todo>
  """.


cm_s_le := cm_s_lex
  """
  
  """.


cm_s_q_native_le := cm_s_q_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="cm_s_q_le">
  <description>Complementizer, Ques ("si")
  <ex>no sé si vendrá.
  <todo>
  """.


cm_s_q_le := cm_s_q_lex
  """
  
  """.


cm_vp_q_native_le := cm_vp_q_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="cm_vp_q_le">
  <description>Complementizer, Ques inf ("si")
  <ex>no sé si ir.
  <todo>
  """.


cm_vp_q_le := cm_vp_q_lex
  """
  
  """.


c_xp_comma_native_le := c_xp_comma_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_comma_le">
  <description>Conjunction, Coord., (comma)
  <ex>Pablo llora, Oscar ríe.
  <todo>
  """.


c_xp_comma_le := c_xp_comma_lex
  """
  
  """.


c_xp_fstop_native_le := c_xp_fstop_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_fstop_le">
  <description>Conjunction, Coord., (full-stop)
  <ex>Pablo llora. Oscar ríe.
  <todo>
  """.


c_xp_fstop_le := c_xp_fstop_lex
  """
  
  """.


c_xp_semi-cln_native_le := c_xp_semi-cln_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_semi-cln_le">
  <description>Conjunction, Coord., (semi-colon)
  <ex>Pablo llora; Oscar ríe.
  <todo>
  """.


c_xp_semi-cln_le := c_xp_semi-cln_lex
  """
  
  """.


c_xp_y_native_le := c_xp_y_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_y_le">
  <description>Conjunction, Coord., ("y")
  <ex>Oscar y Pablo lloran lloran.
  <todo>
  """.


c_xp_y_le := c_xp_y_lex
  """
  
  """.


c_xp_e_native_le := c_xp_e_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_e_le">
  <description>Conjunction, Coord., ("e")
  <ex>Ana e Inés lloran.
  <todo>
  """.


c_xp_e_le := c_xp_e_lex
  """
  
  """.


c_xp_o_native_le := c_xp_o_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_o_le">
  <description>Conjunction, Coord., ("o")
  <ex>vendrá Oscar o Pablo.
  <todo>
  """.


c_xp_o_le := c_xp_o_lex
  """
  
  """.


c_xp_u_native_le := c_xp_u_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_u_le">
  <description>Conjunction, Coord., ("u")
  <ex>vendrá Pablo u Oscar.
  <todo>
  """.


c_xp_u_le := c_xp_u_lex
  """
  
  """.


c_xp_o-nrel_native_le := c_xp_o-nrel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_o-nrel_le">
  <description>Conjunction, o, no-rel
  <ex>vendrá o Pablo o Sara.
  <todo>
  """.


c_xp_o-nrel_le := c_xp_o-nrel_lex
  """
  
  """.


c_xp_u-nrel_native_le := c_xp_u-nrel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_u-nrel_le">
  <description>Conjunction, Coord., ("u", no-rel)
  <ex>vendrá A u O.
  <todo>
  """.


c_xp_u-nrel_le := c_xp_u-nrel_lex
  """
  
  """.


c_xp_ni_native_le := c_xp_ni_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_ni_le">
  <description>Conjunction, Coord., ("ni")
  <ex>no traje el libro ni para Juan ni para Pedro.
  <todo>
  """.


c_xp_ni_le := c_xp_ni_lex
  """
  
  """.


c_xp_ni-nrel_native_le := c_xp_ni-nrel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_ni-nrel_le">
  <description>Conjunction, Coord., ("ni", no-rel)
  <ex>no traje el libro ni para Juan ni para Pedro.
  <todo>
  """.


c_xp_ni-nrel_le := c_xp_ni-nrel_lex
  """
  
  """.


c_xp_sea_native_le := c_xp_sea_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_sea_le">
  <description>Conjunction, Coord., ("sea")
  <ex>lo compraremos de todos modos, sea grande (o) sea pequeño
  <todo>
  """.


c_xp_sea_le := c_xp_sea_lex
  """
  
  """.


c_xp_sea-nrel_native_le := c_xp_sea-nrel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_sea-nrel_le">
  <description>Conjunction, Coord., ("sea", no-rel)
  <ex>lo compraremos de todos modos, sea grande sea pequeño
  <todo>
  """.


c_xp_sea-nrel_le := c_xp_sea-nrel_lex
  """
  
  """.


c_xp_o-sea-nrel_native_le := c_xp_o-sea-nrel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_o-sea-nrel_le">
  <description>Conjunction, Coord., ("o sea", no-rel)
  <ex>lo compraremos de todos modos, sea grande o sea pequeño
  <todo>
  """.


c_xp_o-sea-nrel_le := c_xp_o-sea-nrel_lex
  """
  
  """.


c_xp_bien_native_le := c_xp_bien_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_bien_le">
  <description>Conjunction, Coord., ("bien")
  <ex>el cartero recoge el correo bien en la tarde bien en la mañana
  <todo>
  """.


c_xp_bien_le := c_xp_bien_lex
  """
  
  """.


c_xp_bien-nrel_native_le := c_xp_bien-nrel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_bien-nrel_le">
  <description>Conjunction, bien, no-rel
  <ex>el cartero recoge el correo bien en la tarde bien en la mañana
  <todo>
  """.


c_xp_bien-nrel_le := c_xp_bien-nrel_lex
  """
  
  """.


c_xp_o-bien_native_le := c_xp_o-bien_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_o-bien_le">
  <description>Conjunction, Coord., ("o bien")
  <ex>el cartero recoge el correo o bien en la tarde o bien en la mañana.
  <todo>
  """.


c_xp_o-bien_le := c_xp_o-bien_lex
  """
  
  """.


c_xp_o-bien-nrel_native_le := c_xp_o-bien-nrel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_o-bien-nrel_le">
  <description>Conjunction, Coord., ("o bien", no-rel)
  <ex>el cartero recoge el correo bien en la tarde o bien en la mañana.
  <todo>
  """.


c_xp_o-bien-nrel_le := c_xp_o-bien-nrel_lex
  """
  
  """.


c_xp_o-bien-nrel-o-bien_native_le := c_xp_o-bien-nrel-o-bien_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_o-bien-nrel-o-bien_le">
  <description>Conjunction, Coord., ("o bien ... o bien", no-rel)
  <ex>el cartero recoge el correo o bien en la tarde o bien en la mañana.
  <todo>
  """.


c_xp_o-bien-nrel-o-bien_le := c_xp_o-bien-nrel-o-bien_lex
  """
  
  """.


c_xp_ora_native_le := c_xp_ora_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_ora_le">
  <description>Conjunction, Coord., ("ora")
  <ex>tomando ora la espada, ora la pluma
  <todo>
  """.


c_xp_ora_le := c_xp_ora_lex
  """
  
  """.


c_xp_ora-nrel_native_le := c_xp_ora-nrel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_ora-nrel_le">
  <description>Conjunction, Coord., ("ora", no-rel)
  <ex>tomando ora la espada, ora la pluma
  <todo>
  """.


c_xp_ora-nrel_le := c_xp_ora-nrel_lex
  """
  
  """.


c_xp_tanto_native_le := c_xp_tanto_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_tanto_le">
  <description>Conjunction, Coord., ("tanto")
  <ex>tanto el vino como la cerveza contienen alcohol
  <todo>
  """.


c_xp_tanto_le := c_xp_tanto_lex
  """
  
  """.


c_xp_como-nrel_native_le := c_xp_como-nrel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_como-nrel_le">
  <description>Conjunction, Coord., ("como")
  <ex>tanto el vino como la cerveza contienen alcohol
  <todo>
  """.


c_xp_como-nrel_le := c_xp_como-nrel_lex
  """
  
  """.


c_xp_no-sólo_native_le := c_xp_no-sólo_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_no-sólo_le">
  <description>Conjunction, Coord., ("no sólo")
  <ex>no sólo el vino, sino la cerveza contienen alcohol
  <todo>
  """.


c_xp_no-sólo_le := c_xp_no-sólo_lex
  """
  
  """.


c_xp_sino-nrel_native_le := c_xp_sino-nrel_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_sino-nrel_le">
  <description>Conjunction, Coord., ("sino", no-rel)
  <ex>no sólo el vino, sino la cerveza contienen alcohol
  <todo>
  """.


c_xp_sino-nrel_le := c_xp_sino-nrel_lex
  """
  
  """.


c_xp_así-como_native_le := c_xp_así-como_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_así-como_le">
  <description>Conjunction, Coord., ("así como")
  <ex>el vino, así como la cerveza, contienen alcohol
  <todo>
  """.


c_xp_así-como_le := c_xp_así-como_lex
  """
  
  """.


c_xp_aunque_native_le := c_xp_aunque_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_aunque_le">
  <description>Conjunction, advers., ("aunque")
  <ex>vino con mi hermano, aunque no con mi hermana
  <todo>
  """.


c_xp_aunque_le := c_xp_aunque_lex
  """
  
  """.


c_xp_siquiera_native_le := c_xp_siquiera_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_siquiera_le">
  <description>Conjunction, advers., ("siquiera")
  <ex>
  <todo>
  """.


c_xp_siquiera_le := c_xp_siquiera_lex
  """
  
  """.


c_xp_siquier_native_le := c_xp_siquier_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_siquier_le">
  <description>Conjunction, advers., ("siquier")
  <ex>
  <todo>
  """.


c_xp_siquier_le := c_xp_siquier_lex
  """
  
  """.


c_xp_mas_native_le := c_xp_mas_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_mas_le">
  <description>Conjunction, advers., ("mas")
  <ex>vino con mi hermano, mas no con mi hermana
  <todo>
  """.


c_xp_mas_le := c_xp_mas_lex
  """
  
  """.


c_xp_pero_native_le := c_xp_pero_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_pero_le">
  <description>Conjunction, advers., ("pero")
  <ex>el miércoles iremos a ver a Pepe, pero el jueves volveremos aquí
  <todo>
  """.


c_xp_pero_le := c_xp_pero_lex
  """
  
  """.


c_xp_empero_native_le := c_xp_empero_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_empero_le">
  <description>Conjunction, advers., ("empero")
  <ex>
  <todo>
  """.


c_xp_empero_le := c_xp_empero_lex
  """
  
  """.


c_xp_sino_native_le := c_xp_sino_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_sino_le">
  <description>Conjunction, advers., ("sino")
  <ex>no recogímos a Rosa sino a Elena
  <todo>
  """.


c_xp_sino_le := c_xp_sino_lex
  """
  
  """.


c_xp_sino-que_native_le := c_xp_sino-que_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="c_xp_sino-que_le">
  <description>Conjunction, advers., ("sino que")
  <ex>
  <todo>
  """.


c_xp_sino-que_le := c_xp_sino-que_lex
  """
  
  """.


i_-_native_le := i_-_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="i_-_le">
  <description>interjection
  <ex>
  <todo>
  """.


i_-_le := i_-_lex
  """
  
  """.


pt_-_fstop_native_le := pt_-_fstop_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_fstop_le">
  <description>Punct, full stop
  <ex>
  <todo>
  """.


pt_-_fstop_le := pt_-_fstop_lex
  """
  
  """.


pt_-_3dots_native_le := pt_-_3dots_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_3dots_le">
  <description>Punct, 3 dots
  <ex>
  <todo>
  """.


pt_-_3dots_le := pt_-_3dots_lex
  """
  
  """.


pt_-_comma_native_le := pt_-_comma_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_comma_le">
  <description>Punct, comma
  <ex>
  <todo>
  """.


pt_-_comma_le := pt_-_comma_lex
  """
  
  """.


pt_-_cln_native_le := pt_-_cln_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_cln_le">
  <description>Punct, colon
  <ex>
  <todo>
  """.


pt_-_cln_le := pt_-_cln_lex
  """
  
  """.


pt_-_quots_le := pt_-_quots_lex
  """
  <type val="pt_-_quots_le">
  <description>Punct, quotes
  <ex>
  <todo>
  """.


pt_-_lhyphn_native_le := pt_-_lhyphn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_hyphn_le">
  <description>Punct, hyphen
  <ex>
  <todo>
  """.


pt_-_hyphn_native_le := pt_-_hyphn_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_hyphn_le">
  <description>Punct, hyphen
  <ex>
  <todo>
  """.


pt_-_hyphn_le := pt_-_hyphn_lex
  """
  
  """.


pt_-_quest-op_native_le := pt_-_quest-op_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_quest-op_le">
  <description>Punct, question mark, open
  <ex>
  <todo>
  """.


pt_-_quest-op_le := pt_-_quest-op_lex
  """
  
  """.


pt_-_quest-cl_native_le := pt_-_quest-cl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_quest-cl_le">
  <description>Punct, question mark, close
  <ex>
  <todo>
  """.


pt_-_quest-cl_le := pt_-_quest-cl_lex
  """
  
  """.


pt_-_excl-op_native_le := pt_-_excl-op_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_excl-op_le">
  <description>Punct, exclamation, open
  <ex>
  <todo>
  """.


pt_-_excl-op_le := pt_-_excl-op_lex
  """
  
  """.


pt_-_excl-cl_native_le := pt_-_excl-cl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_excl-cl_le">
  <description>Punct, exclamation, close
  <ex>
  <todo>
  """.


pt_-_excl-cl_le := pt_-_excl-cl_lex
  """
  
  """.


pt_-_brckt-op_native_le := pt_-_brckt-op_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_brckt-op_le">
  <description>Punct, brackets, open
  <ex>
  <todo>
  """.


pt_-_brckt-op_le := pt_-_brckt-op_lex
  """
  
  """.


pt_-_brckt-cl_native_le := pt_-_brckt-cl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_brckt-cl_le">
  <description>Punct, brackets, close
  <ex>
  <todo>
  """.


pt_-_brckt-cl_le := pt_-_brckt-cl_lex
  """
  
  """.


pt_-_fr-cl_native_le := pt_-_fr-cl_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_fr-cl_le">
  <description>Punct, ">>"
  <ex>
  <todo>
  """.


pt_-_fr-cl_le := pt_-_fr-cl_lex
  """
  
  """.


pt_-_fr-op_native_le := pt_-_fr-op_lex & native_le
  """
  This is a native lexical entry type, for words that are in the lexicon.
  
  <type val="pt_-_fr-op_le">
  <description>Punct, "<<"
  <ex>
  <todo>
  """.


pt_-_fr-op_le := pt_-_fr-op_lex
  """
  
  """.
